<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miasol&#39;s Blog</title>
  
  
  <link href="http://www.miasol.top/atom.xml" rel="self"/>
  
  <link href="http://www.miasol.top/"/>
  <updated>2023-04-11T23:09:00.729Z</updated>
  <id>http://www.miasol.top/</id>
  
  <author>
    <name>Miasol</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>音频中时常提到的鲁棒性是什么意思？</title>
    <link href="http://www.miasol.top/2023/04/12/%E9%9F%B3%E9%A2%91%E4%B8%AD%E6%97%B6%E5%B8%B8%E6%8F%90%E5%88%B0%E7%9A%84%E9%B2%81%E6%A3%92%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://www.miasol.top/2023/04/12/%E9%9F%B3%E9%A2%91%E4%B8%AD%E6%97%B6%E5%B8%B8%E6%8F%90%E5%88%B0%E7%9A%84%E9%B2%81%E6%A3%92%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88/</id>
    <published>2023-04-11T23:04:04.000Z</published>
    <updated>2023-04-11T23:09:00.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>做数字音频领域的相关内容的时候，经常看到“鲁棒性”这个名词，一直不是很清晰其定义，每次看到都要搜一下，所以今天想着写篇博客解释一下。</p><h2 id="正文"><a class="header-anchor" href="#正文"></a>正文</h2><p>音频领域的鲁棒性是指音频处理算法在面对各种不同类型的音频输入时能够保持良好性能的能力。简言之，鲁棒性是指算法对于噪声、失真、变形、干扰等不完美音频条件的适应性和稳健性。</p><p>在音频处理领域，鲁棒性是一个重要的性能指标，因为实际应用场景中音频输入可能会受到多种因素的干扰，例如背景噪声、录音设备差异、声音品质差异等。鲁棒性的好坏直接影响到音频处理算法在实际应用中的性能和可靠性。</p><p>以下是一些音频领域中鲁棒性的具体解释：</p><ol><li>噪声鲁棒性：音频处理算法应该能够在噪声环境下保持良好的性能。噪声可能来自于环境中的各种声音，例如交通噪声、人声噪声、风噪声等，这些噪声可能对音频信号的质量和清晰度造成干扰。鲁棒性较好的音频处理算法应该能够减小噪声对于音频信号处理的影响，保持较高的处理准确性。</li><li>失真鲁棒性：音频信号在采集、传输、存储等过程中可能会受到失真的影响，例如量化失真、编码失真、传输丢包等。鲁棒性较好的音频处理算法应该能够对失真进行较好的处理，降低失真对音频处理结果的影响。</li><li>变形鲁棒性：音频信号在传输和处理过程中可能会经历变形，例如音频信号的频率、幅度或相位发生变化。鲁棒性较好的音频处理算法应该能够对这些变形进行适应性处理，保持较好的处理性能。</li><li>干扰鲁棒性：音频处理算法应该能够对来自于其他信号源的干扰进行抑制，例如语音信号处理中的混响、回声、干扰音等。鲁棒性较好的音频处理算法应该能够有效处理这些干扰，保持较高的性能。</li></ol><p>综上所述，音频领域的鲁棒性是指音频处理算法在面对不完美音频输入时能够保持良好性能的能力，包括对噪声、失真、变形和</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
&lt;p&gt;做数字音频领域的相关内容的时候，经常看到“鲁棒性”这个名词，一直不是很清晰其定义，每次看到都要搜一下，所以今天想着写篇博客解释一下。&lt;/p&gt;
&lt;h2 id</summary>
      
    
    
    
    <category term="数字音频" scheme="http://www.miasol.top/categories/%E6%95%B0%E5%AD%97%E9%9F%B3%E9%A2%91/"/>
    
    
    <category term="Digital Audio" scheme="http://www.miasol.top/tags/Digital-Audio/"/>
    
  </entry>
  
  <entry>
    <title>Fingerprints</title>
    <link href="http://www.miasol.top/2023/04/09/Fingerprints/"/>
    <id>http://www.miasol.top/2023/04/09/Fingerprints/</id>
    <published>2023-04-09T18:42:24.000Z</published>
    <updated>2023-04-23T23:33:04.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="From-ChatGPT"><a class="header-anchor" href="#From-ChatGPT"></a>From ChatGPT</h2><p>Audio fingerprints, also known as audio fingerprints or audio hashing, are compact and unique representations of audio signals that can be used for various purposes, such as audio identification, content recognition, and audio retrieval. Audio fingerprints are typically generated from the audio content of a given audio file or stream, and they are designed to be robust to common audio transformations such as noise, compression, and format conversions.</p><p>Audio fingerprints are usually generated by extracting specific features from an audio signal, such as the amplitude, frequency, or spectral characteristics of the audio, and then converting these features into a compact representation, often in the form of a fixed-length hash or a numerical code. This fingerprint can then be used to compare against a database of pre-existing fingerprints to identify or recognize audio content.</p><p>One common application of audio fingerprints is in audio identification, where audio fingerprints of a reference set of audio files are generated and stored in a database, and incoming audio can be compared against these fingerprints to identify the content. Audio fingerprints are also used in audio retrieval systems, where users can search for audio content based on a query fingerprint, and in content recognition systems, where audio fingerprints are used to detect copyrighted or unauthorized audio content.</p><p>Audio fingerprints have become an important technology in various industries, including music streaming, broadcast monitoring, copyright enforcement, and audio surveillance, among others. They are also used in various audio-based applications, such as music recommendation, audio search, and audio synchronization.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;From-ChatGPT&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#From-ChatGPT&quot;&gt;&lt;/a&gt;From ChatGPT&lt;/h2&gt;
&lt;p&gt;Audio fingerprints, also known as audio fingerp</summary>
      
    
    
    
    
    <category term="Digital Audio" scheme="http://www.miasol.top/tags/Digital-Audio/"/>
    
    <category term="Music Informatics" scheme="http://www.miasol.top/tags/Music-Informatics/"/>
    
  </entry>
  
  <entry>
    <title>C++ STL记录</title>
    <link href="http://www.miasol.top/2023/03/18/C-STL%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.miasol.top/2023/03/18/C-STL%E8%AE%B0%E5%BD%95/</id>
    <published>2023-03-18T15:25:52.000Z</published>
    <updated>2023-03-18T15:36:52.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="STL-Standard-Template-Library-组件"><a class="header-anchor" href="#STL-Standard-Template-Library-组件"></a>STL (Standard Template Library)组件</h2><ol><li>容器 Containers</li><li>算法 Algorithms</li><li>迭代器 Iterators</li><li>函数对象 Function Objects</li><li>适配器 Adapters</li></ol><h2 id="算法"><a class="header-anchor" href="#算法"></a>算法</h2><ol><li>排序</li><li>搜索</li><li>常用数组算法</li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;STL-Standard-Template-Library-组件&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#STL-Standard-Template-Library-组件&quot;&gt;&lt;/a&gt;STL (Standard Template Libra</summary>
      
    
    
    
    <category term="C++" scheme="http://www.miasol.top/categories/C/"/>
    
    
    <category term="C++语法" scheme="http://www.miasol.top/tags/C-%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Typora使用技巧记录</title>
    <link href="http://www.miasol.top/2023/03/06/Typora%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.miasol.top/2023/03/06/Typora%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E8%AE%B0%E5%BD%95/</id>
    <published>2023-03-06T04:31:09.000Z</published>
    <updated>2023-03-06T04:41:49.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言"></a>引言</h2><p>Markdown内嵌HTML语法所以很多想要的效果直接属于HTML语法就行。这里记录一些比较常用的方法，方便查阅。</p><h2 id="如何引用文献"><a class="header-anchor" href="#如何引用文献"></a>如何引用文献</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--写在需要索引的地方--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ref1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--写在Reference处--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>ref1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>应用：</p><p><img src="image-20230306043528282-8077330.png" alt="image-20230306043528282"></p><p><img src="image-20230306043612313-8077373.png" alt="image-20230306043612313"></p><p>结果：</p><p><img src="image-20230306043720889.png" alt="image-20230306043720889"></p><h2 id="图片并排"><a class="header-anchor" href="#图片并排"></a>图片并排</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">frame</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>void</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--使用table标签，且frame=void消除外边框--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--&lt;tr>一行的内容&lt;\tr>，&lt;td>一个格子的内容&lt;\td>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片地址1<span class="token punctuation">"</span></span>                     <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>第一张图片显示不出时显示的文字<span class="token punctuation">"</span></span>                     <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>填数字作为高度<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--&lt;center>标签将图片居中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片地址2<span class="token punctuation">"</span></span>                     <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>第二张图片显示不出时显示的文字<span class="token punctuation">"</span></span>                     <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>高度一致会好看<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文字居中"><a class="header-anchor" href="#文字居中"></a>文字居中</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>xxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;
&lt;p&gt;Markdown内嵌HTML语法所以很多想要的效果直接属于HTML语法就行。这里记录一些比较常用的方法，方便查阅。&lt;/p&gt;
&lt;h2 id=&quot;如何引用文献&quot;</summary>
      
    
    
    
    <category term="实用工具" scheme="http://www.miasol.top/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Markdown" scheme="http://www.miasol.top/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>AI+音频音乐相关</title>
    <link href="http://www.miasol.top/2023/03/05/resources/"/>
    <id>http://www.miasol.top/2023/03/05/resources/</id>
    <published>2023-03-05T22:29:12.000Z</published>
    <updated>2023-04-24T14:15:43.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言"></a>引言</h2><p>在这里放一些自己感兴趣的方向的论文以及AI音频音乐领域的相关产出。</p><h2 id="应用网站"><a class="header-anchor" href="#应用网站"></a>应用网站</h2><ol><li><a href="https://vocalremover.org/">Vocal Remover</a></li><li><a href="https://github.com/Anjok07/ultimatevocalremovergui">UVR5</a></li><li><a href="https://magenta.tensorflow.org/drumbot">DrumBot: your real-time ML drummer</a></li></ol><h2 id="视频"><a class="header-anchor" href="#视频"></a>视频</h2><ol><li><a href="https://www.youtube.com/@musicaireadinggroup945/featured">Music + AI Reading Group</a></li></ol><h2 id="API-数据集-工具"><a class="header-anchor" href="#API-数据集-工具"></a>API/数据集/工具</h2><ol><li><a href="https://magenta.tensorflow.org/">Magenta</a></li><li><a href="https://paperswithcode.com/dataset/egfxset">EGFxSet (Electric Guitar Effects Dataset)</a></li><li><a href="https://github.com/joshreiss/Working-with-the-Web-Audio-API">Web Audio API </a> 基于Javascript的Web API</li><li><a href="https://github.com/Natooz/MidiTok">MidiTok</a>  convert MIDI files into tokens</li></ol><h2 id="论文-研究"><a class="header-anchor" href="#论文-研究"></a>论文/研究</h2><h3 id="音频分离-Audio-Separation"><a class="header-anchor" href="#音频分离-Audio-Separation"></a>音频分离 Audio Separation</h3><ol><li><a href="https://arxiv.org/abs/2202.01664">Distortion Audio Effects: Learning How to Recover the Clean Signal</a></li><li><a href="https://arxiv.org/abs/1806.03185">Wave-U-Net: A Multi-Scale Neural Network for End-to-End Audio Source Separation</a></li><li></li></ol><h3 id="自动混音-Automatic-Mixing"><a class="header-anchor" href="#自动混音-Automatic-Mixing"></a>自动混音 Automatic Mixing</h3><ol><li><a href="https://www.researchgate.net/publication/320196585_Ten_Years_of_Automatic_Mixing">Ten Years of Automatic Mixing(2017)</a></li><li><a href="https://pearl.plymouth.ac.uk/bitstream/handle/10026.1/16380/A_Deep_Learning_Approach_to_Intelligent_Drum_Mixing_with_the_Wave_U_Net%20%282%29.pdf?sequence=1&amp;isAllowed=n#:~:text=In%20this%20work%2C%20we%20propose,stereo%20mix%20is%20the%20output.">A Deep Learning Approach to Intelligent Drum Mixing with the Wave-U-Net</a></li><li><a href="https://github.com/adobe-research/DeepAFx-ST">Style Transfer of Audio Effects with Differentiable Signal Processing</a></li><li><a href="https://www.mdpi.com/2076-3417/10/2/638">Deep Learning for Black-Box Modeling of Audio Effects</a></li><li><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=9053093">Modeling Plate and Spring Reverberation Using A Dsp-Informed Deep Neural Network</a></li></ol><h3 id="音乐分类-Music-Classification"><a class="header-anchor" href="#音乐分类-Music-Classification"></a>音乐分类 Music Classification</h3><ol><li><a href="https://towardsdatascience.com/genre-classification-of-electronic-dance-music-using-spotifys-audio-analysis-7350cac7daf0">Genre Classification of Electronic Dance Music Using Spotify’s Audio Analysis</a> 这个是用简单的机器学习分类方法进行实践，有源码和讲解，特别适合入门。</li></ol><h3 id="识别"><a class="header-anchor" href="#识别"></a>识别</h3><ol><li><a href="https://hyakuchiki.github.io/DiffSynthISMIR/">Accompanying Website for Synthesizer Sound Matching with Differentiable DSP</a></li></ol><h3 id="转录Transcription"><a class="header-anchor" href="#转录Transcription"></a>转录Transcription</h3><ol><li><a href="https://github.com/magenta/mt3">MT3: Multi-Task Multitrack Music Transcription</a></li><li><a href="https://keunwoochoi.wordpress.com/2019/06/11/drummernet-deep-unsupervised-drum-transcription/">DrummerNet – Deep Unsupervised Drum Transcription</a></li></ol><h3 id="音乐生成-Music-Generation"><a class="header-anchor" href="#音乐生成-Music-Generation"></a>音乐生成 Music Generation</h3><ol><li><a href="https://github.com/AI-Guru/music-generation-research">Music Modeling and Music Generation with Deep Learning</a></li><li><a href="https://github.com/gudgud96/ChordAL">ChordAL - A chord-based approach for AI music generation</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;
&lt;p&gt;在这里放一些自己感兴趣的方向的论文以及AI音频音乐领域的相关产出。&lt;/p&gt;
&lt;h2 id=&quot;应用网站&quot;&gt;&lt;a class=&quot;header-anchor&quot; </summary>
      
    
    
    
    <category term="AI" scheme="http://www.miasol.top/categories/AI/"/>
    
    
    <category term="Deep Learning" scheme="http://www.miasol.top/tags/Deep-Learning/"/>
    
    <category term="Digital Audio" scheme="http://www.miasol.top/tags/Digital-Audio/"/>
    
  </entry>
  
  <entry>
    <title>游戏音效分类与Keyword</title>
    <link href="http://www.miasol.top/2023/02/28/%E6%B8%B8%E6%88%8F%E9%9F%B3%E6%95%88%E5%88%86%E7%B1%BB/"/>
    <id>http://www.miasol.top/2023/02/28/%E6%B8%B8%E6%88%8F%E9%9F%B3%E6%95%88%E5%88%86%E7%B1%BB/</id>
    <published>2023-02-28T12:07:20.000Z</published>
    <updated>2023-02-28T14:32:54.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言"></a>引言</h2><p>本文涉及到的游戏音效分类方式，都来源于作者本人的游戏经历、学习内容、游戏声音设计经验等，不是唯一但是方便的。</p><h2 id="分类"><a class="header-anchor" href="#分类"></a>分类</h2><p>（直接上思维导图）下面是较为常见的分类方法，在每一次进行音效设计之前最好都写一个文档把涉及到的音效进行整理。</p><p><img src="%E5%9F%BA%E6%9C%AC%E5%B8%B8%E8%A7%81%E5%88%86%E7%B1%BB.png" alt="基本常见分类"></p><h2 id="Keyword"><a class="header-anchor" href="#Keyword"></a>Keyword</h2><h3 id="写在前面"><a class="header-anchor" href="#写在前面"></a>写在前面</h3><p>下面列表的单词都是在音效库中寻找素材的常见keyword，作为音效设计师“贴片”是最基本的技能。寻找好的素材除了丰富的第三方音效库，还需要学会如何用英文对声音进行描述。例如，当画面出现后，你要如何描述出脑中所产生的声音细节？越准确的描述越能帮助你找到精准的音效。平时多听多看专业音效库的命名是提高描述能力的方法之一</p><h3 id="UI"><a class="header-anchor" href="#UI"></a>UI</h3><ul><li>interface</li><li>click</li><li>button</li><li>press</li><li>open</li><li>close</li><li>next</li><li>back</li><li>error</li><li>slide</li><li>eject</li><li>positive</li><li>negative</li><li>neutral</li></ul><h3 id="技能"><a class="header-anchor" href="#技能"></a>技能</h3><table><thead><tr><th>属性</th><th>Keyword</th></tr></thead><tbody><tr><td>风</td><td>whoosh<br/>dust<br/>wind<br/>moving<br/>creak<br/>crispy<br/>reverse<br/>magic</td></tr><tr><td>火</td><td>fire<br/>fire throw<br/>fire ball<br/>cast<br/>burst<br/>launch<br/>lance<br/>reverse<br/>magic</td></tr><tr><td>雷电</td><td>whoosh<br/>zap<br/>electric<br/>thunder<br/>reverse<br/>magic</td></tr><tr><td>水</td><td>whoosh<br />water<br />bubble<br />burst<br />lance<br />Water impact<br />splash<br />reverse<br />magic</td></tr><tr><td>地</td><td>whoosh<br />rock<br />Impact rock large<br />stone<br />reverse<br />magic</td></tr><tr><td>召唤</td><td>whoosh<br />summon<br />sphere<br />synth<br />large<br />whoosh long<br />evil<br />deliver<br />transfer<br />effect<br />fx<br />scifi<br />reverse<br />magic</td></tr></tbody></table><h3 id="环境音效"><a class="header-anchor" href="#环境音效"></a>环境音效</h3><h4 id="如何思考"><a class="header-anchor" href="#如何思考"></a>如何思考</h4><ol><li><p>自然环境</p><p>以自然动植物声音为基础</p></li><li><p>人文环境</p><p>以自然动植物以及任务活动声音为基础</p></li><li><p>超现实环境</p><ul><li>物象细节</li><li>意象氛围烘托</li></ul></li></ol><h4 id="自然和人文"><a class="header-anchor" href="#自然和人文"></a>自然和人文</h4><ol><li>时段<ul><li>morning</li><li>afternoon</li><li>night</li></ul></li><li>地点<ul><li>desert</li><li>park</li><li>lakeside</li><li>market</li><li>country</li><li>forest</li><li>street</li></ul></li><li>天气</li><li>物象<ul><li>具体动物</li><li>具体植物</li><li>人物</li></ul></li></ol><h4 id="超现实"><a class="header-anchor" href="#超现实"></a>超现实</h4><p>合成声</p><ul><li>atmosphere</li><li>synth</li><li>ambient</li><li>rumble （低音）</li><li>Sci fi</li><li>dark long</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;
&lt;p&gt;本文涉及到的游戏音效分类方式，都来源于作者本人的游戏经历、学习内容、游戏声音设计经验等，不是唯一但是方便的。&lt;/p&gt;
&lt;h2 id=&quot;分类&quot;&gt;&lt;a cla</summary>
      
    
    
    
    <category term="游戏音频" scheme="http://www.miasol.top/categories/%E6%B8%B8%E6%88%8F%E9%9F%B3%E9%A2%91/"/>
    
    
    <category term="音效" scheme="http://www.miasol.top/tags/%E9%9F%B3%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>游戏音效分析之蛋仔派对</title>
    <link href="http://www.miasol.top/2023/02/28/%E6%B8%B8%E6%88%8F%E9%9F%B3%E6%95%88%E5%88%86%E6%9E%90%E4%B9%8B%E8%9B%8B%E4%BB%94%E6%B4%BE%E5%AF%B9/"/>
    <id>http://www.miasol.top/2023/02/28/%E6%B8%B8%E6%88%8F%E9%9F%B3%E6%95%88%E5%88%86%E6%9E%90%E4%B9%8B%E8%9B%8B%E4%BB%94%E6%B4%BE%E5%AF%B9/</id>
    <published>2023-02-28T11:57:09.000Z</published>
    <updated>2023-02-28T13:39:25.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言"></a>引言</h2><p>2023年年初《蛋仔派对》手游火了起来，其中包含的各种小游戏吸引了一大波玩家，我也包括其中。截止目前大概玩了一个多月了，我玩得比较多的是“乐园模式”和“捉迷藏”，今天突然想到要不然写一个《蛋仔派对》的音效分析文章。本文不会分析游戏的所有音效，但是会对几个大类进行分析。</p><h2 id="角色技能"><a class="header-anchor" href="#角色技能"></a>角色技能</h2><h3 id="基础技能"><a class="header-anchor" href="#基础技能"></a>基础技能</h3><h3 id="场景互动"><a class="header-anchor" href="#场景互动"></a>场景互动</h3><h2 id="UI与道具"><a class="header-anchor" href="#UI与道具"></a>UI与道具</h2><h3 id="功能UI"><a class="header-anchor" href="#功能UI"></a>功能UI</h3><h3 id="游戏道具"><a class="header-anchor" href="#游戏道具"></a>游戏道具</h3><h2 id="场景音效"><a class="header-anchor" href="#场景音效"></a>场景音效</h2><h3 id="岛屿音效"><a class="header-anchor" href="#岛屿音效"></a>岛屿音效</h3><h3 id="环境氛围"><a class="header-anchor" href="#环境氛围"></a>环境氛围</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;
&lt;p&gt;2023年年初《蛋仔派对》手游火了起来，其中包含的各种小游戏吸引了一大波玩家，我也包括其中。截止目前大概玩了一个多月了，我玩得比较多的是“乐园模式”和“捉</summary>
      
    
    
    
    <category term="游戏音频" scheme="http://www.miasol.top/categories/%E6%B8%B8%E6%88%8F%E9%9F%B3%E9%A2%91/"/>
    
    
    <category term="音效" scheme="http://www.miasol.top/tags/%E9%9F%B3%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>FIR与IIR滤波器</title>
    <link href="http://www.miasol.top/2023/02/23/FIR%E4%B8%8EIIR%E6%BB%A4%E6%B3%A2%E5%99%A8/"/>
    <id>http://www.miasol.top/2023/02/23/FIR%E4%B8%8EIIR%E6%BB%A4%E6%B3%A2%E5%99%A8/</id>
    <published>2023-02-23T23:44:39.000Z</published>
    <updated>2023-03-05T22:32:15.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FIR"><a class="header-anchor" href="#FIR"></a>FIR</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;FIR&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#FIR&quot;&gt;&lt;/a&gt;FIR&lt;/h2&gt;
</summary>
      
    
    
    
    <category term="DSP" scheme="http://www.miasol.top/categories/DSP/"/>
    
    
    <category term="Filter" scheme="http://www.miasol.top/tags/Filter/"/>
    
    <category term="Digital Audio" scheme="http://www.miasol.top/tags/Digital-Audio/"/>
    
  </entry>
  
  <entry>
    <title>整理的一些数据结构基础算法</title>
    <link href="http://www.miasol.top/2023/02/22/%E6%95%B4%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    <id>http://www.miasol.top/2023/02/22/%E6%95%B4%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</id>
    <published>2023-02-22T20:09:25.000Z</published>
    <updated>2023-03-05T22:31:49.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言"></a>引言</h2><p>这份文档是在2021年左右整理的一些数据结构重点，同时也是必背的基础算法。最近需要再复习一遍，在看的同时会进行Leetcode同步实践，如果有错误会随时更新。</p><h2 id="链表"><a class="header-anchor" href="#链表"></a>链表</h2><h3 id="将两个递增有序的单链表设计算法成一个非递减有序的链表（链表归并）"><a class="header-anchor" href="#将两个递增有序的单链表设计算法成一个非递减有序的链表（链表归并）"></a><strong>将两个递增有序的单链表设计算法成一个非递减有序的链表（链表归并）</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">merge</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span>A<span class="token punctuation">,</span>LNode <span class="token operator">*</span>B<span class="token punctuation">,</span>LNode <span class="token operator">*</span><span class="token operator">&amp;</span>C<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p<span class="token operator">=</span>A<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>q<span class="token operator">=</span>B<span class="token operator">-></span>next<span class="token punctuation">;</span>    C <span class="token operator">=</span> A<span class="token punctuation">;</span>    C<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> C<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> q<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">&lt;=</span> q<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            r<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            r <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>            q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>            r <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> r<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找链表中是否存在一个值为x的结点，若存在，则删除结点并返回1，否则返回0"><a class="header-anchor" href="#查找链表中是否存在一个值为x的结点，若存在，则删除结点并返回1，否则返回0"></a><strong>查找链表中是否存在一个值为x的结点，若存在，则删除结点并返回1，否则返回0</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span>LNode<span class="token operator">*</span> <span class="token operator">&amp;</span>L<span class="token punctuation">,</span>ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token operator">-></span>data <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在带头结点的单链表L中，删除所有值为x的结点，并释放空间"><a class="header-anchor" href="#在带头结点的单链表L中，删除所有值为x的结点，并释放空间"></a><strong>在带头结点的单链表L中，删除所有值为x的结点，并释放空间</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>pre <span class="token operator">=</span> L<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>del<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            del <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            pre<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            pre <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="试编写在头节点的单链表L中删除最小值的高效算法-已知最小值"><a class="header-anchor" href="#试编写在头节点的单链表L中删除最小值的高效算法-已知最小值"></a><strong>试编写在头节点的单链表L中删除最小值的高效算法(已知最小值)</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>LNode<span class="token operator">*</span> <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>pre <span class="token operator">=</span> L<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>minpre <span class="token operator">=</span> L<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>min <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">&lt;</span> min<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            min <span class="token operator">=</span> p<span class="token punctuation">;</span>            minpre <span class="token operator">=</span> pre<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         pre <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    minpre<span class="token operator">-></span>next <span class="token operator">=</span> min<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="A-B两个单链表递增有序，从A-B中找出公共元素产生单链表C，要求不破坏A，B结点"><a class="header-anchor" href="#A-B两个单链表递增有序，从A-B中找出公共元素产生单链表C，要求不破坏A，B结点"></a><strong>A,B两个单链表递增有序，从A,B中找出公共元素产生单链表C，要求不破坏A，B结点</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span>A<span class="token punctuation">,</span> LNode <span class="token operator">*</span>B<span class="token punctuation">,</span> LNode <span class="token operator">*</span>C<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> A<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>q <span class="token operator">=</span> B<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>r<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">;</span>    r <span class="token operator">=</span> C<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">&lt;</span> q<span class="token operator">-></span>data<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">-></span>data <span class="token operator">&lt;</span> q<span class="token operator">-></span>data<span class="token punctuation">)</span> q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            s <span class="token operator">=</span> <span class="token punctuation">(</span>LNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>            r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>            r <span class="token operator">=</span> s<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找单链表中倒数第K个结点，若成功，则输出该节点的data，并返回1，否则返回0"><a class="header-anchor" href="#查找单链表中倒数第K个结点，若成功，则输出该节点的data，并返回1，否则返回0"></a><strong>查找单链表中倒数第K个结点，若成功，则输出该节点的data，并返回1，否则返回0</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>res <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>k<span class="token punctuation">)</span> res <span class="token operator">=</span> res<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>res<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写一个算法将一个非负的十进制数转化为二进制数"><a class="header-anchor" href="#编写一个算法将一个非负的十进制数转化为二进制数"></a><strong>编写一个算法将一个非负的十进制数转化为二进制数</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">binary</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> stack<span class="token punctuation">[</span>maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> top<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>result<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n！<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>n<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>top<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i<span class="token operator">=</span>stack<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>result <span class="token operator">=</span> result<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>i<span class="token punctuation">;</span> <span class="token comment">// 注意：特殊算法，记住就行</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设计算法判断带头结点的单链表的全部n个字符是否中心对称，例如xyx（回文）"><a class="header-anchor" href="#设计算法判断带头结点的单链表的全部n个字符是否中心对称，例如xyx（回文）"></a><strong>设计算法判断带头结点的单链表的全部n个字符是否中心对称，例如xyx（回文）</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">char</span> s<span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        p<span class="token operator">-></span>data <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    i<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树"><a class="header-anchor" href="#树"></a>树</h2><h3 id="计算二叉树的所有结点个数"><a class="header-anchor" href="#计算二叉树的所有结点个数"></a><strong>计算二叉树的所有结点个数</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n1<span class="token punctuation">,</span>n2<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        n1 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        n2 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n1<span class="token operator">+</span>n2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计算二叉树中所有叶子结点的个数"><a class="header-anchor" href="#计算二叉树中所有叶子结点的个数"></a><strong>计算二叉树中所有叶子结点的个数</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n1<span class="token punctuation">,</span>n2<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>p<span class="token operator">-></span>rchild<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        n1 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        n2 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n1<span class="token operator">+</span>n2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计算二叉树的深度"><a class="header-anchor" href="#计算二叉树的深度"></a><strong>计算二叉树的深度</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ld<span class="token punctuation">,</span>rd<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        ld <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        rd <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>ld<span class="token operator">></span>rd<span class="token operator">?</span> ld <span class="token operator">:</span> rd<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="求二叉树中，值为x的层号"><a class="header-anchor" href="#求二叉树中，值为x的层号"></a><strong>求二叉树中，值为x的层号</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> L <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p！<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">==</span> x<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>L<span class="token punctuation">;</span>        <span class="token function">fun</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fun</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">--</span>L<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="先序非递归遍历二叉树"><a class="header-anchor" href="#先序非递归遍历二叉树"></a><strong>先序非递归遍历二叉树</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PreOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">IniteStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>     BiTree p<span class="token operator">=</span>T<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">||</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">vistit</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>p<span class="token punctuation">.</span>lchild<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中序非递归遍历二叉树"><a class="header-anchor" href="#中序非递归遍历二叉树"></a><strong>中序非递归遍历二叉树</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InOrder2</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">IniteStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>     BiTree p<span class="token operator">=</span>T<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">||</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>p<span class="token punctuation">.</span>lchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">vistit</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后序非递归遍历二叉树"><a class="header-anchor" href="#后序非递归遍历二叉树"></a><strong>后序非递归遍历二叉树</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PostOrder2</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">IniteStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>     BiTree p<span class="token punctuation">,</span>r<span class="token punctuation">;</span>    p<span class="token operator">=</span>T<span class="token punctuation">;</span>    r <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">||</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-></span>p<span class="token punctuation">.</span>lchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">GetTop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token operator">&amp;&amp;</span>p<span class="token operator">-></span>rchild<span class="token operator">!=</span>r<span class="token punctuation">)</span>                 p<span class="token operator">=</span>p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                r<span class="token operator">=</span>p<span class="token punctuation">;</span>                p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="❗判断二叉树是否为完全二叉树"><a class="header-anchor" href="#❗判断二叉树是否为完全二叉树"></a><strong>❗判断二叉树是否为完全二叉树</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//判断是否为完全二叉树</span>bool <span class="token function">judge</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ture<span class="token punctuation">;</span>SqQueue Q<span class="token punctuation">;</span><span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化队列</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根结点入队</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//读到空指针则停止循环</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左孩子入队</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右孩子入队</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//检查此时队列中是否还有未访问到的结点</span><span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="❗判断二叉树是否是二叉排序树"><a class="header-anchor" href="#❗判断二叉树是否是二叉排序树"></a>❗判断二叉树是否是二叉排序树</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//中序遍历思想，非递归</span><span class="token keyword">void</span> <span class="token function">judge</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">IniteStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>     BiTree p<span class="token operator">=</span>T<span class="token punctuation">;</span>     <span class="token keyword">int</span> pre <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">||</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>p<span class="token punctuation">.</span>lchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token operator">&lt;</span>pre<span class="token punctuation">)</span><span class="token comment">//若父节点小于左子树</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="❗利用二叉树遍历的思想判断一个二叉树是否为平衡二叉树"><a class="header-anchor" href="#❗利用二叉树遍历的思想判断一个二叉树是否为平衡二叉树"></a>❗利用二叉树遍历的思想判断一个二叉树是否为平衡二叉树</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ld<span class="token punctuation">,</span>rd<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        ld <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        rd <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>ld<span class="token operator">></span>rd<span class="token operator">?</span> ld <span class="token operator">:</span> rd<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">judge</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">int</span> ld<span class="token punctuation">,</span>rd<span class="token punctuation">,</span>gap<span class="token punctuation">;</span>    ld <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    rd <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    gap <span class="token operator">=</span> rd <span class="token operator">-</span> ld<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>gap <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> gap <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//递归判断</span>    <span class="token keyword">return</span> <span class="token function">judge</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">judge</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉查找树的插入结点K"><a class="header-anchor" href="#二叉查找树的插入结点K"></a><strong>二叉查找树的插入结点K</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">BST_Insert</span><span class="token punctuation">(</span>BiTree <span class="token operator">&amp;</span>T<span class="token punctuation">,</span>KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span>Null<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        T <span class="token operator">=</span> <span class="token punctuation">(</span>BiTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BSTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        T<span class="token operator">-></span>key <span class="token operator">=</span> k<span class="token punctuation">;</span>        T<span class="token operator">-></span>lchild <span class="token operator">=</span> T<span class="token operator">-></span>rchild <span class="token operator">=</span> Null<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>T<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//二叉树不允许值相同</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span>T<span class="token operator">-></span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">BST_Insert</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">></span>T<span class="token operator">-></span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">BST_Insert</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉查找树中删除结点K"><a class="header-anchor" href="#二叉查找树中删除结点K"></a><strong>二叉查找树中删除结点K</strong></h3><p>删除情况：</p><p>​(以删除结点z为例)</p><ol><li><p>若z是叶子结点，则直接删除</p></li><li><p>若z只有一颗左/右子树，则让z的子树成为z的父结点的子树(替代z的位置)</p></li><li><p>若z既有左又有右子树</p><p>（1）直接后继：z的右子树最左下角结点x(右子树最小的值)，替代z的位置，然后删除原来的x。</p><p>（2）直接前驱：z的左子树最右下角结点y(左子树最大的值)，替代z的位置，然后删除原来的y。</p></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">BiTree <span class="token function">BST_Delete</span><span class="token punctuation">(</span>BiTree <span class="token operator">&amp;</span>T<span class="token punctuation">,</span>keyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BSTNode tmp<span class="token punctuation">;</span>    <span class="token comment">//未找到删除结点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找到删除元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//找需要删除的结点</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> T<span class="token operator">-></span>data<span class="token punctuation">)</span>        T<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">BST_Delete</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">></span> T<span class="token operator">-></span>data<span class="token punctuation">)</span>        T<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">BST_Delete</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//找到结点</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild <span class="token operator">&amp;&amp;</span> T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//类型3,直接后继</span>            tmp <span class="token operator">=</span> <span class="token function">FindMin</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>            T<span class="token operator">-></span>data <span class="token operator">=</span> tmp<span class="token operator">-></span>data<span class="token punctuation">;</span>            T<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token function">BST_Delete</span><span class="token punctuation">(</span>T<span class="token operator">-></span>data<span class="token punctuation">,</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//类型1和2</span>            tmp <span class="token operator">=</span> T<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span> <span class="token comment">//判断左孩子不存在，即只有右孩子或无子节点</span>                T <span class="token operator">=</span> T<span class="token operator">-></span>rchild<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token comment">//只有左孩子或无子节点</span>                T<span class="token operator">=</span> T<span class="token operator">-></span>lchild<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>；        <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆"><a class="header-anchor" href="#堆"></a>堆</h2><h3 id="优先队列"><a class="header-anchor" href="#优先队列"></a>优先队列</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;默认最大优先级队列priority_queue&lt;int,vector&lt;int&gt;&gt;;&#x2F;&#x2F;最小优先级队列,从小到大排priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt;;&#x2F;&#x2F;最大优先级，从大到小排priority_queue&lt;int,vector&lt;int&gt;,less&lt;int&gt;&gt;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="排序"><a class="header-anchor" href="#排序"></a>排序</h2><h3 id="❗插入排序"><a class="header-anchor" href="#❗插入排序"></a>❗插入排序</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;带哨兵void InsertSort(ElemType A[], int n)&#123;    int i,j;    for(i&#x3D;2;i&lt;&#x3D;n;i++)&#123;        if(A[i]&lt;A[i-1])&#123;            A[0] &#x3D; A[i];             for(j &#x3D; i-1; A[0] &lt; A[j]; --j)                A[j+1] &#x3D; A[j];A[j+1] &#x3D; A[0];        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="❗折半插入"><a class="header-anchor" href="#❗折半插入"></a>❗折半插入</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void InsertSort(ElemType A[], int n)&#123;    int i,j,low,high,mid;    for(i&#x3D;2;i&lt;&#x3D;n;i++)&#123;        A[0] &#x3D; A[1];        low &#x3D; 1;        high &#x3D; i-1;        while(low &lt;&#x3D; high)&#123;            mid &#x3D; (low + high)&#x2F;2;            if(A[mid] &gt; A[0])                high &#x3D; mid - 1;            else                low &#x3D; mid + 1;            for(j &#x3D; i-1; j &gt;&#x3D; low; --j)                A[j+1] &#x3D; A[j];A[low] &#x3D; A[0];        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="希尔排序"><a class="header-anchor" href="#希尔排序"></a>希尔排序</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void ShellSort(int A[], int n)&#123;    int temp;    for(int d&#x3D;n&#x2F;2; d&gt;0; d&#x3D;d&#x2F;2)&#123;        for(int i&#x3D;d; i&lt;n; ++i)&#123;            temp &#x3D; A[i];            int j&#x3D;i;            while(j&gt;&#x3D;d &amp;&amp; A[j-d]&gt;temp)&#123;                A[j]&#x3D;A[j-d];                j-&#x3D;d;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="冒泡排序"><a class="header-anchor" href="#冒泡排序"></a>冒泡排序</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void BubbleSort(ElemType A[], int n)&#123;    int i,j,flag;    for(i&#x3D;0; i&lt;n-1; ++i)&#123;        flag&#x3D;0;        for(j&#x3D;0; j&lt;n-1-i; ++j)&#123;            if(A[j]&gt;A[j+1])&#123;&#x2F;&#x2F;升序                swap(A[j],A[j+1]);&#x2F;&#x2F;交换            flag &#x3D; 1;            &#125;        &#125;        if(flag&#x3D;0) return;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速排序"><a class="header-anchor" href="#快速排序"></a>快速排序</h3><h4 id="c语言版本-递归"><a class="header-anchor" href="#c语言版本-递归"></a>c语言版本 递归</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void QuickSort(int A[], int low, int high)&#123;    if(low &lt; high)&#123;&#x2F;&#x2F;跳出条件        int pivotpos &#x3D; Partition(A, low, high);        QuickSort(A, low, pivotpos-1);        QuickSort(A, pivotpos+1, high);    &#125;&#125;int Partition(int A[], int low, int high)&#123;    int pivot &#x3D; A[low];    while(low &lt; high)&#123;        while(low&lt;high &amp;&amp; A[high]&gt;&#x3D;pivot) --high;        A[low] &#x3D; A[high];        while(low&lt;high &amp;&amp; A[low]&lt;&#x3D;pivot)++low;        A[high] &#x3D; A[low];    &#125;    A[low] &#x3D; pivot;    returnlow;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="c-版本-改"><a class="header-anchor" href="#c-版本-改"></a>c++版本(改)</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void quicksort(int x[], int first, int last)&#123;    int pos;    if(first &lt; last)&#123;        pos &#x3D; split(x, first, last);        quicksort(x, first, pos-1);        quicksort(x, pos-1, last);    &#125;&#125;int splite(int x[],int first, int last)&#123;    int pivot &#x3D; x[first]; &#x2F;&#x2F;假定选取first位置为基准    int left &#x3D; first;    int Right &#x3D; last;    while(left &lt; right)&#123;        while(pivot &lt; x[right])             --right;        while(left &lt; right &amp;&amp; x[left] &lt;&#x3D; pivot)             ++left;        if(left&lt;right)             swap(x[left],x[right]);    &#125;    int pos &#x3D; right;    x[first] &#x3D; x[pos];    x[pos] &#x3D; pivot;    return pos;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="归并排序"><a class="header-anchor" href="#归并排序"></a>归并排序</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>B <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>low<span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>high<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        B<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>low<span class="token punctuation">,</span>j<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token operator">=</span>i<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>mid <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span>high<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            A<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            A<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//for</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>A<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>B<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span>A<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>B<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">MergSort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">MergSort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Merge</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每次递归到二路归并</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="堆排序"><a class="header-anchor" href="#堆排序"></a>堆排序</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;建立大根堆void BuildMaxHeap(ElemType A[], int len)&#123;    for(int i&#x3D;len&#x2F;2; i&gt;0; i--)&#123;        HeadAdjust(A,i,len);    &#125;&#125;void HeadAdjust(ElemType A[], int len)&#123;    A[0] &#x3D; A[k];    for(i&#x3D;2*k; i&lt;len; i*&#x3D;2)&#123;        if(i&lt;len &amp;&amp; A[i]&lt;A[i+1]) i++;        if(A[0]&gt;&#x3D;A[i]) break;        else&#123;            A[k]&#x3D;A[i];            k&#x3D;i;        &#125;    &#125;    A[k]&#x3D;A[0];&#125;&#x2F;&#x2F;排序void HeapSort(ElemType A[], int len)&#123;    BuildMaxHeap(A,len);    for(i&#x3D;len; i&gt;1; i--)&#123;        Swap(A[i],A[1]);        HeadAdjust(A,i,i-1)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;
&lt;p&gt;这份文档是在2021年左右整理的一些数据结构重点，同时也是必背的基础算法。最近需要再复习一遍，在看的同时会进行Leetcode同步实践，如果有错误会随时更</summary>
      
    
    
    
    <category term="数据结构算法" scheme="http://www.miasol.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Data Structure" scheme="http://www.miasol.top/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>CNN</title>
    <link href="http://www.miasol.top/2023/02/22/CNN/"/>
    <id>http://www.miasol.top/2023/02/22/CNN/</id>
    <published>2023-02-22T19:51:43.000Z</published>
    <updated>2023-03-04T15:56:26.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言"></a>引言</h2><p><em>卷积神经网络</em>（convolutional neural network，CNN）是一类为<strong>处理图像</strong>数据而设计的神经网络。</p><h2 id="卷积"><a class="header-anchor" href="#卷积"></a>卷积</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;卷积神经网络&lt;/em&gt;（convolutional neural network，CNN）是一类为&lt;strong&gt;处理图像&lt;/strong&gt;数据而</summary>
      
    
    
    
    <category term="AI" scheme="http://www.miasol.top/categories/AI/"/>
    
    
    <category term="Deep Learning" scheme="http://www.miasol.top/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>个人博客搭建：Hexo + GitHub + 域名绑定</title>
    <link href="http://www.miasol.top/2023/02/21/blog/"/>
    <id>http://www.miasol.top/2023/02/21/blog/</id>
    <published>2023-02-21T22:25:04.000Z</published>
    <updated>2023-02-22T19:49:52.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备"><a class="header-anchor" href="#准备"></a>准备</h2><ol><li><p>安装<a href="https://nodejs.org/en/download/">Node.js</a></p></li><li><p>安装<a href="https://git-scm.com/downloads">Git</a></p></li></ol><h2 id="安装Hexo"><a class="header-anchor" href="#安装Hexo"></a>安装Hexo</h2><ol><li><p>安装<a href="https://hexo.io/zh-cn/docs/">Hexo</a></p></li><li><p>打开Hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init mywebsite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果Mac出现<code>zsh: command not found: hexo</code> 问题请点击  <a href="#pro">Mac出现command not found: hexo问题如何解决</a></p></blockquote></li><li><p>进入<code>mywebsite</code> 并且安装<code>npm</code>about</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> mywebsite<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="选择博客主题"><a class="header-anchor" href="#选择博客主题"></a>选择博客主题</h2><ol><li><p><a href="https://hexo.io/themes/">Hexo主题官网</a></p></li><li><p>选择想要的主题，并且在终端进入<code>mywebsite</code>下的<code>themes</code>文件夹中输入<code>git clone</code>进行下载</p></li><li><p>在<code>_config.yml</code> 中修改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">theme: 主题文件夹名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如我选择的是white主题，但是clone下来的文件夹名为<code>hexo-theme-white</code> 所以在<code>_config.yml</code> 中的设置应该为<code>theme: hexo-theme-white</code></p></li><li><p>现在已经建好了原始的主页，如果想要看网站，那么输入<code>hexo s</code>(等同于<code>hexo server</code>) 然后在浏览器中进入<code>http://localhost:4000</code> 就能看到了。<strong>在发布前，也可以用该方法进行本地调试。</strong></p></li></ol><h2 id="发布在Github上"><a class="header-anchor" href="#发布在Github上"></a>发布在Github上</h2><ol><li><p>在终端登录github</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name GitHub用户名<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email GitHub邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>生成SSH</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> GitHub邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时 <code>id_rsa.pub</code> 文件中就添加了你的GitHub账号</p></li><li><p>进入GitHub<code>Settings -&gt; SSH and GPG keys</code>点击  <code>New SSH key</code> ，把 <code>id_rsa.pub</code> 里的内容复制粘贴在这里</p><p><img src="image-20230221192413577.png" alt="image-20230221192413577"></p></li><li><p>在github上建一个仓库 “<a href="http://xn--eqr924avxo.github.io">用户名.github.io</a>”</p></li><li><p>打开 <code>_config.yml</code> 并且修改以下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repo: 仓库地址  branch: main  message: <span class="token string">"提交信息"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装hexo-deployer-git自动部署发布工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>发布</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>发布的时候可能需要输入用户名和密码，但是现在github已经不能用登录密码发布了，所以需要<a href="https://github.com/settings/tokens">生成token</a>用token替代密码</strong></p></blockquote></li><li><p>打开“<a href="http://xn--eqr924avxo.github.io">用户名.github.io</a>”就能看到你的网站了</p></li></ol><h2 id="绑定域名"><a class="header-anchor" href="#绑定域名"></a>绑定域名</h2><ol><li><p>首先你需要购买自己的域名，阿里云、腾讯云等等都可以</p></li><li><p>在Github项目主页<code>Add file </code> -&gt;<code>Create new file</code>，创建一个名为<code>CNAME</code>的文件，并且填入不含<code>https://</code> 和<code>www</code> 的域名名字，例如：</p><p><img src="image-20230221213328392.png" alt="image-20230221213328392"></p><blockquote><p>这样创建好CNAME文件后，每次更新网站都需要重新创建CNAME，所以要将该文件保存到本地。具体位置为当前使用主题的source文件夹下。例如，我使用的butterfly主题，所以保存位置为：<code>/mywebsite/themes/butterfly/source</code></p></blockquote></li><li><p>进入仓库中的<code>Settings</code>-&gt;<code>Pages</code>-&gt;<code>Custom domain</code> 确保填入的是自己的域名</p><p><img src="image-20230221213545435.png" alt="image-20230221213545435"></p><blockquote><p>注意！！在更新提交后，如果打开域名遇到404的情况，可能是<a href="#syco">DNS解析未完成</a></p></blockquote></li><li><p>在终端ping自己的域名并获取ip地址</p><p><img src="image-20230221213812925.png" alt="image-20230221213812925"></p></li><li><p>以<a href="https://cn.aliyun.com/">阿里云</a>为例，在控制台进行域名解析，添加两个<strong>A记录</strong>，<strong>主机记录</strong>分别为<code>www</code>和<code>@</code>，<strong>记录值</strong>为ping所得的IP地址，稍等一下就可以通过你的域名访问了</p></li></ol><h2 id="Mac可能出现的问题"><a class="header-anchor" href="#Mac可能出现的问题"></a>Mac可能出现的问题</h2><h3 id="a-id-pro-a-zsh-command-not-found-hexo"><a class="header-anchor" href="#a-id-pro-a-zsh-command-not-found-hexo"></a><a id="pro"></a>zsh: command not found: hexo</h3><ol><li><p>终端输入<code>cd .npm-global/bin</code></p></li><li><p>输入 <code>pwd</code>查看路径</p><p>一般这里的路径是：<code>/Users/xxx/.npm-global/bin</code></p></li><li><p>输入 <code>vi ~/.zshrc</code></p></li><li><p>编辑<code> .zshrc</code>文件，输入<code>export PATH=$PATH:/Users/xxx/.npm-global/bin</code></p></li><li><p>此时输入<code>hexo -v</code>如果还报错，则输入<code>source ~/.zshrc</code>，再输入Hexo就没问题了</p></li></ol><h2 id="Hexo常用命令"><a class="header-anchor" href="#Hexo常用命令"></a>Hexo常用命令</h2><p><a href="https://hexo.io/zh-cn/docs/commands.html">https://hexo.io/zh-cn/docs/commands.html</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#新建页面</span>hexo new page <span class="token string">"About Me"</span><span class="token comment"># 等同于hexo clean,清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><span class="token comment"># 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</span>hexo cl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更新注意事项"><a class="header-anchor" href="#更新注意事项"></a>更新注意事项</h2><h3 id="a-id-syco-a-DNS解析未完成导致同步问题"><a class="header-anchor" href="#a-id-syco-a-DNS解析未完成导致同步问题"></a><a id="syco"></a>DNS解析未完成导致同步问题</h3><p>一般在提交后，Github的Custom domain输入框下会出现“DNS Check in Progress”，此时需要等到其变为“DNS valid for primary”时再通过域名打开网页否则会404错误。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;准备&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;Node.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="Blog Build" scheme="http://www.miasol.top/categories/Blog-Build/"/>
    
    
    <category term="Hexo" scheme="http://www.miasol.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>建站的碎碎念</title>
    <link href="http://www.miasol.top/2023/02/21/%E5%BB%BA%E7%AB%99%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    <id>http://www.miasol.top/2023/02/21/%E5%BB%BA%E7%AB%99%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/</id>
    <published>2023-02-21T19:58:24.000Z</published>
    <updated>2023-02-22T20:17:00.037Z</updated>
    
    <content type="html"><![CDATA[<p>学习计算机这几年其实前前后后做过两三次博客/个站了，后来都因为各种原因下架或者是不再更新。不过这次是确实有好好计划之后再建站的，应该不会那么短命了。目前第一天上传，只有博客功能，后面我会不断完善个人介绍、作品集、音乐推荐等，有空也会把以前写的东西搬上来。另外，因为现在是中英文两套计算机体系都在学，有些内容可能写英文会比较好表达，所以整个博客是一个中英杂状态。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学习计算机这几年其实前前后后做过两三次博客/个站了，后来都因为各种原因下架或者是不再更新。不过这次是确实有好好计划之后再建站的，应该不会那么短命了。目前第一天上传，只有博客功能，后面我会不断完善个人介绍、作品集、音乐推荐等，有空也会把以前写的东西搬上来。另外，因为现在是中英</summary>
      
    
    
    
    <category term="Talk" scheme="http://www.miasol.top/categories/Talk/"/>
    
    
  </entry>
  
</feed>
