<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miasol&#39;s Blog</title>
  
  
  <link href="http://www.miasol.top/atom.xml" rel="self"/>
  
  <link href="http://www.miasol.top/"/>
  <updated>2023-11-08T15:06:42.317Z</updated>
  <id>http://www.miasol.top/</id>
  
  <author>
    <name>Miasol</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>编程思想与游戏音频设计中的回调（Callback）</title>
    <link href="http://www.miasol.top/2023/11/08/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E4%B8%8E%E6%B8%B8%E6%88%8F%E9%9F%B3%E9%A2%91%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%9B%9E%E8%B0%83%EF%BC%88Callback%EF%BC%89/"/>
    <id>http://www.miasol.top/2023/11/08/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E4%B8%8E%E6%B8%B8%E6%88%8F%E9%9F%B3%E9%A2%91%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%9B%9E%E8%B0%83%EF%BC%88Callback%EF%BC%89/</id>
    <published>2023-11-08T15:06:16.000Z</published>
    <updated>2023-11-08T15:06:42.317Z</updated>
    
    <content type="html"><![CDATA[<p>【开坑未写完】</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;【开坑未写完】&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>游戏音频中常见的中音频格式</title>
    <link href="http://www.miasol.top/2023/11/08/%E6%B8%B8%E6%88%8F%E9%9F%B3%E9%A2%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%AD%E9%9F%B3%E9%A2%91%E6%A0%BC%E5%BC%8F/"/>
    <id>http://www.miasol.top/2023/11/08/%E6%B8%B8%E6%88%8F%E9%9F%B3%E9%A2%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%AD%E9%9F%B3%E9%A2%91%E6%A0%BC%E5%BC%8F/</id>
    <published>2023-11-08T14:48:43.000Z</published>
    <updated>2023-11-08T14:50:31.265Z</updated>
    
    <content type="html"><![CDATA[<p>【开坑未写完】</p><p><a href="https://blog.csdn.net/qq_42052602/article/details/129355625">https://blog.csdn.net/qq_42052602/article/details/129355625</a></p><p>来自ChatGPT的解释</p><p>游戏音频通常使用多种不同的编码格式，具体的选择取决于游戏引擎、平台、性能需求和音频质量。以下是一些常见的游戏音频编码格式：</p><ol><li><p><strong>WAV（Waveform Audio File Format）</strong>：这是一种无损音频格式，通常用于游戏中的高质量音频，如音乐和声音效果。WAV文件通常较大，因为它们不经过压缩，但提供了最高的音质。</p></li><li><p><strong>MP3</strong>：MP3是一种有损音频格式，广泛用于游戏中的音乐。它具有较小的文件大小，但会牺牲一些音质以实现压缩。游戏通常使用较高比特率的MP3以提供良好的音质。</p></li><li><p><strong>OGG</strong>：OGG是一种开源的有损音频格式，通常用于游戏音效和语音。它可以提供较小的文件大小和相对不错的音质。</p></li><li><p><strong>AAC</strong>：AAC是一种高效的有损音频格式，通常在移动游戏中使用。它提供了较小的文件大小和良好的音质。</p></li><li><p><strong>ADPCM（Adaptive Differential Pulse-Code Modulation）</strong>：这是一种压缩音频格式，经常用于游戏音效。它可以提供较小的文件大小，但相对较低的音质。</p></li><li><p><strong>Vorbis</strong>：Vorbis是一种有损音频编解码器，通常用于游戏中的音乐和声音效果。它提供了不错的音质和相对小的文件大小。</p></li><li><p><strong>FLAC（Free Lossless Audio Codec）</strong>：FLAC是一种开源无损音频格式，通常用于游戏中的高质量音频，尤其在PC游戏中。它提供了无损音质，但文件较大。</p></li><li><p><strong>Opus</strong>：Opus是一种开源音频编解码器，广泛用于游戏中的语音通信。它提供了低延迟和良好的音质。</p></li><li><p><strong>PCM（Pulse Code Modulation）</strong>：这是一种无损音频格式，通常用于游戏中的音效，如游戏中的声音效果。它提供了最高的音质，但文件较大。</p></li></ol><p>选择哪种编码格式取决于游戏的需求，包括性能、存储和音频质量。通常，游戏会使用多种格式来适应不同类型的音频内容。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;【开坑未写完】&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_42052602/article/details/129355625&quot;&gt;https://blog.csdn.net/qq_42052602/article/details/12</summary>
      
    
    
    
    <category term="游戏音频" scheme="http://www.miasol.top/categories/%E6%B8%B8%E6%88%8F%E9%9F%B3%E9%A2%91/"/>
    
    
    <category term="Digital Audio" scheme="http://www.miasol.top/tags/Digital-Audio/"/>
    
  </entry>
  
  <entry>
    <title>【未完成】音频元数据Metadata</title>
    <link href="http://www.miasol.top/2023/11/08/%E9%9F%B3%E9%A2%91%E5%85%83%E6%95%B0%E6%8D%AEMetadata/"/>
    <id>http://www.miasol.top/2023/11/08/%E9%9F%B3%E9%A2%91%E5%85%83%E6%95%B0%E6%8D%AEMetadata/</id>
    <published>2023-11-08T09:11:06.000Z</published>
    <updated>2023-11-08T15:16:30.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是音频元数据（Metadata）"><a class="header-anchor" href="#什么是音频元数据（Metadata）"></a>什么是音频元数据（Metadata）</h2><p>音频元数据（Metadata）用于描述音频文件的信息，这些元数据通常嵌入在音频文件中或与音频文件一起存储，以帮助使用者识别、组织和管理音频内容。数据的种类主要取决于文件的格式。</p><h2 id="常见Metadata类型"><a class="header-anchor" href="#常见Metadata类型"></a>常见Metadata类型</h2><ol><li>标题和艺术家信息</li><li>专辑信息</li><li>时长</li><li>音频格式</li><li>比特率</li><li>采样率</li><li>通道数：例如单声道（Mono）、立体声道（Stereo）</li><li>风格和流派</li><li>歌词</li><li>评论和标签</li></ol><h2 id="音频元数据的标准格式"><a class="header-anchor" href="#音频元数据的标准格式"></a>音频元数据的标准格式</h2><p>Metadata通常以一定的标准格式进行存储，例如ID3标签、APE标签或Vorbis注释等。并且不是所有的格式的音频文件都可以存储Metadata。</p><p>能储存metadata的音频文件格式有：</p><ul><li>.wav</li><li>.mp3</li><li>.ogg</li><li>.wma</li><li>.flac</li><li>.aac</li></ul><h2 id="如何向音频文件中插入Metadata"><a class="header-anchor" href="#如何向音频文件中插入Metadata"></a>如何向音频文件中插入Metadata</h2><h2 id="音频编辑器导出设置（Reaper）"><a class="header-anchor" href="#音频编辑器导出设置（Reaper）"></a>音频编辑器导出设置（Reaper）</h2><p>许多编辑器和DAW在导出音频文件是能对文件的Metadata进行设置，本文以Reaper为例。</p><ol><li><p>依次File-&gt;Render…打开reaper导出文件的界面，如图：</p><p><img src="image-1.png" alt="image1"></p></li><li><p>默认Metadata选项是关闭的，我们只需要打开即可对元数据进行编辑。</p><p><img src="image-2.png" alt="image2"></p></li></ol><h3 id="Pyhton-audio-metadata库"><a class="header-anchor" href="#Pyhton-audio-metadata库"></a>Pyhton audio-metadata库</h3><ol><li><p>安装方式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> audio-metadata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>链接：<a href="https://pypi.org/project/audio-metadata/">https://pypi.org/project/audio-metadata/</a></p></li></ol><h3 id="FFmpeg"><a class="header-anchor" href="#FFmpeg"></a>FFmpeg</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是音频元数据（Metadata）&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#什么是音频元数据（Metadata）&quot;&gt;&lt;/a&gt;什么是音频元数据（Metadata）&lt;/h2&gt;
&lt;p&gt;音频元数据（Metadata）用于描述音频文件的信息，这些</summary>
      
    
    
    
    <category term="数字音频" scheme="http://www.miasol.top/categories/%E6%95%B0%E5%AD%97%E9%9F%B3%E9%A2%91/"/>
    
    
    <category term="Digital Audio" scheme="http://www.miasol.top/tags/Digital-Audio/"/>
    
  </entry>
  
  <entry>
    <title>【转载】对数字音频领域中 采样率 比特深度 动态范围 比特率 的理解</title>
    <link href="http://www.miasol.top/2023/11/01/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E5%AF%B9%E6%95%B0%E5%AD%97%E9%9F%B3%E9%A2%91%E9%A2%86%E5%9F%9F%E4%B8%AD-%E9%87%87%E6%A0%B7%E7%8E%87-%E6%AF%94%E7%89%B9%E6%B7%B1%E5%BA%A6-%E5%8A%A8%E6%80%81%E8%8C%83%E5%9B%B4-%E6%AF%94%E7%89%B9%E7%8E%87-%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://www.miasol.top/2023/11/01/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E5%AF%B9%E6%95%B0%E5%AD%97%E9%9F%B3%E9%A2%91%E9%A2%86%E5%9F%9F%E4%B8%AD-%E9%87%87%E6%A0%B7%E7%8E%87-%E6%AF%94%E7%89%B9%E6%B7%B1%E5%BA%A6-%E5%8A%A8%E6%80%81%E8%8C%83%E5%9B%B4-%E6%AF%94%E7%89%B9%E7%8E%87-%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2023-11-01T15:03:00.000Z</published>
    <updated>2023-11-08T15:04:19.919Z</updated>
    
    <content type="html"><![CDATA[<p>对数字音频领域中 采样率 比特深度 动态范围 比特率 的理解 - 卡芙小轩的文章 - 知乎<br><a href="https://zhuanlan.zhihu.com/p/40828783">https://zhuanlan.zhihu.com/p/40828783</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对数字音频领域中 采样率 比特深度 动态范围 比特率 的理解 - 卡芙小轩的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/40828783&quot;&gt;https://zhuanlan.zhihu.com/p/40828783&lt;/</summary>
      
    
    
    
    <category term="转载" scheme="http://www.miasol.top/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
    <category term="Digital Audio" scheme="http://www.miasol.top/tags/Digital-Audio/"/>
    
  </entry>
  
  <entry>
    <title>【转载】空间音频科普</title>
    <link href="http://www.miasol.top/2023/10/28/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E7%A9%BA%E9%97%B4%E9%9F%B3%E9%A2%91%E7%A7%91%E6%99%AE/"/>
    <id>http://www.miasol.top/2023/10/28/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E7%A9%BA%E9%97%B4%E9%9F%B3%E9%A2%91%E7%A7%91%E6%99%AE/</id>
    <published>2023-10-28T14:46:49.000Z</published>
    <updated>2023-11-08T15:04:33.835Z</updated>
    
    <content type="html"><![CDATA[<p>空间音频科普篇【持续更新】 - 削腚恶的文章 - 知乎<br><a href="https://zhuanlan.zhihu.com/p/584461699">https://zhuanlan.zhihu.com/p/584461699</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;空间音频科普篇【持续更新】 - 削腚恶的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/584461699&quot;&gt;https://zhuanlan.zhihu.com/p/584461699&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="转载" scheme="http://www.miasol.top/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
    <category term="Digital Audio" scheme="http://www.miasol.top/tags/Digital-Audio/"/>
    
  </entry>
  
  <entry>
    <title>C++中的&amp;</title>
    <link href="http://www.miasol.top/2023/10/22/C-%E4%B8%AD%E7%9A%84/"/>
    <id>http://www.miasol.top/2023/10/22/C-%E4%B8%AD%E7%9A%84/</id>
    <published>2023-10-22T04:14:01.000Z</published>
    <updated>2023-11-08T15:27:06.030Z</updated>
    
    <content type="html"><![CDATA[<p>当涉及到 C++ 中的 <code>&amp;</code> 符号时，我们可以将其归结为以下几个主要用途和含义：</p><ol><li><p><strong>引用符号</strong>：</p><ul><li><p><code>&amp;</code> 用于声明引用类型：你可以使用 <code>&amp;</code> 来创建引用，使变量成为另一个变量的别名。引用允许你对同一数据进行多个命名引用，而不是创建副本。例如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">// ref 现在是 x 的别名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改 <code>ref</code> 也会影响 <code>x</code>，因为它们引用同一个值。</p></li><li><p><code>const T&amp;</code> 用于声明常量引用：常量引用允许你引用值，但不允许修改它。这在函数参数传递中很有用，可以防止不必要的拷贝。例如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> cref <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">// x 的常量引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><strong>取地址符号</strong>：</p><ul><li><code>&amp;</code> 用于获取变量的地址：通过使用 <code>&amp;</code> 运算符，你可以获取变量的内存地址，通常与指针一起使用。例如：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span> <span class="token comment">// ptr 存储了 x 的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>按位与运算符</strong>：</p><ul><li><code>&amp;</code> 可以用于执行按位与操作：这是一个位运算操作，用于执行两个整数的位级与操作。例如：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">// 00000101</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment">// 00000011</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span> <span class="token comment">// 结果为 00000001，即 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>函数指针和引用</strong>：</p><ul><li><code>&amp;</code> 可用于获取函数的指针或引用：它用于指向函数或引用函数。这在函数指针或函数引用的上下文中使用。例如：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">someFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>funcPtr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>someFunction<span class="token punctuation">;</span> <span class="token comment">// funcPtr 存储了函数指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>左值引用</strong>：</p><ul><li>在函数参数列表中，<code>&amp;</code> 用于表示左值引用：这允许函数修改传递给它的参数。当函数参数声明为引用时，它可以修改传递给它的值。例如：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">modifyValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 修改 x 的值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>类型标识符</strong>：</p><ul><li>在模板编程和元编程中，<code>&amp;</code> 有时用作类型标识符，通常在模板特化或偏特化的上下文中使用，以区分特定的类型。</li></ul></li></ol><p>理解 <code>&amp;</code> 在特定上下文中的确切含义对于正确编写 C++ 代码非常重要，因为它可以表示不同的操作和语义。所以，根据上下文和需要，你可以理解 <code>&amp;</code> 为引用、地址、按位与等不同的概念。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当涉及到 C++ 中的 &lt;code&gt;&amp;amp;&lt;/code&gt; 符号时，我们可以将其归结为以下几个主要用途和含义：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;引用符号&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; 用于声明</summary>
      
    
    
    
    <category term="C++" scheme="http://www.miasol.top/categories/C/"/>
    
    
    <category term="C++" scheme="http://www.miasol.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>关于音频流处理【未完成】</title>
    <link href="http://www.miasol.top/2023/10/19/%E5%85%B3%E4%BA%8E%E9%9F%B3%E9%A2%91%E6%B5%81%E5%A4%84%E7%90%86/"/>
    <id>http://www.miasol.top/2023/10/19/%E5%85%B3%E4%BA%8E%E9%9F%B3%E9%A2%91%E6%B5%81%E5%A4%84%E7%90%86/</id>
    <published>2023-10-19T07:02:35.000Z</published>
    <updated>2023-11-08T15:06:50.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="音频流与应用场景"><a class="header-anchor" href="#音频流与应用场景"></a>音频流与应用场景</h2><p>音频流（audio streaming）是指将音频数据以流的方式，通过网络进行实时传输，而不是一次性下载整个音频文件。这在实时通信、音乐流媒体、在线广播和游戏中非常常见。通常有以下几种常见的应用：</p><ol><li>实时通信：音频流在语音通话、视频会议和在线游戏中发挥关键作用。它允许用户实时传输声音，以进行对话或协作。常见的音频编解码格式如Opus和WebRTC用于实时通信。</li><li>音乐流媒体：音乐流媒体服务（如Spotify、Apple Music和Tidal）通过音频流的方式向用户提供音乐。用户可以即时播放音乐，而不需要下载整个歌曲。通常，这些服务使用高质量的音频编码格式（如AAC或FLAC）以提供出色的音质。</li><li>在线广播：许多广播电台和电台应用程序通过音频流的方式播放音乐、新闻、体育赛事和其他节目。这使得听众可以实时收听，而不必等待完整的广播文件下载。</li><li>游戏音频：音频流也用于游戏中，特别是在线多人游戏。游戏音频可以通过流媒体方式传输，以实现实时互动和更好的游戏体验。</li></ol><h2 id="Buffer-Size"><a class="header-anchor" href="#Buffer-Size"></a>Buffer Size</h2><p>音频中的缓冲区大小（Buffer Size）对音频处理和播放的性能和稳定性有重要影响，特别是在实时音频应用中。大的缓冲区大小在音频处理和播放中具有一些明显的优点和缺点，这些取决于具体的应用和需求。以下是大的缓冲区大小可能具有的一些优点和缺点：</p><p>优点：</p><ol><li><p>高音频质量：大的缓冲区大小可以存储更多的音频数据，提供更多的处理时间，从而改善音频质量。这对于音乐制作、音频编辑和专业录音非常重要。</p></li><li><p>稳定性：较大的缓冲区可以减少音频丢失和断裂的可能性，从而提高系统的稳定性。这在要求可靠性的应用中非常重要，如广播、电视制作和音乐演出。</p></li><li><p>减少CPU负载：大的缓冲区可以降低CPU的负荷，因为处理音频数据的时间更长，而不需要频繁地填充和处理小的缓冲区。这有助于释放系统资源，使CPU可以用于其他任务。</p></li><li><p>抗抖动：较大的缓冲区可以减轻来自音频数据到达不均匀的网络或外部源的抖动，因为它可以容纳更多的音频数据，使系统更容易应对变化。</p></li></ol><p>缺点：</p><ol><li><p>延迟：大的缓冲区引入更长的延迟，这在实时音频应用中可能是不可接受的。高延迟可能影响实时通信、游戏和音视频同步。</p></li><li><p>大内存占用：大的缓冲区需要更多的内存来存储音频数据，这可能会增加系统资源的消耗。这对于资源受限的设备和应用来说可能是一个问题。</p></li><li><p>不适合实时应用：对于需要即时响应的应用，如实时通信和游戏，大的缓冲区可能导致不良用户体验，因为延迟增加，可能会导致用户感知到的滞后。</p></li></ol><p>综上所述，大的缓冲区大小通常适用于对音频质量和稳定性要求较高，且可以容忍一定延迟的应用。然而，在实时音频应用中，需要权衡音质、延迟和系统资源的使用，通常会选择较小的缓冲区以确保良好的用户体验。不同应用会根据其需求来选择适当的缓冲区大小。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;音频流与应用场景&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#音频流与应用场景&quot;&gt;&lt;/a&gt;音频流与应用场景&lt;/h2&gt;
&lt;p&gt;音频流（audio streaming）是指将音频数据以流的方式，通过网络进行实时传输，而不是一次性下载整个音频文件。</summary>
      
    
    
    
    <category term="数字音频" scheme="http://www.miasol.top/categories/%E6%95%B0%E5%AD%97%E9%9F%B3%E9%A2%91/"/>
    
    
    <category term="Digital Audio" scheme="http://www.miasol.top/tags/Digital-Audio/"/>
    
  </entry>
  
  <entry>
    <title>音频算法中常见的IIR滤波器</title>
    <link href="http://www.miasol.top/2023/10/14/%E9%9F%B3%E9%A2%91%E7%AE%97%E6%B3%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84IIR%E6%BB%A4%E6%B3%A2%E5%99%A8/"/>
    <id>http://www.miasol.top/2023/10/14/%E9%9F%B3%E9%A2%91%E7%AE%97%E6%B3%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84IIR%E6%BB%A4%E6%B3%A2%E5%99%A8/</id>
    <published>2023-10-14T06:10:19.000Z</published>
    <updated>2023-10-20T12:05:51.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言"></a>引言</h2><h2 id="Comb-Filter"><a class="header-anchor" href="#Comb-Filter"></a>Comb Filter</h2><p>Comb Filter是通过将信号的一部分与一个自身延迟版本相叠加进行实现的。结构如图：</p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/13/Comb_filter_feedforward.svg/2880px-Comb_filter_feedforward.svg.png" alt="undefined" style="zoom: 15%;" /><p>差分方程为：<br>$$<br>y[n]=x[n]+\alpha x[n-K]<br>$$<br>由于Comb Filter的形状特征，所以中文翻译为梳状滤波器。</p><p>以下是它的主要优缺点和应用场景：</p><p><strong>优点：</strong></p><ol><li><p><strong>简单而直观：</strong> Comb Filter的原理非常直观和易于理解。它的工作方式类似于将原始信号与自身的延迟版本相加，因此在概念上相对简单。</p></li><li><p><strong>产生特殊音效：</strong> Comb Filter常用于音频特效处理，如<strong>混响</strong>、共振和相位效果。它可以产生模拟混响的声音，为声音增添空间感和自然感。</p></li><li><p><strong>在音乐创作中有用：</strong> 音乐制作人和声音设计师经常使用Comb Filter来创造独特的声音效果，以增强音乐作品的创意性。</p></li><li><p><strong>相位干扰效果：</strong> Comb Filter的频谱中的凹槽和峰值可以引发相位干扰效果，从而创造出独特的音频效果，如拖尾和位移。</p></li></ol><p><strong>缺点：</strong></p><ol><li><p><strong>有限的应用范围：</strong> Comb Filter主要用于特定的音频特效和信号处理任务。它并不适合所有类型的滤波需求，因此在更广泛的音频处理任务中可能不常见。</p></li><li><p><strong>可能引入噪音：</strong> 当Comb Filter的延迟量过大时，它可能引入明显的混响或噪音，这可能不适用于需要高保真度的应用。</p></li></ol><p><strong>应用场景：</strong></p><ol><li><p><strong>音频混响：</strong> Comb Filter经常用于模拟混响效果。通过将原始信号与稍有延迟的版本相加，可以模拟声音在不同表面上反射的效果，从而创造出混响效果。</p></li><li><p><strong>相位效果：</strong> Comb Filter可用于创建各种相位效果，如相位移动、拖尾和位移效果。这些效果在音乐制作和声音设计中常用于创造独特的声音。</p></li><li><p><strong>共振效果：</strong> Comb Filter还可用于模拟共振效果，使信号在某些频率上增强，从而创造出共振或滤波效果。</p></li><li><p><strong>音频艺术和实验音乐：</strong> Comb Filter在音频艺术和实验音乐中常用于创造非传统、抽象的声音效果，以拓展音乐和声音的表现方式。</p></li></ol><p>总的来说，Comb Filter是一个独特的工具，适用于特殊的音频处理和音效设计任务。它的应用范围相对有限，主要用于模拟混响、共振和相位效果等领域。对于音乐制作人、声音设计师和音频艺术家来说，它可以为他们的创意提供广泛的可能性。</p><h2 id="Biquad-Filter"><a class="header-anchor" href="#Biquad-Filter"></a>Biquad Filter</h2><p>它被称为&quot;Biquad&quot;，因为其频域传递函数通常包含二次方程。差分方程如下：<br>$$<br>y[n]=b0 ∗x[n]+b1∗x[n−1]+b2∗x[n−2]−a1∗y[n−1]−a2∗y[n−2]<br>$$<br>Biquad Filter（二阶滤波器）在信号处理和音频应用中具有许多优点，但也有一些局限性。以下是它们的主要优点和缺点：</p><p><strong>优点：</strong></p><ol><li><p><strong>灵活性：</strong> Biquad Filter非常灵活，因为它可以用于多种滤波任务，包括低通滤波、高通滤波、带通滤波和陷波滤波等。这使得它适用于各种应用，从音频均衡到音频效果处理。</p></li><li><p><strong>可调参数：</strong> 通过调整滤波器的系数（$b_0$, $b_1$,$ b_2$,$ a_1$, $a_2$），可以定制滤波器的特性，如中心频率、Q因子（带宽）、增益等。这使得Biquad Filter非常适合满足特定的滤波需求。</p></li><li><p><strong>计算效率：</strong> 二阶滤波器的计算效率较高，因为它只涉及有限数量的历史样本，适用于实时处理要求较高的应用。</p></li><li><p><strong>稳定性：</strong> 与其他滤波器设计相比，Biquad Filter通常更容易保持稳定。这是因为它是二阶滤波器，而不是更高阶的滤波器，因此在实现时更容易处理。</p></li><li><p><strong>常见应用：</strong> Biquad Filter在音频处理中非常常见，它用于音响均衡、滤波效果、音频音调控制等。因此，有很多现成的工具和库可以用来实现它。</p></li></ol><p><strong>缺点：</strong></p><ol><li><p><strong>有限阶数：</strong> Biquad Filter只是一个二阶滤波器，相对于某些要求更高的应用来说，其滤波特性有限。在一些需要更急剧滤波的情况下，可能需要更高阶的滤波器。</p></li><li><p><strong>有界带宽：</strong> Biquad Filter的频率响应通常受到带宽的限制，因此不适用于一些需要非常宽带的应用。</p></li><li><p><strong>相位变化：</strong> Biquad Filter的滤波操作会引入相位变化，这可能在某些应用中是不希望的。某些特定应用可能需要线性相位滤波器。</p></li></ol><p>总的来说，Biquad Filter是一种强大且灵活的滤波器，适用于许多音频和信号处理任务。然而，它并不是适用于所有应用的通用解决方案，因为它有一些限制，特别是在需要更高阶滤波器或更宽带的情况下。在选择滤波器时，应根据具体的应用需求和性能要求来评估其优缺点。</p><h2 id="Linkwitz-Filter"><a class="header-anchor" href="#Linkwitz-Filter"></a>Linkwitz Filter</h2><p>Linkwitz Filter通常是低通滤波器，其工作原理如下：</p><p><strong>工作原理：</strong> Linkwitz Filter的工作原理基于以下关键思想：</p><ol><li><strong>扬声器分频：</strong> 在多单元扬声器系统中，不同的驱动单元（如低音炮、中音单元和高音单元）负责不同频率范围的声音。为了实现平滑的频率过渡，这些单元需要被分配到适当的频带。</li><li><strong>滤波操作：</strong> Linkwitz Filter通常是低通滤波器，用于处理低音单元的信号。它通过滤除高频部分，只保留低频信号。这有助于确保低音单元不会播放超出其能力范围的高频声音。</li><li><strong>相位对齐：</strong> 一个重要的目标是确保低音单元和高音单元之间的频率过渡是平滑的，避免声音不连贯。 Linkwitz Filter的设计有助于实现相位对齐，以使不同单元的声音在频率过渡点上保持一致。</li><li><strong>陡峭滤波特性：</strong> Linkwitz Filter通常具有陡峭的滤波特性，以确保频率过渡是明确的，而不会导致重叠或混淆。</li></ol><p>Linkwitz Filter可以有不同的变种，如Linkwitz-Riley Filter，它采用特殊的滤波特性来实现更好的相位一致性。这些滤波器的主要目标是在多单元扬声器系统中实现<strong>平滑的频率过渡</strong>，以提供高质量的声音。</p><h2 id="Butterworth-Filter"><a class="header-anchor" href="#Butterworth-Filter"></a>Butterworth Filter</h2><p>Butterworth滤波器是数字音频处理中常用的一种滤波器类型，用于调整音频信号的频率响应。它以其平坦的频率响应特性而著名，但也有一些特定的优点和限制。下面是关于Butterworth滤波器的详细信息：</p><p><strong>工作原理：</strong><br>Butterworth滤波器是一种IIR（无限脉冲响应）滤波器，通常用于调整音频信号的频率特性。它的工作原理基于传递函数，其频率响应通常以模拟滤波器形式表示为：</p><p>$H(s) = \frac{1}{(1 + \left(\frac{s}{\omega_c}\right)<sup>{2N})</sup>{1/2N}}$</p><p>其中：</p><ul><li>$H(s)$ 是滤波器的传递函数。</li><li>$s$ 是复变量。</li><li>$\omega_c$是截止频率。</li><li>$N$ 是滤波器的阶数。</li></ul><p>Butterworth滤波器的特点是，在通带内，振幅响应是平坦的，即没有波纹和不平滑。然而，随着频率的增加，它的振幅响应在截止频率附近会迅速下降，以实现阻带的功能。但需要注意的是，Butterworth滤波器的过渡带相对平滑，不像某些其他滤波器类型那样陡峭。</p><p><strong>优点：</strong></p><ol><li><p><strong>平坦的频率响应：</strong> Butterworth滤波器的主要优点是其频率响应在通带内非常平坦，这意味着它不引入波纹和失真。这对于需要保持信号质量的应用非常重要，如音频均衡。</p></li><li><p><strong>光滑的相位响应：</strong> 与某些其他滤波器类型相比，Butterworth滤波器具有光滑的相位响应。这对于保持信号的相位特性非常有用，尤其是在音频处理中。</p></li><li><p><strong>简单的设计：</strong> Butterworth滤波器的设计相对简单，滤波器系数可以通过标准方程来计算。这使得它易于实现。</p></li></ol><p><strong>缺点：</strong></p><ol><li><p><strong>不陡峭的频率过渡：</strong> Butterworth滤波器的主要缺点是其频率过渡特性相对不陡峭。这意味着在阻带和通带之间的过渡相对平滑，可能不适用于某些需要急剧滤波的应用。</p></li><li><p><strong>不适用于宽带滤波：</strong> Butterworth滤波器通常不适合实现宽带滤波，因为它的阻带宽度较宽。对于需要精确的频率选择性滤波的应用，可能需要其他类型的滤波器。</p></li></ol><p><strong>应用场景：</strong></p><p>Butterworth滤波器常用于音频处理、语音处理和通信系统中，特别是在需要保持信号质量的情况下。它们适用于低通滤波、高通滤波、带通滤波和带阻滤波等应用。但需要注意，它的截止特性相对平滑，不像某些其他滤波器那样陡峭，因此在某些需要急剧滤波的应用中可能需要其他类型的滤波器。选择滤波器类型通常取决于特定应用的需求和性能要求。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;
&lt;h2 id=&quot;Comb-Filter&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Comb-Filter&quot;&gt;&lt;/a&gt;Comb Filte</summary>
      
    
    
    
    <category term="数字音频" scheme="http://www.miasol.top/categories/%E6%95%B0%E5%AD%97%E9%9F%B3%E9%A2%91/"/>
    
    
    <category term="Digital Audio" scheme="http://www.miasol.top/tags/Digital-Audio/"/>
    
  </entry>
  
  <entry>
    <title>FIR滤波器和IIR滤波器的比较</title>
    <link href="http://www.miasol.top/2023/10/06/FIR%E6%BB%A4%E6%B3%A2%E5%99%A8%E5%92%8CIIR%E6%BB%A4%E6%B3%A2%E5%99%A8%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <id>http://www.miasol.top/2023/10/06/FIR%E6%BB%A4%E6%B3%A2%E5%99%A8%E5%92%8CIIR%E6%BB%A4%E6%B3%A2%E5%99%A8%E7%9A%84%E6%AF%94%E8%BE%83/</id>
    <published>2023-10-06T07:54:54.000Z</published>
    <updated>2023-10-17T08:22:38.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言"></a><strong>引言</strong></h2><p>数字滤波在信号处理、音频处理和通信系统中扮演着至关重要的角色。两种常见的数字滤波器类型是FIR（有限脉冲响应）滤波器和IIR（无限脉冲响应）滤波器。它们在设计、特性和应用方面有着显著的区别。本文将深入探讨这两种滤波器的区别，以帮助读者更好地理解它们的工作原理和适用范围。</p><h2 id="1-FIR滤波器和IIR滤波器的基础"><a class="header-anchor" href="#1-FIR滤波器和IIR滤波器的基础"></a><strong>1. FIR滤波器和IIR滤波器的基础</strong></h2><p>在深入讨论它们的区别之前，让我们首先了解FIR和IIR滤波器的基础。</p><ul><li><p><strong>FIR滤波器</strong>（有限脉冲响应）：FIR滤波器的输出仅取决于其输入的有限历史样本。它通常以固定长度的冲激响应（滤波器系数）来实现。FIR滤波器的工作原理是将输入信号与这些系数进行卷积运算，以产生输出信号。</p></li><li><p><strong>IIR滤波器</strong>（无限脉冲响应）：与FIR不同，IIR滤波器的输出取决于其输入的历史样本和输出的历史样本。它通常以差分方程的形式来实现，这涉及递归运算，因此它具有反馈结构。</p></li></ul><h2 id="2-频率响应和相位特性"><a class="header-anchor" href="#2-频率响应和相位特性"></a><strong>2. 频率响应和相位特性</strong></h2><p>一个主要区别在于它们的频率响应和相位特性。</p><ul><li><p><strong>FIR滤波器</strong>：FIR滤波器的频率响应通常是线性相位的，这意味着它不会引入信号中的相位变化。这使得它在需要线性相位特性的应用中很有用，如音频均衡。</p></li><li><p><strong>IIR滤波器</strong>：IIR滤波器的频率响应可以是非线性相位的。它通常在实现特定的频率选择性滤波（如低通、高通、带通和带阻）时非常有效。由于其反馈结构，IIR滤波器通常可以在较低阶数下实现与FIR相当的滤波特性。</p></li></ul><h2 id="3-稳定性"><a class="header-anchor" href="#3-稳定性"></a><strong>3. 稳定性</strong></h2><p>另一个重要区别涉及稳定性。</p><ul><li><p><strong>FIR滤波器</strong>：FIR滤波器是稳定的，因为它没有反馈路径，不会引入极点（poles），从而避免了不稳定性。</p></li><li><p><strong>IIR滤波器</strong>：IIR滤波器具有反馈路径，因此可能引入极点，这会使它们在某些情况下变得不稳定。确保IIR滤波器的稳定性需要谨慎的设计和分析。</p></li></ul><h2 id="4-实现方式"><a class="header-anchor" href="#4-实现方式"></a><strong>4. 实现方式</strong></h2><p>这两种滤波器的实现方式也不同。</p><ul><li><p><strong>FIR滤波器</strong>：FIR滤波器可以通过卷积运算来实现，通常需要一个固定长度的冲激响应（滤波器系数），这些系数可以通过窗函数、频域设计或优化算法来选择。</p></li><li><p><strong>IIR滤波器</strong>：IIR滤波器通常以差分方程的形式来实现，涉及递归运算，这需要更少的存储器和计算资源，但可能需要更多的注意来确保稳定性。</p></li></ul><h2 id="5-应用领域"><a class="header-anchor" href="#5-应用领域"></a><strong>5. 应用领域</strong></h2><p>最后，这两种滤波器在不同的应用和需求下有各自的优势和限制。</p><ul><li><p><strong>FIR滤波器</strong>通常用于需要线性相位的应用，如音频均衡、陷波滤波和滤波效果。它们还常用于数字信号处理中的滤波任务，因为它们的设计和分析较为直观。</p></li><li><p><strong>IIR滤波器</strong>常用于实现特定的频率响应，如声音滤波、语音处理、通信系统中的滤波、控制系统中的滤波等。它们可以用较低阶数实现复杂的滤波特性，从而降低计算和存储成本。</p></li></ul><h2 id="结论"><a class="header-anchor" href="#结论"></a><strong>结论</strong></h2><p>FIR和IIR滤波器是数字信号处理中两种重要的滤波器类型，它们在频率响应、相位特性、稳定性和实现方式等方面有着显著的区别。选择适当的滤波器类型取决于具体的应用需求，理解它们之间的区别有助于更好地应用它们来满足特定任务的要求。无论是音频处理、</p><p>通信系统还是控制系统，这两种滤波器都发挥着关键作用，为信号处理提供了强大的工具。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#引言&quot;&gt;&lt;/a&gt;&lt;strong&gt;引言&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;数字滤波在信号处理、音频处理和通信系统中扮演着至关重要的角色。两种常见的数字滤波器类型是FIR（有限脉冲响应）滤波器和I</summary>
      
    
    
    
    <category term="数字音频" scheme="http://www.miasol.top/categories/%E6%95%B0%E5%AD%97%E9%9F%B3%E9%A2%91/"/>
    
    
    <category term="Digital Audio" scheme="http://www.miasol.top/tags/Digital-Audio/"/>
    
  </entry>
  
  <entry>
    <title>十种排序算法(C++)</title>
    <link href="http://www.miasol.top/2023/09/26/%E5%8D%81%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97-C/"/>
    <id>http://www.miasol.top/2023/09/26/%E5%8D%81%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97-C/</id>
    <published>2023-09-26T06:25:34.000Z</published>
    <updated>2023-10-27T06:45:29.777Z</updated>
    
    <content type="html"><![CDATA[<h1>C++ 十种排序算法</h1><h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>先写一个输入输出的模版，中间调用对应的函数进行排序</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要排序的数字，使用逗号隔开，然后按回车结束输入："</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">// 读取输入并解析为向量</span>    std<span class="token double-colon punctuation">::</span>string input<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">getline</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> numbers<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>stringstream <span class="token function">ss</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">char</span> comma<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ss <span class="token operator">>></span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        numbers<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        ss <span class="token operator">>></span> comma<span class="token punctuation">;</span> <span class="token comment">// 读取逗号</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 调用排序函数</span>    <span class="token function">bubbleSort</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//冒泡为例</span>    <span class="token comment">// 输出排序后的结果</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"排序后的结果："</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>时间复杂度$O(n^2)$<ol><li>冒泡排序</li><li>选择排序</li><li>插入排序</li></ol></li><li>时间复杂度$O(nlog_n)$<ol><li>归并排序</li><li>快速排序</li><li>堆排序</li><li>希尔排序</li></ol></li><li>时间复杂度$O(n)$<ol><li>基数排序</li><li>桶排序</li><li>计数排序</li></ol></li></ol><h2 id="1-冒泡排序"><a class="header-anchor" href="#1-冒泡排序"></a>1. 冒泡排序</h2><p>冒泡排序是一种简单的排序算法。它重复地遍历待排序的元素列表，比较相邻的两个元素，并在需要时交换它们的位置，直到整个列表都排序完成。</p><h3 id="算法描述"><a class="header-anchor" href="#算法描述"></a>算法描述</h3><ol><li>初始状态：假设我们有一个未排序的数组或列表。</li><li>从列表的第一个元素开始，依次比较相邻的两个元素。</li><li>如果当前元素大于后面的元素，交换这两个元素的位置，使较大的元素“浮”到列表的末尾。</li><li>继续依次比较相邻元素，重复步骤 3，直到达到列表的倒数第二个元素。</li><li>一轮比较完成后，最大的元素已经位于列表的末尾，可以将其视为“已排序部分”。</li><li>重复步骤 2-5，但不包括已经排好序的末尾元素。每一轮比较都会将当前未排序部分的最大元素浮到末尾。</li><li>重复执行步骤 2-6，直到所有元素都被排好序。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 交换元素</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点"><a class="header-anchor" href="#特点"></a>特点</h3><p>每一轮比较都会将当前未排序部分的最大元素“冒泡”到末尾。它通过不断交换相邻元素来达到排序的目的。</p><h3 id="复杂度"><a class="header-anchor" href="#复杂度"></a>复杂度</h3><p>冒泡排序的时间复杂度为 O($n^2$)，在大部分情况下不如其他高效的排序算法。它通常适用于排序元素个数较少的情况，</p><h2 id="2-选择排序"><a class="header-anchor" href="#2-选择排序"></a>2. 选择排序</h2><p>选择排序每次从待排序的元素中选择最小（或最大）的元素，然后将其放到已排序部分的末尾。</p><h3 id="算法描述-v2"><a class="header-anchor" href="#算法描述-v2"></a>算法描述</h3><ol><li>初始状态：假设我们有一个未排序的数组或列表。</li><li>找到当前未排序部分中的最小（或最大）元素。</li><li>将找到的最小（或最大）元素与未排序部分的第一个元素交换位置。</li><li>此时，第一个元素是已排序部分的最后一个元素。</li><li>将已排序部分的长度加一，未排序部分的长度减一。</li><li>重复步骤 2-5，直到未排序部分为空，所有元素都被排好序</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minIndex <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点-v2"><a class="header-anchor" href="#特点-v2"></a>特点</h3><p>每次从未排序部分选择一个最小（或最大）的元素，放置在已排序部分的末尾。</p><h3 id="复杂度-v2"><a class="header-anchor" href="#复杂度-v2"></a>复杂度</h3><p>选择排序在时间复杂度上也是 O($n^2$)，但是由于其每一轮只需要一次交换操作，因此在某些情况下，它可能相对冒泡排序更快一些。不过，它依然不如快速排序、归并排序等更高效的排序算法。</p><h2 id="3-插入排序"><a class="header-anchor" href="#3-插入排序"></a>3. 插入排序</h2><h3 id="算法描述-v3"><a class="header-anchor" href="#算法描述-v3"></a>算法描述</h3><ol><li>初始状态：假设我们有一个未排序的数组或列表。</li><li>从第二个元素开始，将当前元素视为“待插入元素”。</li><li>将待插入元素与已排序的部分进行比较，找到其在已排序部分中的正确位置。</li><li>依次将已排序部分中比待插入元素大的元素往后移动一个位置，为待插入元素腾出位置。</li><li>将待插入元素放入正确的位置，使得已排序部分仍然保持有序。</li><li>重复步骤 2-5，直到所有元素都被插入到已排序部分。</li></ol><blockquote><p>类似于手动整理一副牌</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> key <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//暂存</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//逐步向后移</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点-v3"><a class="header-anchor" href="#特点-v3"></a>特点</h3><p>随着每个元素的插入，已排序部分会不断扩大，直到整个列表都排好序</p><h3 id="算法复杂度"><a class="header-anchor" href="#算法复杂度"></a>算法复杂度</h3><p>虽然插入排序的时间复杂度在最坏情况下为 O($n^2$)，但在部分有序的情况下，插入排序的性能会较好。它适用于数据量较小或已基本有序的情况。</p><h2 id="4-归并排序"><a class="header-anchor" href="#4-归并排序"></a>4. 归并排序</h2><h3 id="算法描述-v4"><a class="header-anchor" href="#算法描述-v4"></a>算法描述</h3><ol><li><strong>分治策略</strong>：归并排序采用分治策略，将一个大问题分成两个或更多的小问题，然后递归地解决这些小问题。在排序中，它将一个未排序的数组分成两个相等大小的子数组。</li><li><strong>递归排序</strong>：对每个子数组递归应用归并排序，直到子数组的长度为1，即已排序。</li><li><strong>合并</strong>：将已排序的子数组合并成一个大的有序数组。合并过程中，从两个子数组中选择较小的元素，依次放入结果数组，直到两个子数组都合并完毕。</li><li><strong>递归回溯</strong>：不断回溯到更高层次的递归调用，合并更大的子数组，直到整个数组都排序完毕。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 合并两个有序子数组</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n1 <span class="token operator">=</span> mid <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n2 <span class="token operator">=</span> right <span class="token operator">-</span> mid<span class="token punctuation">;</span>    <span class="token comment">// 创建临时数组来存放两个子数组</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">leftArr</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">rightArr</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将数据复制到临时数组 leftArr[] 和 rightArr[]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        leftArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>left <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        rightArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 归并两个子数组到原数组 arr[]</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n1 <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> rightArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> leftArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> rightArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 处理剩余的元素</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> leftArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> rightArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 归并排序函数</span><span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment">// 递归排序左半部分和右半部分</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 合并两个子数组</span>        <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点-v4"><a class="header-anchor" href="#特点-v4"></a>特点</h3><p>归并排序是一种稳定的排序算法，其时间复杂度稳定在O($n log_n$)，适用于各种不同大小的数据集。它的主要优点之一是能够处理大规模数据集，但缺点是需要额外的内存来存储临时数组。</p><p>（搜索深度是O(logn)，合并操作是O(n)）</p><h3 id="算法复杂度-v2"><a class="header-anchor" href="#算法复杂度-v2"></a>算法复杂度</h3><h2 id="5-快速排序-✨"><a class="header-anchor" href="#5-快速排序-✨"></a>5. 快速排序 ✨</h2><h3 id="算法描述-v5"><a class="header-anchor" href="#算法描述-v5"></a>算法描述</h3><ol><li><strong>选择基准元素</strong>：从待排序的元素中选择一个基准元素。通常选择第一个元素，但也可以选择任何其他元素。</li><li><strong>分区</strong>：将元素分成两个子序列，小于基准元素的子序列和大于基准元素的子序列。这个过程称为分区。</li><li><strong>递归排序</strong>：对小于基准元素和大于基准元素的两个子序列分别递归应用快速排序。</li><li><strong>合并</strong>：将排序好的子序列合并在一起，整个序列就变成了有序的。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 选择基准元素</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 从右向左找小于基准的元素</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">//跳出此循环，代表right找到了比temp小的数字，所以此时arr[left]=arr[right]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 从左向右找大于基准的元素</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span> <span class="token comment">// 将基准元素放入正确的位置</span>        <span class="token comment">// 递归排序基准左右两部分</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点-v5"><a class="header-anchor" href="#特点-v5"></a>特点</h3><ol><li><strong>分治策略</strong>：快速排序是一种分治策略，即把大的问题分成小的，然后递归地解决这些小问题。</li><li><strong>原地排序</strong>：快速排序是一种原地排序算法，对于<strong>大规模数据</strong>的性能通常很好，它不需要额外的空间来存储临时数据，因为它通过交换元素在原数组上进行排序。</li><li><strong>不稳定性</strong>：快速排序在分区过程中不保持相同元素的相对顺序，所以是不稳定的排序算法。这意味着如果原始数组中存在相同值的元素，它们在排序后可能会改变相对位置。</li></ol><h3 id="算法复杂度-v3"><a class="header-anchor" href="#算法复杂度-v3"></a>算法复杂度</h3><p>快速排序的平均时间复杂度为O($n log_n$)，其中n是待排序的元素个数。这使得它在大多数情况下比冒泡排序和插入排序更快。不过，最坏情况下的时间复杂度是O($n^2$)，但通过合理选择基准元素可以避免最坏情况的发生。</p><h2 id="6-堆排序"><a class="header-anchor" href="#6-堆排序"></a>6. 堆排序</h2><h3 id="算法描述-v6"><a class="header-anchor" href="#算法描述-v6"></a>算法描述</h3><ol><li><strong>建立堆</strong>：首先，将待排序的数组视为一个二叉堆。二叉堆通常采用数组来表示，其中父节点的值总是不小于（或不大于，具体取决于是最大堆还是最小堆）其子节点的值。</li><li><strong>建堆</strong>：通过对数组进行一次“堆化”操作，将数组构建为一个合法的堆结构。堆化操作会从最后一个非叶子节点开始，逐个将子树调整为符合堆性质的状态。</li><li><strong>排序</strong>：一旦堆构建完毕，堆的根节点就是最大（或最小）值。将根节点与最后一个叶子节点交换，然后将剩余部分重新堆化。这会将最大（或最小）的元素移动到正确的位置。重复这个过程，每次将最大（或最小）的元素放置到已排序部分的末尾。</li><li><strong>重复排序</strong>：重复步骤3，逐渐缩小堆的规模，直到整个数组都排序完成。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token comment">// 调整堆，确保以i为根节点的子树满足堆的性质</span><span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> largest <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token comment">// 初始化根节点</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 左子节点</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 右子节点</span>    <span class="token comment">// 如果左子节点大于根节点，标记左子节点为最大</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        largest <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果右子节点大于根节点，标记右子节点为最大</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        largest <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果最大值不是根节点，交换根节点和最大值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>largest <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 递归调整子树</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> largest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 堆排序函数</span><span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 建立最大堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 一个接一个地提取最大值并缩小堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将最大元素移到最后</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对剩下的部分重新堆化</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点-v6"><a class="header-anchor" href="#特点-v6"></a>特点</h3><p>堆排序是一种原地排序算法，它具有稳定的O($nlog_n$)时间复杂度，适用于大规模数据集。但需要注意，堆排序对于小规模数据集来说，相对于其他排序算法，性能可能不如其他简单的算法。</p><h2 id="7-希尔排序"><a class="header-anchor" href="#7-希尔排序"></a>7. 希尔排序</h2><h3 id="算法描述-v7"><a class="header-anchor" href="#算法描述-v7"></a>算法描述</h3><ol><li><strong>选择间隔序列</strong>：希尔排序的核心是选择一个或多个间隔（增量）序列。这些增量是一系列递减的整数，用于控制排序过程的分组。不同的增量序列可以影响排序的性能。</li><li><strong>分组排序</strong>：根据所选增量序列，将数组分成多个子数组，每个子数组包含间隔为增量的元素。然后对每个子数组应用插入排序或其他排序算法。</li><li><strong>逐渐缩小增量</strong>：重复步骤2，逐渐减小增量，最终减小到1。</li><li><strong>最终排序</strong>：当增量减小到1时，整个数组被分成一个大组，进行最终的排序。通常，此时的数组已经在前几轮排序中变得部分有序，因此最终排序的工作量相对较小。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token comment">// 希尔排序函数</span><span class="token keyword">void</span> <span class="token function">shellSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 选择增量序列，这里使用经典的希尔增量序列</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 对每个子数组应用插入排序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">>=</span> gap <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点-v7"><a class="header-anchor" href="#特点-v7"></a>特点</h3><p>希尔排序是一种改进的插入排序算法，通过选择不同的增量序列可以在性能和排序效率之间取得平衡。希尔排序的平均时间复杂度通常介于O($nlog_n$)和O($n^2$)之间，取决于增量序列的选择。希尔排序在某些情况下，特别是对于中等大小的数据集，性能优于常规的插入排序。希尔排序的优势在于其原地排序性质。</p><h3 id="算法复杂度-v4"><a class="header-anchor" href="#算法复杂度-v4"></a>算法复杂度</h3><h2 id="8-基数排序"><a class="header-anchor" href="#8-基数排序"></a>8.  基数排序</h2><h3 id="算法描述-特点-算法复杂度"><a class="header-anchor" href="#算法描述-特点-算法复杂度"></a>算法描述 特点 算法复杂度</h3><h2 id="9-桶排序"><a class="header-anchor" href="#9-桶排序"></a>9. 桶排序</h2><h3 id="算法描述-特点-算法复杂度-v2"><a class="header-anchor" href="#算法描述-特点-算法复杂度-v2"></a>算法描述 特点 算法复杂度</h3><h2 id="10-计数排序"><a class="header-anchor" href="#10-计数排序"></a>10. 计数排序</h2><h3 id="算法描述-特点-算法复杂度-v3"><a class="header-anchor" href="#算法描述-特点-算法复杂度-v3"></a>算法描述 特点 算法复杂度</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;C++ 十种排序算法&lt;/h1&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
&lt;p&gt;先写一个输入输出的模版，中间调用对应的函数进行排序&lt;/p&gt;
&lt;pre class=&quot;line-numbers la</summary>
      
    
    
    
    <category term="算法" scheme="http://www.miasol.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Data Structure" scheme="http://www.miasol.top/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Git学习步骤</title>
    <link href="http://www.miasol.top/2023/09/20/Git%E5%AD%A6%E4%B9%A0%E6%AD%A5%E9%AA%A4/"/>
    <id>http://www.miasol.top/2023/09/20/Git%E5%AD%A6%E4%B9%A0%E6%AD%A5%E9%AA%A4/</id>
    <published>2023-09-20T14:20:50.000Z</published>
    <updated>2023-09-20T14:27:54.534Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git版本管理学习"><a class="header-anchor" href="#Git版本管理学习"></a>Git版本管理学习</h2><p><strong>1. 安装Git：</strong></p><p>首先，你需要在计算机上安装Git。你可以从<a href="https://git-scm.com/">Git官方网站</a>下载适用于你的操作系统的Git安装程序，并按照安装指南进行安装。</p><p><strong>2. Git基础概念：</strong></p><p>在开始使用Git之前，了解一些基本概念非常重要。以下是一些重要的概念：</p><pre><code>a. 版本控制：理解版本控制的概念，包括分布式版本控制系统和中央化版本控制系统的区别。b. 仓库（Repository）：Git存储项目的仓库，学习如何创建和管理仓库。c. 提交（Commit）：提交是对代码库的更改的快照，了解如何创建、查看和回滚提交。d. 分支（Branch）：学习如何创建和管理分支，以支持并行开发和特性分支。e. 合并（Merge）：了解如何将一个分支的更改合并到另一个分支中。f. 冲突（Conflict）：学习如何解决合并冲突，这是当两个分支具有冲突更改时发生的情况。</code></pre><p><strong>3. Git基本命令：</strong></p><pre><code>a. `git init`：初始化一个新的Git仓库。b. `git clone`：从远程仓库克隆一个本地副本。c. `git add`：将更改添加到暂存区。d. `git commit`：提交更改并创建一个新的快照。e. `git status`：检查工作目录的状态，查看已更改的文件。f. `git log`：查看提交历史记录。g. `git branch`：列出所有分支。h. `git checkout`：切换分支或恢复文件。i. `git merge`：合并分支。j. `git pull`：从远程仓库拉取更改。k. `git push`：将本地更改推送到远程仓库。</code></pre><p><strong>4. 学习资源：</strong></p><p>以下是一些学习Git的资源：</p><ul><li>官方Git文档：Git官方网站上有详细的文档和教程 <a href="https://git-scm.com/doc">https://git-scm.com/doc</a></li><li>GitHub Skill：GitHub提供了一个在线学习平台Skill，专门用于学习Git和GitHub <a href="https://skills.github.com/">https://skills.github.com/</a></li><li>书籍：《Pro Git》是一本免费的Git教程书籍，可以在线阅读 <a href="https://git-scm.com/book/en/v2">https://git-scm.com/book/en/v2</a></li><li>练习网站：一些网站提供了练习Git命令的机会，如Git Exercises <a href="https://gitexercises.fracz.com">https://gitexercises.fracz.com</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Git版本管理学习&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Git版本管理学习&quot;&gt;&lt;/a&gt;Git版本管理学习&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 安装Git：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，你需要在计算机上安装Git。你可以从&lt;</summary>
      
    
    
    
    <category term="实用工具" scheme="http://www.miasol.top/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Tools" scheme="http://www.miasol.top/tags/Tools/"/>
    
    <category term="Git" scheme="http://www.miasol.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Wwise 插件开发步骤</title>
    <link href="http://www.miasol.top/2023/08/09/Wwise-%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4/"/>
    <id>http://www.miasol.top/2023/08/09/Wwise-%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4/</id>
    <published>2023-08-09T09:33:45.000Z</published>
    <updated>2023-08-23T00:35:10.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>在开始建立Wwise插件之前可以通过下面两个视频对插件开发有个认识：</p><ol><li>Distortion失真效果器开发: <a href="https://www.youtube.com/watch?v=abMtq9nGj8Y">Wwise Up On Air - Hands On | Creating a Plug-In for Wwise Part 1: Environment Setup &amp; First Plug-In - YouTube</a>)</li><li>Metering创建和GUI设计: <a href="https://www.youtube.com/watch?v=dYy7r8vljz0">Wwise Up On Air Hands On | Creating a Plug-In for Wwise Part 2: UI and Monitoring Data - YouTube</a>)</li></ol><p>于此同时，需要预先知道一些相关关键词：</p><ul><li>Wwise Authoring Tool：是指声音设计师和配乐师使用的实际应用程序</li><li>WAAPI：音频程序员使用的Wwise开发API</li></ul><p>另外，还有一些其他有用的资源链接：</p><ul><li><a href="https://www.audiokinetic.com/zh/library/edge/?source=SDK&amp;id=effectplugin_tools_packaging.html">将插件打包以便用在 Audiokinetic Launcher 中</a></li><li><a href="https://blog.audiokinetic.com/fr/a-simplified-pipeline-for-creating-wwise-audio-plug-ins/">用于创建 Wwise 音频插件的简化管线</a></li></ul><h2 id="前置安装"><a class="header-anchor" href="#前置安装"></a>前置安装</h2><ol><li>Python 3</li><li>Wwise SDK</li></ol><p>全文以Visual Studio 2019为例，安装时选择SDK</p><p><img src="image-20230820132358624.png" alt="image-20230820132358624.png"></p><h2 id="创建工程"><a class="header-anchor" href="#创建工程"></a>创建工程</h2><p>该步骤也可以看Wwise官方-&gt; <a href="https://www.audiokinetic.com/zh/library/edge/?source=SDK&amp;id=effectplugin_tools_newplugin.html">创建音频插件 </a></p><ol><li><p>首先通过python命令运行创建工程的命令。默认安装目录为“C:\Program Files (x86)\Audiokinetic\Wwise 2021.1.9.7847”</p><blockquote><p>这里通常建议将SDK放在C盘，因为文件需要与Visual Studio相关的部件进行匹配</p></blockquote><pre class="line-numbers language-none"><code class="language-none">py &quot;C:\Program Files (x86)\Audiokinetic\Wwise 2021.1.9.7847\Scripts\Build\Plugins\wp.py&quot; new<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>输入需要创建的插件类型：</p><p>可选类型：source, sink, object_processor, mixer, effect</p><p>我们以创建一个源插件为例子。</p><pre class="line-numbers language-none"><code class="language-none">source<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>为插件名并进入文件。</p><p>此时命令行会让你依次输入如下信息</p><pre class="line-numbers language-none"><code class="language-none">project name: MyNewSourcedisplay name: newauthor: miasoldescription: A new source plug-in<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建完毕，为们使用cd命令，进入文件夹</p><pre class="line-numbers language-none"><code class="language-none">cd MyNewSource<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>对插件进行Premake。我们使用的是Visual Studio 2019，所以对应的是VC160</p><pre class="line-numbers language-none"><code class="language-none">python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; premake Windows_vc160python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; premake Authoring<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在文件管理器打开刚刚创建的文件夹。打开红框工程就能进行插件编写了。</p><img src="image-20230820134911895.png" alt="image-20230820134911895" style="zoom:50%;" /></li><li><p>Build工程</p><p>我们现在先build一下工程在Wwise中进行测试。</p><pre class="line-numbers language-none"><code class="language-none">python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; build -c Release -x x64 -t vc160 Authoring<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>有几点需要注意：</p><ol><li>插件一定要在Windows系统上进行Build</li><li>编写插件的时候，可能需要在Wwise中运行时进行Debug，此时需要Visual Studio中的“附加到运行程序”功能，详细步骤可以参考：<a href="https://www.audiokinetic.com/qa/7840/wwise-sdk-how-step-through-code-using-visual-studio-debugger">Wwise SDK, How to step through code using Visual Studio Debugger?</a></li></ol></blockquote></li><li><p>在Wwise中加载</p><p>Default Work Unit -&gt; Actor-Mixer Hierarchy -&gt; New Child -&gt; MyNewSource</p></li></ol><h2 id="插件打包"><a class="header-anchor" href="#插件打包"></a>插件打包</h2><p>打包插件的作用是可以将插件进行分享和发布，并能在Wwise中通过install按钮对其进行安装。</p><h4 id="Windows"><a class="header-anchor" href="#Windows"></a>Windows</h4><ol><li><p>依次执行以下命令，为Authoring Tool和Sound Engine进行打包</p><blockquote><p>注意version后面的版本号需要与你本地安装的Wwise版本一致，比如我安装的是2021.1.13</p></blockquote><pre class="line-numbers language-none"><code class="language-none">python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; package Authoring --version 2021.1.1.1python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; package Windows_vc160 --version 2021.1.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时我们可以在项目工程中看到两个tax文件（截图截的Mac但是打包操作是在Windows进行的）</p><p><img src="image-20230822184832254-2726516.png" alt="image-20230822184832254"></p><p>同时注意到文件夹里面有一个叫<code> bundle_template.json</code>的文件，打开可以看到一些插件信息。</p><img src="image-20230822185106950.png" alt="image-20230822185106950" style="zoom:50%;" /><ol start="2"><li><p>生成bundle</p><pre class="line-numbers language-none"><code class="language-none">python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; generate-bundle --version 2021.1.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在文件夹中出现了<code> bundle.json</code> 文件</p></li><li><p>最终打包</p><ul><li>此时新建一个文件夹，例如我的新建文件夹叫“FootstepsSynth_v2021.1.1”，可以按照“ProjectName_vxxxx.x.x”的格式命名。</li><li>把1.中的三个tax和<code> bundle.json</code> 移动到“ProjectName_vxxxx.x.x”</li></ul></li><li><p>在Wwise中测试是否能加载</p><p>打开Wwis，选择plug-in -&gt; Add from directory，然后定位到“ProjectName_vxxxx.x.x”</p><img src="image-20230822185813899-2727098.png" alt="image-20230822185813899" style="zoom: 33%;" /></li><li><p>加载完成后可以得到如下界面，然后正常安装Wwise插件即可</p><img src="image-20230822190032766.png" alt="image-20230822190032766" style="zoom: 33%;" /></li><li><p>如果要进行分享，可以将“ProjectName_vxxxx.x.x”文件夹进行压缩。拿到压缩包以后，在步骤4中的pu lg-in处需要选择Add from archive</p><img src="image-20230822190309883.png" alt="image-20230822190309883" style="zoom:50%;" /></li></ol></li></ol><h4 id="Mac"><a class="header-anchor" href="#Mac"></a>Mac</h4><p>Mac的步骤要复杂一些，首先我们需要在Windows系统上完成new、premake、build，然后将文件复制到Mac系统。然后按照下面的步骤进行操作。</p><ol><li><p>cd命令进入文件夹，输入如下命令</p><blockquote><p>注意！中间的目录是你自己的Wwise SDK安装目录，建议在文件夹里找到“<a href="http://wp.py">wp.py</a>”文件，然后在命令行输入python再将文件拖拽入命令行后输入premake Mac</p></blockquote><pre class="line-numbers language-none"><code class="language-none">python &#x2F;Applications&#x2F;Audiokinetic&#x2F;Wwise\ 2021.1.10.7883&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py premake Mac<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>用Xcode打开，文件下面的“.xcworkspace”工程，然后在下图找到“development team”，点击选择“other”再删除，让其变成空的</p><p><img src="image-20230822192321611.png" alt="image-20230822192321611"></p></li><li><p>在xcode里面直接进行build 使用命令行</p><pre class="line-numbers language-none"><code class="language-none">python &#x2F;Applications&#x2F;Audiokinetic&#x2F;Wwise\ 2021.1.10.7883&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py build Mac -c Release -x arm64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这里我还是比较推荐直接在xcode build，因为能更直观看到报错的原因。比如我build的时候，发现使用了windows相关的包导致build失败。</p></blockquote></li><li><p>将文件转移回到Windws系统，依次输入</p><pre class="line-numbers language-none"><code class="language-none">python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; package Authoring --version 2021.1.1.1python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; package Windows_vc160 --version 2021.1.1.1python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; package Common -v2021.1.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>回到Mac系统进行打包，文件位置注意事项跟步骤1一样</p><pre class="line-numbers language-none"><code class="language-none">python &#x2F;Applications&#x2F;Audiokinetic&#x2F;Wwise\ 2021.1.10.7883&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py package Mac -v2021.1.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>最后回到Windows进行bundle</p><blockquote><p>注意windows上的Wwise一定要安装Apple开发的SDK否则这里会打包失败</p></blockquote><pre class="line-numbers language-none"><code class="language-none">python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; generate-bundle --version 2021.1.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>之后的其他安装步骤就跟windows一样了</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
&lt;p&gt;在开始建立Wwise插件之前可以通过下面两个视频对插件开发有个认识：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Distortion失真效果器开发: &lt;a href=&quot;h</summary>
      
    
    
    
    <category term="游戏音频" scheme="http://www.miasol.top/categories/%E6%B8%B8%E6%88%8F%E9%9F%B3%E9%A2%91/"/>
    
    
    <category term="Wwise" scheme="http://www.miasol.top/tags/Wwise/"/>
    
  </entry>
  
  <entry>
    <title>map和unordered_map区别</title>
    <link href="http://www.miasol.top/2023/07/15/map%E5%92%8Cunordered-map%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.miasol.top/2023/07/15/map%E5%92%8Cunordered-map%E5%8C%BA%E5%88%AB/</id>
    <published>2023-07-15T04:08:43.000Z</published>
    <updated>2023-07-18T03:11:40.416Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th></th><th>Map</th><th>unordered_map</th></tr></thead><tbody><tr><td>有序</td><td>根据key升序排列</td><td>无序</td></tr><tr><td>实现接口</td><td>内部实现机制是红黑树，所以查找、添加、删除的效率由红黑树决定</td><td>hash_table</td></tr><tr><td>查找时间</td><td>log(n)</td><td>最好O(1) 最差O(n)</td></tr><tr><td>插入时间</td><td></td><td>与查找相同</td></tr><tr><td>删除时间</td><td></td><td>与查找相同</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Map&lt;/th&gt;
&lt;th&gt;unordered_map&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;有序&lt;/td&gt;
&lt;td&gt;根据key升序排列&lt;/td&gt;
&lt;td&gt;无序&lt;/td&gt;
&lt;/</summary>
      
    
    
    
    <category term="C++" scheme="http://www.miasol.top/categories/C/"/>
    
    
    <category term="C++" scheme="http://www.miasol.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>《程序员面试金典》记录</title>
    <link href="http://www.miasol.top/2023/06/27/%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B8%E3%80%8B%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.miasol.top/2023/06/27/%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B8%E3%80%8B%E8%AE%B0%E5%BD%95/</id>
    <published>2023-06-26T18:27:19.000Z</published>
    <updated>2023-06-27T01:55:39.284Z</updated>
    
    <content type="html"><![CDATA[<h4 id="面试题-01-01-判定字符是否唯一"><a class="header-anchor" href="#面试题-01-01-判定字符是否唯一"></a><a href="https://leetcode.cn/problems/is-unique-lcci/">面试题 01.01. 判定字符是否唯一</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isUnique</span><span class="token punctuation">(</span>string astr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> astr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>astr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>astr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题非常简单，但是并没有一次通过。主要错误点在于，没有注意到第二次循环需要从i+1开始，错误的写成了i</p><h4 id="面试题-01-02-判定是否互为字符重排"><a class="header-anchor" href="#面试题-01-02-判定是否互为字符重排"></a><a href="https://leetcode.cn/problems/check-permutation-lcci/">面试题 01.02. 判定是否互为字符重排</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">CheckPermutation</span><span class="token punctuation">(</span>string s1<span class="token punctuation">,</span> string s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>s2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> map<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>s1<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            map<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>s2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            map<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span> map<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>second<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题思路在与使用map先记录s1后通过计数匹配s2。unordered_map速度比map快。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;面试题-01-01-判定字符是否唯一&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#面试题-01-01-判定字符是否唯一&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/is-unique-lcci/&quot;&gt;面</summary>
      
    
    
    
    <category term="算法" scheme="http://www.miasol.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Data Structure" scheme="http://www.miasol.top/tags/Data-Structure/"/>
    
    <category term="Leetcode" scheme="http://www.miasol.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer记录</title>
    <link href="http://www.miasol.top/2023/06/04/%E5%89%91%E6%8C%87offer%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.miasol.top/2023/06/04/%E5%89%91%E6%8C%87offer%E8%AE%B0%E5%BD%95/</id>
    <published>2023-06-04T09:40:35.000Z</published>
    <updated>2023-08-03T18:22:53.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="刷题思路"><a class="header-anchor" href="#刷题思路"></a>刷题思路</h2><p>第一遍:</p><ol><li>使用c++独立解。<ul><li>20分钟以上无思路再看他人题解，且标记。</li></ul></li><li>解题完毕，记录自己的题解。</li><li>看他人题解的其他办法</li></ol><h2 id="字符串"><a class="header-anchor" href="#字符串"></a>字符串</h2><h3 id="剑指-Offer-05-替换空格-简单"><a class="header-anchor" href="#剑指-Offer-05-替换空格-简单"></a><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a> 简单</h3><p>我的题解</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">replaceSpace</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string r<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token char">' '</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                r<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token char">'%'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                r<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token char">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                r<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                r<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-Offer-58-II-左旋转字符串-简单"><a class="header-anchor" href="#剑指-Offer-58-II-左旋转字符串-简单"></a><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">剑指 Offer 58 - II. 左旋转字符串</a> 简单</h3><p>我的题解</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//切片法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//切片法过于暴力</span><span class="token comment">//遍历法取余</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string r <span class="token operator">=</span> s<span class="token punctuation">;</span>         <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            r<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span>len<span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token operator">%</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-Offer-67-把字符串转换成整数-中等"><a class="header-anchor" href="#剑指-Offer-67-把字符串转换成整数-中等"></a><a href="https://leetcode.cn/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/">剑指 Offer 67. 把字符串转换成整数</a> 中等</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">strToInt</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//字符串长度为o</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果</span>        <span class="token keyword">int</span> sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//符号，默认为无符号正数</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//序号</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">' '</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//索引到第一个无空格的字符</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'-'</span><span class="token punctuation">)</span> sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//负号</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'-'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'+'</span><span class="token punctuation">)</span> <span class="token operator">++</span>i<span class="token punctuation">;</span> <span class="token comment">// 有符号则向后移一位</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token char">'0'</span><span class="token operator">||</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token char">'9'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">></span> INT_MAX <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">||</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> INT_MAX <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span> <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//溢出判定</span>                <span class="token keyword">return</span> sign <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> INT_MAX <span class="token operator">:</span> INT_MIN<span class="token punctuation">;</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sign <span class="token operator">*</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链表"><a class="header-anchor" href="#链表"></a>链表</h2><h3 id="剑指-Offer-06-从尾到头打印链表-简单"><a class="header-anchor" href="#剑指-Offer-06-从尾到头打印链表-简单"></a><a href="https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">剑指 Offer 06. 从尾到头打印链表</a> 简单</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//回溯</span><span class="token comment">//依次存入temp，再反向存入输出数组</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> temp<span class="token punctuation">,</span> res<span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>顺便复习STL中的<a href="https://miasol.top/2023/03/18/C-STL%E8%AE%B0%E5%BD%95/">vector</a></p><h3 id="剑指-Offer-24-反转链表"><a class="header-anchor" href="#剑指-Offer-24-反转链表"></a><a href="https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/">剑指 Offer 24. 反转链表</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//头插法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode<span class="token operator">*</span> res<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>cur<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            ListNode<span class="token operator">*</span> temp <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> res<span class="token punctuation">;</span>            res <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双指针"><a class="header-anchor" href="#双指针"></a>双指针</h2><h3 id="剑指-Offer-18-删除链表的节点"><a class="header-anchor" href="#剑指-Offer-18-删除链表的节点"></a><a href="https://leetcode.cn/problems/shan-chu-lian-biao-de-jie-dian-lcof/">剑指 Offer 18. 删除链表的节点</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token comment">//判断空</span>        ListNode <span class="token operator">*</span>pre<span class="token operator">=</span>head<span class="token punctuation">,</span><span class="token operator">*</span>cur<span class="token operator">=</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">-></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token keyword">return</span> cur<span class="token punctuation">;</span> <span class="token comment">// 判断第一个节点</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">//判断后面的阶段</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                pre<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            pre <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-Offer-22-链表中倒数第k个节点"><a class="header-anchor" href="#剑指-Offer-22-链表中倒数第k个节点"></a><a href="https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">剑指 Offer 22. 链表中倒数第k个节点</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//统计法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">getKthFromEnd</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token operator">=</span>head<span class="token punctuation">;</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token operator">=</span>head<span class="token punctuation">;</span>cnt<span class="token operator">></span>k<span class="token punctuation">;</span><span class="token operator">--</span>cnt<span class="token punctuation">)</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//双指针</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">getKthFromEnd</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode<span class="token operator">*</span> p<span class="token operator">=</span>head<span class="token punctuation">,</span> <span class="token operator">*</span>q <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> n<span class="token operator">&lt;</span>k<span class="token punctuation">;</span> <span class="token operator">++</span>n<span class="token punctuation">)</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> q<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-Offer-25-合并两个排序的链表"><a class="header-anchor" href="#剑指-Offer-25-合并两个排序的链表"></a><a href="https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/">剑指 Offer 25. 合并两个排序的链表</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//迭代</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode<span class="token operator">*</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> res <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">&amp;&amp;</span> l2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">-></span>val <span class="token operator">&lt;</span> l2<span class="token operator">-></span>val<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                res<span class="token operator">-></span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>                l1 <span class="token operator">=</span> l1<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                res<span class="token operator">-></span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>                l2 <span class="token operator">=</span> l2<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            res <span class="token operator">=</span> res<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>            res<span class="token operator">-></span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span>             res<span class="token operator">-></span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//递归</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l1<span class="token punctuation">)</span> <span class="token keyword">return</span> l2<span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l2<span class="token punctuation">)</span> <span class="token keyword">return</span> l1<span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">-></span>val <span class="token operator">&lt;</span> l2<span class="token operator">-></span>val<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           l1<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token operator">-></span>next<span class="token punctuation">,</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> l1<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">else</span>       <span class="token punctuation">&#123;</span>            l2<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-Offer-52-两个链表的第一个公共节点"><a class="header-anchor" href="#剑指-Offer-52-两个链表的第一个公共节点"></a><a href="https://leetcode.cn/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/">剑指 Offer 52. 两个链表的第一个公共节点</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//双指针遍历相遇</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>headA<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>a <span class="token operator">=</span> headA<span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>b <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            a <span class="token operator">=</span> a <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">?</span> a<span class="token operator">-></span>next <span class="token operator">:</span> headB<span class="token punctuation">;</span>            b <span class="token operator">=</span> b <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">?</span> b<span class="token operator">-></span>next <span class="token operator">:</span> headA<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-Offer-21-调整数组顺序使奇数位于偶数前面"><a class="header-anchor" href="#剑指-Offer-21-调整数组顺序使奇数位于偶数前面"></a><a href="https://leetcode.cn/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/">剑指 Offer 21. 调整数组顺序使奇数位于偶数前面</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">exchange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//偶数</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//从后往前直到找到第一个奇数</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> right<span class="token operator">&lt;=</span>left<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//right不能在left左边且不能小于0</span>                    right<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                 <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他思路，可以使用双向队列deque进行实现，但是要求结果是vector，实现deque之后需要再依次赋值给新的vector，效率很低，所以在题目要求的情况下，不建议使用deque</p><h3 id="剑指-Offer-57-和为s的两个数字"><a class="header-anchor" href="#剑指-Offer-57-和为s的两个数字"></a><a href="https://leetcode.cn/problems/he-wei-sde-liang-ge-shu-zi-lcof/">剑指 Offer 57. 和为s的两个数字</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> res<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-Offer-58-I-翻转单词顺序"><a class="header-anchor" href="#剑指-Offer-58-I-翻转单词顺序"></a><a href="https://leetcode.cn/problems/fan-zhuan-dan-ci-shun-xu-lcof/">剑指 Offer 58 - I. 翻转单词顺序</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reverseWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//首尾空格</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>                left<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//正常</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">' '</span><span class="token operator">||</span>left <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> right<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">' '</span><span class="token punctuation">)</span> right <span class="token operator">=</span> left<span class="token punctuation">;</span><span class="token comment">//第0个字符问题</span>                <span class="token keyword">else</span> right <span class="token operator">=</span> left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">&lt;=</span>temp<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    res <span class="token operator">+=</span>s<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                res <span class="token operator">+=</span> <span class="token char">' '</span><span class="token punctuation">;</span>                right <span class="token operator">=</span> left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            left<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        res<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="栈和队列"><a class="header-anchor" href="#栈和队列"></a>栈和队列</h2><h3 id="剑指-Offer-09-用两个栈实现队列"><a class="header-anchor" href="#剑指-Offer-09-用两个栈实现队列"></a><a href="https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">剑指 Offer 09. 用两个栈实现队列</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CQueue</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s1<span class="token punctuation">,</span>s2<span class="token punctuation">;</span>    <span class="token function">CQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">appendTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> len <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            s2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除栈顶</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            s1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-Offer-30-包含min函数的栈"><a class="header-anchor" href="#剑指-Offer-30-包含min函数的栈"></a><a href="https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/">剑指 Offer 30. 包含min函数的栈</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">/** initialize your data structure here. */</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">,</span>s_min<span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m <span class="token operator">=</span> x<span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            s_min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span>m<span class="token punctuation">)</span>                m<span class="token operator">=</span>x<span class="token punctuation">;</span>            s_min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s_min<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//剔除已经删除的元素，这里是易错易忽略点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s_min<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> m <span class="token operator">=</span> s_min<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> s_min<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-Offer-59-II-队列的最大值"><a class="header-anchor" href="#剑指-Offer-59-II-队列的最大值"></a><a href="https://leetcode.cn/problems/dui-lie-de-zui-da-zhi-lcof/">剑指 Offer 59 - II. 队列的最大值</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MaxQueue</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dq<span class="token punctuation">;</span>    <span class="token keyword">int</span> max<span class="token punctuation">;</span>    <span class="token function">MaxQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">max_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> dq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> dq<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>dq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>dq<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>value<span class="token punctuation">)</span>            dq<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dq<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">==</span> dq<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            dq<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用一个双端队列保存最大数的序列，尾部放入数之前，先推出所有比该数小的数，然后放入该数。</p><h2 id="模拟"><a class="header-anchor" href="#模拟"></a>模拟</h2><h4 id="剑指-Offer-29-顺时针打印矩阵"><a class="header-anchor" href="#剑指-Offer-29-顺时针打印矩阵"></a><a href="https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/">剑指 Offer 29. 顺时针打印矩阵</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//空的情况</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bottom <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//从左到右</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>top <span class="token operator">></span> bottom<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 每次从左到右，都要下移一行</span>            <span class="token comment">//从上到下</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>top<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>bottom<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>right <span class="token operator">&lt;</span> left<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 每次从上到下都要，左移一列</span>            <span class="token comment">//从右到左</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>right<span class="token punctuation">;</span> i<span class="token operator">>=</span>left<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>bottom <span class="token operator">&lt;</span> top<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">// 每次从右到左，都要上移一行</span>            <span class="token comment">//从下到上</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>bottom<span class="token punctuation">;</span> i<span class="token operator">>=</span>top<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span> left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//每次从下到上，都要右移一列</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="剑指-Offer-31-栈的压入、弹出序列-✨中等"><a class="header-anchor" href="#剑指-Offer-31-栈的压入、弹出序列-✨中等"></a><a href="https://leetcode.cn/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/">剑指 Offer 31. 栈的压入、弹出序列</a> ✨中等</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">validateStackSequences</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> pushed<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> popped<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stack<span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> pushed<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>cnt<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pushed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>popped<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找算法"><a class="header-anchor" href="#查找算法"></a>查找算法</h3><h4 id="剑指-Offer-03-数组中重复的数字"><a class="header-anchor" href="#剑指-Offer-03-数组中重复的数字"></a><a href="https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 03. 数组中重复的数字</a></h4><p>使用hash set的唯一性进行遍历，一旦遇到存在的hash set则返回该数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span> map<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> num<span class="token punctuation">;</span>            map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="剑指-Offer-53-I-在排序数组中查找数字-I"><a class="header-anchor" href="#剑指-Offer-53-I-在排序数组中查找数字-I"></a><a href="https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/">剑指 Offer 53 - I. 在排序数组中查找数字 I</a></h4><p>使用哈希查找，遍历数组，key为数字，value为出现次数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> map<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> map<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> map<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="剑指-Offer-53-II-0～n-1中缺失的数字"><a class="header-anchor" href="#剑指-Offer-53-II-0～n-1中缺失的数字"></a><a href="https://leetcode.cn/problems/que-shi-de-shu-zi-lcof/">剑指 Offer 53 - II. 0～n-1中缺失的数字</a></h4><p>常规使用顺序遍历，这里使用二分法。当nums[mid] = mid时，说明前一半数字（左边）并没有缺少，所以继续查找右边即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>mid<span class="token punctuation">)</span> left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="剑指-Offer-04-二维数组中的查找✨中等"><a class="header-anchor" href="#剑指-Offer-04-二维数组中的查找✨中等"></a><a href="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">剑指 Offer 04. 二维数组中的查找</a>✨中等</h4><p>把二维举行想象成菱形(树的思想演变) <a href="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/solutions/95306/mian-shi-ti-04-er-wei-shu-zu-zhong-de-cha-zhao-zuo/?envType=study-plan-v2&amp;envId=coding-interviews">https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/solutions/95306/mian-shi-ti-04-er-wei-shu-zu-zhong-de-cha-zhao-zuo/?envType=study-plan-v2&amp;envId=coding-interviews</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max_col <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span> max_col<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">&lt;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> i<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">></span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;刷题思路&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#刷题思路&quot;&gt;&lt;/a&gt;刷题思路&lt;/h2&gt;
&lt;p&gt;第一遍:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用c++独立解。
&lt;ul&gt;
&lt;li&gt;20分钟以上无思路再看他人题解，且标记。&lt;/li&gt;
&lt;/ul&gt;
&lt;/</summary>
      
    
    
    
    <category term="算法" scheme="http://www.miasol.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Data Structure" scheme="http://www.miasol.top/tags/Data-Structure/"/>
    
    <category term="Leetcode" scheme="http://www.miasol.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>免费的宝藏音频音乐工具</title>
    <link href="http://www.miasol.top/2023/04/28/%E2%80%9C%E5%85%8D%E8%B4%B9%E7%9A%84%E5%AE%9D%E8%97%8F%E9%9F%B3%E9%A2%91%E9%9F%B3%E4%B9%90%E5%B7%A5%E5%85%B7%E2%80%9D/"/>
    <id>http://www.miasol.top/2023/04/28/%E2%80%9C%E5%85%8D%E8%B4%B9%E7%9A%84%E5%AE%9D%E8%97%8F%E9%9F%B3%E9%A2%91%E9%9F%B3%E4%B9%90%E5%B7%A5%E5%85%B7%E2%80%9D/</id>
    <published>2023-04-28T02:32:47.000Z</published>
    <updated>2023-05-22T17:40:25.321Z</updated>
    
    <content type="html"><![CDATA[<p>放几个私藏的免费宝藏音频工具网站/APP，希望对大家有帮助</p><h3 id="伴奏-音频源分离（别再花钱去提取伴奏了）："><a class="header-anchor" href="#伴奏-音频源分离（别再花钱去提取伴奏了）："></a>伴奏/音频源分离（别再花钱去提取伴奏了）：</h3><p>Vocal Remover: 我最常用的网站之一，不仅可以分离人声和伴奏，还能分离贝斯、鼓、吉他。另外还有音高和BPM检测等功能，强推 <a href="https://vocalremover.org/">https://vocalremover.org/</a></p><p>Ultimate Vocal Remover: 桌面应用，集成了许多分离算法，可以自行下载尝试。（支持windows和macOS）<a href="https://github.com/Anjok07/ultimatevocalremovergui">https://github.com/Anjok07/ultimatevocalremovergui</a></p><p>BandLab: 类似库乐队一样的音乐制作软件，但里面集成了音频分离算法，且与上面两款不同，它是可以在手机使用的，所以给大家推荐。<br>ios: <a href="https://apps.apple.com/us/app/bandlab-music-making-studio/id968585775">https://apps.apple.com/us/app/bandlab-music-making-studio/id968585775</a><br>安卓(谷歌商店)：<a href="https://play.google.com/store/apps/details?id=com.bandlab.bandlab&amp;hl=en&amp;gl=US">https://play.google.com/store/apps/details?id=com.bandlab.bandlab&amp;hl=en&amp;gl=US</a><br>桌面版(支持windows和macOS): <a href="https://www.bandlab.com/products/desktop/assistant">https://www.bandlab.com/products/desktop/assistant</a></p><h3 id="转录"><a class="header-anchor" href="#转录"></a>转录</h3><p>（这里涉及到什么是MIDI音符，详细见下图）</p><p>Basic Pitch: 音频转MIDI，简单讲就是把你唱出来的旋律转成MIDI文件。例如，在库乐队里加载一个钢琴轨道，把这个MIDI文件拽进去，你就可以听到钢琴演奏对应的音高。非常适合哼唱作曲但没专业音乐训练的小伙伴 <a href="https://basicpitch.spotify.com/">https://basicpitch.spotify.com/</a></p><p>音频转MIDI谱：主要用于钢琴，如果有其他乐器在的话效果不是很好，但如果只有钢琴那效果绝佳，是字节国内团队研发的，支持一下。使用方法是拽入音频再点submit，右方就会出现视频演示。官方给出的网站只能下载视频，下载生成midi乐谱需要命令行操作。<a href="https://replicate.com/bytedance/piano-transcription">https://replicate.com/bytedance/piano-transcription</a></p><p><img src="image-20230428103412399.png" alt="image-20230428103412399"></p><h3 id="其他"><a class="header-anchor" href="#其他"></a>其他</h3><p>Drum Bot: 实时节奏生成。例如，你连接上MIDI键盘或者直接把电脑放在钢琴边，网站就可以根据你弹琴的速度实时生成一个鼓节奏型为你伴奏 演示：<a href="https://magenta.tensorflow.org/drumbot">https://magenta.tensorflow.org/drumbot</a> 网站：<a href="https://drumbot.glitch.me/">https://drumbot.glitch.me/</a></p><p>NCM转mp3：wyy的NCM格式转mp3[嘘] <a href="https://ncm.worthsee.com/">https://ncm.worthsee.com/</a></p><p>spotify音乐下载：<a href="https://spotifydown.com/">https://spotifydown.com/</a></p><p>MiConv 格式转换：我一般用来转音频格式，但是网站包含了常见的所有文件格式转换。<a href="https://miconv.com/">https://miconv.com/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;放几个私藏的免费宝藏音频工具网站/APP，希望对大家有帮助&lt;/p&gt;
&lt;h3 id=&quot;伴奏-音频源分离（别再花钱去提取伴奏了）：&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#伴奏-音频源分离（别再花钱去提取伴奏了）：&quot;&gt;&lt;/a&gt;伴奏/音频源分离（别再花钱</summary>
      
    
    
    
    <category term="实用工具" scheme="http://www.miasol.top/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Tools" scheme="http://www.miasol.top/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>音频中时常提到的鲁棒性是什么意思？</title>
    <link href="http://www.miasol.top/2023/04/12/%E9%9F%B3%E9%A2%91%E4%B8%AD%E6%97%B6%E5%B8%B8%E6%8F%90%E5%88%B0%E7%9A%84%E9%B2%81%E6%A3%92%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://www.miasol.top/2023/04/12/%E9%9F%B3%E9%A2%91%E4%B8%AD%E6%97%B6%E5%B8%B8%E6%8F%90%E5%88%B0%E7%9A%84%E9%B2%81%E6%A3%92%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88/</id>
    <published>2023-04-11T16:04:04.000Z</published>
    <updated>2023-04-11T23:09:00.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>做数字音频领域的相关内容的时候，经常看到“鲁棒性”这个名词，一直不是很清晰其定义，每次看到都要搜一下，所以今天想着写篇博客解释一下。</p><h2 id="正文"><a class="header-anchor" href="#正文"></a>正文</h2><p>音频领域的鲁棒性是指音频处理算法在面对各种不同类型的音频输入时能够保持良好性能的能力。简言之，鲁棒性是指算法对于噪声、失真、变形、干扰等不完美音频条件的适应性和稳健性。</p><p>在音频处理领域，鲁棒性是一个重要的性能指标，因为实际应用场景中音频输入可能会受到多种因素的干扰，例如背景噪声、录音设备差异、声音品质差异等。鲁棒性的好坏直接影响到音频处理算法在实际应用中的性能和可靠性。</p><p>以下是一些音频领域中鲁棒性的具体解释：</p><ol><li>噪声鲁棒性：音频处理算法应该能够在噪声环境下保持良好的性能。噪声可能来自于环境中的各种声音，例如交通噪声、人声噪声、风噪声等，这些噪声可能对音频信号的质量和清晰度造成干扰。鲁棒性较好的音频处理算法应该能够减小噪声对于音频信号处理的影响，保持较高的处理准确性。</li><li>失真鲁棒性：音频信号在采集、传输、存储等过程中可能会受到失真的影响，例如量化失真、编码失真、传输丢包等。鲁棒性较好的音频处理算法应该能够对失真进行较好的处理，降低失真对音频处理结果的影响。</li><li>变形鲁棒性：音频信号在传输和处理过程中可能会经历变形，例如音频信号的频率、幅度或相位发生变化。鲁棒性较好的音频处理算法应该能够对这些变形进行适应性处理，保持较好的处理性能。</li><li>干扰鲁棒性：音频处理算法应该能够对来自于其他信号源的干扰进行抑制，例如语音信号处理中的混响、回声、干扰音等。鲁棒性较好的音频处理算法应该能够有效处理这些干扰，保持较高的性能。</li></ol><p>综上所述，音频领域的鲁棒性是指音频处理算法在面对不完美音频输入时能够保持良好性能的能力，包括对噪声、失真、变形和</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
&lt;p&gt;做数字音频领域的相关内容的时候，经常看到“鲁棒性”这个名词，一直不是很清晰其定义，每次看到都要搜一下，所以今天想着写篇博客解释一下。&lt;/p&gt;
&lt;h2 id</summary>
      
    
    
    
    <category term="数字音频" scheme="http://www.miasol.top/categories/%E6%95%B0%E5%AD%97%E9%9F%B3%E9%A2%91/"/>
    
    
    <category term="Digital Audio" scheme="http://www.miasol.top/tags/Digital-Audio/"/>
    
  </entry>
  
  <entry>
    <title>Fingerprints</title>
    <link href="http://www.miasol.top/2023/04/09/Fingerprints/"/>
    <id>http://www.miasol.top/2023/04/09/Fingerprints/</id>
    <published>2023-04-09T11:42:24.000Z</published>
    <updated>2023-05-22T17:39:57.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="From-ChatGPT"><a class="header-anchor" href="#From-ChatGPT"></a>From ChatGPT</h2><p>Audio fingerprints, also known as audio fingerprints or audio hashing, are compact and unique representations of audio signals that can be used for various purposes, such as audio identification, content recognition, and audio retrieval. Audio fingerprints are typically generated from the audio content of a given audio file or stream, and they are designed to be robust to common audio transformations such as noise, compression, and format conversions.</p><p>Audio fingerprints are usually generated by extracting specific features from an audio signal, such as the amplitude, frequency, or spectral characteristics of the audio, and then converting these features into a compact representation, often in the form of a fixed-length hash or a numerical code. This fingerprint can then be used to compare against a database of pre-existing fingerprints to identify or recognize audio content.</p><p>One common application of audio fingerprints is in audio identification, where audio fingerprints of a reference set of audio files are generated and stored in a database, and incoming audio can be compared against these fingerprints to identify the content. Audio fingerprints are also used in audio retrieval systems, where users can search for audio content based on a query fingerprint, and in content recognition systems, where audio fingerprints are used to detect copyrighted or unauthorized audio content.</p><p>Audio fingerprints have become an important technology in various industries, including music streaming, broadcast monitoring, copyright enforcement, and audio surveillance, among others. They are also used in various audio-based applications, such as music recommendation, audio search, and audio synchronization.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;From-ChatGPT&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#From-ChatGPT&quot;&gt;&lt;/a&gt;From ChatGPT&lt;/h2&gt;
&lt;p&gt;Audio fingerprints, also known as audio fingerp</summary>
      
    
    
    
    
    <category term="Digital Audio" scheme="http://www.miasol.top/tags/Digital-Audio/"/>
    
    <category term="Music Informatics" scheme="http://www.miasol.top/tags/Music-Informatics/"/>
    
  </entry>
  
  <entry>
    <title>C++ STL记录</title>
    <link href="http://www.miasol.top/2023/03/18/C-STL%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.miasol.top/2023/03/18/C-STL%E8%AE%B0%E5%BD%95/</id>
    <published>2023-03-18T07:25:52.000Z</published>
    <updated>2023-10-22T04:01:53.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="STL-Standard-Template-Library-组件"><a class="header-anchor" href="#STL-Standard-Template-Library-组件"></a>STL (Standard Template Library)组件</h2><ol><li><p>容器 Containers</p><ol><li>Vector</li><li>List</li><li>Queue</li><li>Dequeue</li><li>Priority Queue</li><li>Stack</li><li>Set</li><li>Multiset</li><li>Map &amp; unordered map</li><li>Multimap</li></ol></li><li><p>算法 Algorithms</p></li><li><p>迭代器 Iterators</p></li><li><p>函数对象 Function Objects</p></li><li><p>适配器 Adapters</p></li></ol><h2 id="算法"><a class="header-anchor" href="#算法"></a>算法</h2><ol><li>排序</li><li>搜索</li><li>常用数组算法</li></ol><h2 id="Vector"><a class="header-anchor" href="#Vector"></a>Vector</h2><blockquote><p>原文 <a href="https://www.geeksforgeeks.org/vector-in-cpp-stl/">https://www.geeksforgeeks.org/vector-in-cpp-stl/</a></p></blockquote><h4 id="迭代器Iterators"><a class="header-anchor" href="#迭代器Iterators"></a>迭代器Iterators</h4><ol><li><a href="https://www.geeksforgeeks.org/vectorbegin-vectorend-c-stl/">begin()</a> – 返回迭代器指向的第一个元素</li><li><a href="https://www.geeksforgeeks.org/vectorbegin-vectorend-c-stl/">end()</a> – 返回迭代器指向的最后一个元素</li><li><a href="https://www.geeksforgeeks.org/vector-rbegin-and-rend-function-in-c-stl/">rbegin()</a> – 返回迭代器倒序指向的元素，指针从最后一个向第一个移动</li><li><a href="https://www.geeksforgeeks.org/vector-rbegin-and-rend-function-in-c-stl/">rend()</a> – 返回指向vector中第一个元素之前的理论元素的反向迭代器（被视为反向结束）</li><li><a href="https://www.geeksforgeeks.org/vector-cbegin-vector-cend-c-stl/">cbegin()</a> – 返回指向vector中第一个元素的常量迭代器</li><li><a href="https://www.geeksforgeeks.org/vector-cbegin-vector-cend-c-stl/">cend()</a> – 返回指向vector中最后一个元素之后的理论元素的常量迭代器。</li><li><a href="https://www.geeksforgeeks.org/vectorcrend-vectorcrbegin-examples/">crbegin()</a> – 返回指向vector中最后一个元素（反向开始）的常量反向迭代器。从最后一个元素移动到第一个元素</li><li><a href="https://www.geeksforgeeks.org/vectorcrend-vectorcrbegin-examples/">crend()</a> – 返回一个常量反向迭代器，指向vector中第一个元素之前的理论元素（被视为反向结束）</li></ol><p>记住是begin和end，其他的看前缀，r: reverse反向，c: constant常量，cr: constant+reverse</p><h4 id="容器Capacity"><a class="header-anchor" href="#容器Capacity"></a>容器Capacity</h4><ol><li><a href="https://www.geeksforgeeks.org/vectorempty-vectorsize-c-stl/">size()</a> – 返回元素数量</li><li><a href="https://www.geeksforgeeks.org/vector-max_size-function-in-c-stl/">max_size()</a> – 返回vector可以存放的最大元素数</li><li><a href="https://www.geeksforgeeks.org/vector-capacity-function-in-c-stl/">capacity()</a> – 返回当前分配给vector的存储空间的大小，以元素数表示。</li><li><a href="https://www.geeksforgeeks.org/vector-resize-c-stl/">resize(n)</a> – 调整容器的大小，使其装下n个元素。</li><li><a href="https://www.geeksforgeeks.org/vectorempty-vectorsize-c-stl/">empty()</a> – 返回容器是否为空</li><li><a href="https://www.geeksforgeeks.org/vector-shrink_to_fit-function-in-c-stl/">shrink_to_fit()</a> – 减少vector的容量以适应其大小并销毁超出容量的所有元素。理解为减去没有存储的空容量</li><li><a href="https://www.geeksforgeeks.org/using-stdvectorreserve-whenever-possible/">reserve() </a>– 要求vector容量至少足以包含 n 个元素。</li></ol><h4 id="元素访问-Element-access"><a class="header-anchor" href="#元素访问-Element-access"></a>元素访问 Element access</h4><ol><li>reference operator [g] – 返回g索引位置的元素</li><li><a href="https://www.geeksforgeeks.org/vectorat-vectorswap-c-stl/">at(g)</a> – 返回g索引位置的元素</li><li><a href="https://www.geeksforgeeks.org/vectorfront-vectorback-c-stl/">front()</a> – 返回vector的第一个元素</li><li><a href="https://www.geeksforgeeks.org/vectorfront-vectorback-c-stl/">back()</a> – 返回vector的最后一个元素</li><li><a href="https://www.geeksforgeeks.org/vector-data-function-in-c-stl/">data()</a> – 返回指向vector内部使用的内存数组的直接指针，用于存储其拥有的元素。</li></ol><h4 id="Modifiers"><a class="header-anchor" href="#Modifiers"></a>Modifiers</h4><ol><li><a href="https://www.geeksforgeeks.org/vector-assign-in-c-stl/">assign() </a>–通过替换旧元素来为vector元素分配新值</li><li><a href="https://www.geeksforgeeks.org/vectorpush_back-vectorpop_back-c-stl/">push_back()</a> – 从vector的末尾将元素推入vector中</li><li><a href="https://www.geeksforgeeks.org/vectorpush_back-vectorpop_back-c-stl/">pop_back()</a> – 从vector的末尾弹出或删除元素。</li><li><a href="https://www.geeksforgeeks.org/vector-insert-function-in-c-stl/">insert()</a> – 在指定位置的元素之前插入新元素</li><li><a href="https://www.geeksforgeeks.org/vectorclear-vectorerase-c-stl/">erase()</a> –从vector的指定位置或范围删除元素。</li><li><a href="https://www.geeksforgeeks.org/vectorat-vectorswap-c-stl/">swap()</a> – 将一个向量的内容与另一个相同类型的向量交换。大小可以不同。</li><li><a href="https://www.geeksforgeeks.org/vectorclear-vectorerase-c-stl/">clear()</a> – 删除vector的所有元素</li><li><a href="https://www.geeksforgeeks.org/vector-emplace-function-in-c-stl/">emplace()</a> – 通过在指定位置插入新元素来扩展容器。</li><li><a href="https://www.geeksforgeeks.org/vectoremplace_back-c-stl/">emplace_back()</a> – 将新元素插入到向量容器中，新元素添加到向量的末尾</li></ol><h2 id="Map"><a class="header-anchor" href="#Map"></a>Map</h2><p>返回指向末尾的迭代器：end();<br>用迭代器访问元素的键值 it-&gt;first<br>用迭代器访问元素的键值对应的元素值 it-&gt;second</p><p>C++中的<code>std::map</code>是一个关联容器，它将键和值以键-值对的形式存储在容器中，并按键的顺序进行排序。以下是<code>std::map</code>提供的一些主要函数及其简介：</p><ol><li><p><code>begin()</code>:</p><ul><li>返回指向容器中第一个键-值对的迭代器。</li></ul></li><li><p><code>end()</code>:</p><ul><li>返回指向容器中最后一个键-值对之后位置的迭代器。</li></ul></li><li><p><code>rbegin()</code>:</p><ul><li>返回指向容器中最后一个键-值对的逆序迭代器。</li></ul></li><li><p><code>rend()</code>:</p><ul><li>返回指向容器中第一个键-值对之前位置的逆序迭代器。</li></ul></li><li><p><code>clear()</code>:</p><ul><li>清空容器，移除所有键-值对。</li></ul></li><li><p><code>count(const KeyType&amp; key)</code>:</p><ul><li>返回具有给定键的键-值对的数量（通常为0或1，因为<code>map</code>不允许重复键）。</li></ul></li><li><p><code>empty()</code>:</p><ul><li>如果容器为空，则返回<code>true</code>；否则返回<code>false</code>。</li></ul></li><li><p><code>erase(iterator position)</code>:</p><ul><li>移除指定迭代器位置的键-值对。</li></ul></li><li><p><code>erase(const KeyType&amp; key)</code>:</p><ul><li>移除具有给定键的键-值对。</li></ul></li><li><p><code>find(const KeyType&amp; key)</code>:</p><ul><li>返回一个指向具有给定键的键-值对的迭代器，如果键不存在，则返回<code>end()</code>。</li></ul></li><li><p><code>insert(const std::pair&lt;KeyType, ValueType&gt;&amp; kv)</code>:</p><ul><li>在容器中插入一个键-值对。如果该键已存在，则更新对应的值。</li></ul></li><li><p><code>size()</code>:</p><ul><li>返回容器中键-值对的数量。</li></ul></li><li><p><code>lower_bound(const KeyType&amp; key)</code>:</p><ul><li>返回指向第一个不小于给定键的键-值对的迭代器。</li></ul></li><li><p><code>upper_bound(const KeyType&amp; key)</code>:</p><ul><li>返回指向第一个大于给定键的键-值对的迭代器。</li></ul></li><li><p><code>equal_range(const KeyType&amp; key)</code>:</p><ul><li>返回一对迭代器，分别指向容器中所有具有给定键的键-值对的范围。</li></ul></li><li><p><code>swap(std::map&amp; other)</code>:</p><ul><li>交换两个<code>map</code>容器的内容。</li></ul></li></ol><p>这些是<code>std::map</code>提供的一些常用函数。<code>map</code>是一个有序容器，用于存储键值对，它会根据键的值来排序，并且不允许重复的键。这使得它非常适用于需要将数据按键进行有序存储和检索的情况。</p><h3 id="Map遍历的几种方法"><a class="header-anchor" href="#Map遍历的几种方法"></a>Map遍历的几种方法</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>    mp<span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    mp<span class="token punctuation">[</span><span class="token string">"李四"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    mp<span class="token punctuation">[</span><span class="token string">"王五"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token comment">// 方式一、迭代器</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"方式一、迭代器"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> mp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> mp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> it <span class="token operator">-></span> first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> it <span class="token operator">-></span> second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 方式二、range for C++ 11版本及以上</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n方法二、 range for"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">:</span> mp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 方法三、 C++ 17版本及以上</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n方法三"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token operator">:</span> mp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> key  <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Stack"><a class="header-anchor" href="#Stack"></a>Stack</h2><p>在默认情况下，<code>std::stack</code>使用<code>std::deque</code>作为其底层数据结构，因为<code>std::deque</code>允许在两端进行高效的插入和删除操作，这对于栈这种数据结构来说非常合适。而deque<code>（双端队列，即&quot;double-ended queue&quot;的缩写）</code>的底层数据结构通常是由一个动态数组（或一系列固定大小的数组块）组成的，而不是像<code>vector</code>一样使用单个连续的内存块。这使得<code>deque</code>在两端（前端和后端）进行高效的插入和删除操作成为可能。</p><p><a href="https://www.geeksforgeeks.org/stack-empty-and-stack-size-in-c-stl/">empty()</a> – 返回栈是否为空<br><a href="https://www.geeksforgeeks.org/stack-empty-and-stack-size-in-c-stl/">size()</a> – 返回栈的大小<br><a href="https://www.geeksforgeeks.org/stack-top-c-stl/">top()</a> – 返回对堆栈最顶部元素的引用<br><a href="https://www.geeksforgeeks.org/stack-push-and-pop-in-c-stl/">push(g)</a> – 将元素“g”添加到堆栈顶部<br><a href="https://www.geeksforgeeks.org/stack-push-and-pop-in-c-stl/">pop()</a> – 删除堆栈中最近输入的元素</p><h2 id="Set"><a class="header-anchor" href="#Set"></a>Set</h2><p>集合是一种关联容器，其中每个元素都必须是唯一的。其底层实现是红黑树，默认是升序（从小到大）</p><p>当在C++代码中使用<code>std::set</code>时，通常会使用命名空间<code>std</code>，所以你可以不必每次都使用完整的<code>std::set::</code>前缀。以下是相同的函数列表，简化为使用命名空间的写法：</p><ol><li><p><code>begin()</code>:</p><ul><li>返回指向容器中第一个元素的迭代器。</li></ul></li><li><p><code>end()</code>:</p><ul><li>返回指向容器中最后一个元素之后位置的迭代器。</li></ul></li><li><p><code>rbegin()</code>:</p><ul><li>返回指向容器中最后一个元素的逆序迭代器。</li></ul></li><li><p><code>rend()</code>:</p><ul><li>返回指向容器中第一个元素之前位置的逆序迭代器。</li></ul></li><li><p><code>clear()</code>:</p><ul><li>清空容器，移除所有元素。</li></ul></li><li><p><code>count(const KeyType&amp; key)</code>:</p><ul><li>返回具有给定键值的元素的数量（通常为0或1，因为<code>set</code>不允许重复键）。</li></ul></li><li><p><code>empty()</code>:</p><ul><li>如果容器为空，则返回<code>true</code>；否则返回<code>false</code>。</li></ul></li><li><p><code>erase(iterator position)</code>:</p><ul><li>移除指定迭代器位置的元素。</li></ul></li><li><p><code>erase(const KeyType&amp; key)</code>:</p><ul><li>移除具有给定键值的元素。</li></ul></li><li><p><code>find(const KeyType&amp; key)</code>:</p><ul><li>返回一个指向具有给定键值的元素的迭代器，如果元素不存在，则返回<code>end()</code>。</li></ul></li><li><p><code>insert(const ValueType&amp; value)</code>:</p><ul><li>在容器中插入一个值。如果该值已存在，则不会插入。</li></ul></li><li><p><code>size()</code>:</p><ul><li>返回容器中元素的数量。</li></ul></li><li><p><code>lower_bound(const KeyType&amp; key)</code>:</p><ul><li>返回指向第一个不小于给定键值的元素的迭代器。</li></ul></li><li><p><code>upper_bound(const KeyType&amp; key)</code>:</p><ul><li>返回指向第一个大于给定键值的元素的迭代器.</li></ul></li><li><p><code>equal_range(const KeyType&amp; key)</code>:</p><ul><li>返回一对迭代器，分别指向容器中所有具有给定键值的元素的范围。</li></ul></li><li><p><code>swap(std::set&amp; other)</code>:</p><ul><li>交换两个<code>set</code>容器的内容。</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;STL-Standard-Template-Library-组件&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#STL-Standard-Template-Library-组件&quot;&gt;&lt;/a&gt;STL (Standard Template Libra</summary>
      
    
    
    
    <category term="C++" scheme="http://www.miasol.top/categories/C/"/>
    
    
    <category term="C++" scheme="http://www.miasol.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Typora使用技巧记录</title>
    <link href="http://www.miasol.top/2023/03/06/Typora%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.miasol.top/2023/03/06/Typora%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E8%AE%B0%E5%BD%95/</id>
    <published>2023-03-05T20:31:09.000Z</published>
    <updated>2023-05-22T17:40:33.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言"></a>引言</h2><p>Markdown内嵌HTML语法所以很多想要的效果直接属于HTML语法就行。这里记录一些比较常用的方法，方便查阅。</p><h2 id="如何引用文献"><a class="header-anchor" href="#如何引用文献"></a>如何引用文献</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--写在需要索引的地方--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ref1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--写在Reference处--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>ref1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>应用：</p><p><img src="image-20230306043528282-8077330.png" alt="image-20230306043528282"></p><p><img src="image-20230306043612313-8077373.png" alt="image-20230306043612313"></p><p>结果：</p><p><img src="image-20230306043720889.png" alt="image-20230306043720889"></p><h2 id="图片并排"><a class="header-anchor" href="#图片并排"></a>图片并排</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">frame</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>void</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--使用table标签，且frame=void消除外边框--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--&lt;tr>一行的内容&lt;\tr>，&lt;td>一个格子的内容&lt;\td>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片地址1<span class="token punctuation">"</span></span>                     <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>第一张图片显示不出时显示的文字<span class="token punctuation">"</span></span>                     <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>填数字作为高度<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--&lt;center>标签将图片居中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片地址2<span class="token punctuation">"</span></span>                     <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>第二张图片显示不出时显示的文字<span class="token punctuation">"</span></span>                     <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>高度一致会好看<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文字居中"><a class="header-anchor" href="#文字居中"></a>文字居中</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>xxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;
&lt;p&gt;Markdown内嵌HTML语法所以很多想要的效果直接属于HTML语法就行。这里记录一些比较常用的方法，方便查阅。&lt;/p&gt;
&lt;h2 id=&quot;如何引用文献&quot;</summary>
      
    
    
    
    <category term="实用工具" scheme="http://www.miasol.top/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Markdown" scheme="http://www.miasol.top/tags/Markdown/"/>
    
    <category term="Tools" scheme="http://www.miasol.top/tags/Tools/"/>
    
  </entry>
  
</feed>
