<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数组[1]-快慢指针思想- 移除元素</title>
      <link href="/2023/11/15/%E6%95%B0%E7%BB%84-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
      <url>/2023/11/15/%E6%95%B0%E7%BB%84-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="移除元素">移除元素</h1><p><ahref="https://leetcode.cn/problems/remove-element/">leetcode链接</a></p><h2 id="题目描述">题目描述</h2><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要<strong><ahref="https://baike.baidu.com/item/原地算法">原地</a></strong>移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并<strong><ahref="https://baike.baidu.com/item/原地算法">原地</a>修改输入数组</strong>。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><strong>说明:</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝int len &#x3D; removeElement(nums, val);&#x2F;&#x2F; 在函数里修改输入数组对于调用者是可见的。&#x2F;&#x2F; 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。for (int i &#x3D; 0; i &lt; len; i++) &#123;    print(nums[i]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [3,2,2,3], val &#x3D; 3输出：2, nums &#x3D; [2,2]解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums &#x3D; [2,2,3,3] 或 nums &#x3D; [2,2,0,0]，也会被视作正确答案。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2输出：5, nums &#x3D; [0,1,3,0,4]解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="思路">思路</h2><p>这道题一般思路是通过暴力求解，两个for循环进行嵌套。基本思路是，当查找到val时当前的index和数组总size都要减1，直到最后。但这道题可以从双指针的思路出发，双指针在很多时候可以将O(<spanclass="math inline">\(n^2\)</span>)的时间复杂度降为O(n)。</p><p>那么这道题双指针解法的思路是，设置slow和fast两个指针，fast负责在前面探测是否为val，而slow负责指向最终结果数组的末尾。在未探测到val时，需要把此时的数字存入结果数组，那么相当于是nums[slow]=nums[fast]。反之，当fast探测到当前为val的话，那么fast直接向前走不将其存入结果数组，fast++即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                nums<span class="token punctuation">[</span>slow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            fast<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快慢指针思想核心">快慢指针思想核心</h2><p>快慢指针是双指针的一种，核心思想是，快指针在前进行查找，慢指针在后作为结果数组的尾索引。</p><h1 id="相关题目">相关题目</h1><ul><li><ahref="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26.删除排序数组中的重复项</a></li><li><ahref="https://leetcode.cn/problems/move-zeroes/">283.移动零</a></li><li><ahref="https://leetcode.cn/problems/backspace-string-compare/">844.比较含退格的字符串</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> 代码随想录刷题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何确定二分查找的边界</title>
      <link href="/2023/11/11/%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9A%84%E8%BE%B9%E7%95%8C/"/>
      <url>/2023/11/11/%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9A%84%E8%BE%B9%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="关于二分查找的基础知识">关于二分查找的基础知识</h2><p>使用二分查找的先决条件是，被查找序列必须是<u>单调有序</u>。基本思路如下：</p><p>假设查找序列为升序，那么首先计算出中间位置元素的值，并于目标值进行比较，本元素比目标值小，那么继续在本元素的右边序列进行二分查找。</p><p>整体思路看起来不难，但重点是考察查找边界的确定。下面我将解释两种二分查找的边界确定思路。</p><h2 id="方法一左闭右闭-left-right">方法一：左闭右闭 <strong>[left,right]</strong></h2><p>左闭右闭的主要意义在于：</p><ol type="1"><li>每次查找的时候左右区间下标表示的值都要取到</li><li>因为都要取，所以left = right是有意义的</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//最右值被取，size-1才表示最后一个值</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//left = right有意义</span>            <span class="token keyword">int</span> middle <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数学上等同(left+right)/2,但计算机里可能两个int相加会溢出。注意的是按照Leetcode704的数据前提，使用left+right是不会溢出的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                right <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//target在左边，原本的middle取过了，所以right-1</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//target在右边，原本的middle取过了，所以left+1</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                 <span class="token keyword">return</span> middle<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 未找到目标值</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法二左闭右开-left-right">方法二：左闭右开 <strong>[left,right]</strong>）</h2><p>左闭右开的意义在于：</p><ol type="1"><li>每次查找的时候，右边的值是不取到的</li><li>因为最右值不取，所以left = right是没有意义的</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右值不取</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token comment">//left = right是没有意义的</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> middle <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span> right <span class="token operator">=</span> middle<span class="token punctuation">;</span> <span class="token comment">// middle下标取过，而right不取，所以这里直接right=middle</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>left <span class="token operator">=</span> middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// middle下标取过，而left也要取，所以left = middle+1;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> middle<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> 代码随想录刷题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程思想与游戏音频设计中的回调（Callback）</title>
      <link href="/2023/11/08/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E4%B8%8E%E6%B8%B8%E6%88%8F%E9%9F%B3%E9%A2%91%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%9B%9E%E8%B0%83%EF%BC%88Callback%EF%BC%89/"/>
      <url>/2023/11/08/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E4%B8%8E%E6%B8%B8%E6%88%8F%E9%9F%B3%E9%A2%91%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%9B%9E%E8%B0%83%EF%BC%88Callback%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>【开坑未写完】</p>]]></content>
      
      
      <categories>
          
          <category> 游戏音频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Game Audio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音频编码格式与游戏音频</title>
      <link href="/2023/11/08/%E6%B8%B8%E6%88%8F%E9%9F%B3%E9%A2%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%AD%E9%9F%B3%E9%A2%91%E6%A0%BC%E5%BC%8F/"/>
      <url>/2023/11/08/%E6%B8%B8%E6%88%8F%E9%9F%B3%E9%A2%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%AD%E9%9F%B3%E9%A2%91%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>音频编码格式顾名思义是对音频编码的方式，需要注意的是与音频文件格式进行区分。音频文件格式可以理解成是一种容器用于存储音频数据，例如".wav"音频文件通常使用PCM音频编码格式，而".mp3"文件则是使用mp3音频编码格式。</p><h2 id="音频编码格式基本概念">音频编码格式基本概念</h2><p>音频编码格式可以分为三类：</p><ul><li><p>未压缩（uncompression）</p></li><li><p>无损压缩 (lossless compression)</p></li><li><p>有损压缩 (lossy compression)</p></li></ul><h3 id="未压缩">未压缩</h3><p><strong>定义：</strong></p><p>​未压缩音频表示音频文件的所有数据都是原始录音捕获的数据，没有任何的数据丢失和减少。</p><p><strong>特点：</strong></p><ul><li><strong>高质量</strong>：保持原始音频录制的质量。</li><li><strong>大文件大小</strong>：由于没有数据被移除或减少，导致文件体积较大。</li><li><strong>广泛兼容</strong>：通常与各种播放系统更加通用兼容。</li><li><strong>例</strong>：如WAV和AIFF格式。</li></ul><p><strong>用途</strong>：</p><p>​通常用于专业音频设置中，保持最高质量至关重要，例如在音乐制作、声音设计和录音室中。</p><h3 id="无损压缩">无损压缩</h3><p><strong>定义</strong>：</p><p>​无损压缩涉及减小音频文件的大小，同时不损失任何质量。可以从压缩数据完美重建原始数据。</p><p><strong>特点：</strong></p><ul><li><strong>质量保持</strong>：与有损压缩不同，保持与原始音频相同的质量。</li><li><strong>减小文件大小</strong>：与未压缩音频相比，文件大小较小，但不如有损压缩文件小。</li><li><strong>需要解压缩</strong>：播放前需要解压缩，可能会使用更多的处理资源。</li><li><strong>例</strong>：FLAC、ALAC</li></ul><p><strong>用途</strong>：</p><p>在需要节约存储空间但又重视音质的情况下使用。适用于高质量音乐流媒体、存档以及重视音频保真度的音频爱好者。</p><h3 id="有损压缩">有损压缩</h3><p><strong>定义</strong>：</p><p>​有损压缩通过<strong>永久性地</strong>消除被认为对人耳感知不太重要的某些数据部分来减小音频文件的大小。这个过程是不可逆的，意味着一旦数据被压缩，被丢弃的信息无法恢复。</p><p><strong>特点</strong></p><ul><li><strong>显著减小文件大小</strong>：与无压缩和无损格式相比，提供了更小的文件大小。</li><li><strong>质量损失</strong>：压缩涉及音质的权衡。根据压缩级别（比特率），音质损失可以从几乎不可察觉到显著不同。</li><li><strong>高效性</strong>：需要较少的存储空间和带宽，非常适合流媒体和存储大量音乐或其他音频。</li><li><strong>示例</strong>：常见格式包括MP3、AAC和OGG Vorbis。</li></ul><p><strong>用途</strong>：</p><p>广泛用于消费者音频应用，如流媒体服务、MP3播放器和互联网音频。它是在存储空间和带宽有限、绝对音频保真度不是至关重要的情况下的流行选择。</p><h2 id="wwise引擎中的4种编码格式">Wwise引擎中的4种编码格式</h2><p>在Wwise中间件中，有四种默认的音频格式：</p><ul><li>PCM (uncompression)</li><li>Vorbis (lossy compression)</li><li>Opus (lossy compression)</li><li>ADPCM (lossy compression)</li></ul><h3 id="pcm-pulse-code-modulation"><strong>PCM (Pulse CodeModulation)</strong></h3><p><strong>定义</strong>：PCM是一种未压缩的格式，直接表示原始音频数据，没有经过任何形式的压缩。</p><p><strong>特点</strong>：提供最佳的声音质量，但占用较高的存储空间；对CPU 处理要求较低。</p><p><strong>游戏中的应用</strong>：</p><ul><li><strong>短且重复的音频文件</strong>：减少对处理能力的压力。</li><li><strong>高保真声音</strong>：适用于需要高质量音频输出的场景。</li></ul><p><strong>备注</strong>: 在 Wwise 中导入音频文件时，通常使用 '.WAV'文件格式，并采用 PCM音频格式。这确保了高质量的源文件，可以稍后转换为其他格式或保持为PCM。</p><h3 id="vorbis"><strong>Vorbis</strong></h3><p><strong>定义</strong>：Vorbis是一种开源的有损压缩编解码器，能在<strong>低比特率</strong>下保持良好的声音质量。</p><p><strong>特点</strong>：与其他格式相比，在非常低的比特率下保持较好的声音质量。并且在Wwise 中，这种格式针对交互媒体和游戏平台进行了高度优化。</p><blockquote><p>Vorbis格式在多交互媒体和游戏平台的优势：</p><ol type="1"><li><strong>高效的音质保持</strong>：Vorbis在较低比特率下能够保持较好的音质。这对于游戏开发尤为重要，因为游戏通常包含大量的音频内容，需要在保持音质的同时尽量减少文件大小。</li><li><strong>开源和无版税</strong>：Vorbis是一个开源的编解码器，这意味着它可以免费使用，不涉及版权费用，降低了开发成本。</li><li><strong>良好的适应性</strong>：Vorbis格式适用于各种不同的游戏和交互媒体场景，包括复杂的音频环境和动态音频交互。</li><li><strong>平台兼容性</strong>：Vorbis在多种硬件平台上都表现良好，包括PC、主机和移动设备。这使得它成为跨平台游戏开发的理想选择。</li><li><strong>动态流媒体优化</strong>：Vorbis适合动态音频流媒体，这对于需要实时音频处理和动态音效调整的游戏来说非常重要。</li><li><strong>处理效率</strong>：虽然 Vorbis需要一定的处理能力来解压，但它在游戏中的应用通常是可接受的，尤其是在桌面和主机平台上。</li></ol></blockquote><p><strong>游戏中的应用</strong>：</p><ul><li><strong>项目中的大多数声音</strong>：适用于大部分情况，但应避免用于需要高重复率的音频文件，因为它需要一些处理能力来解压缩。</li><li><strong>“嘈杂”的声音</strong>：如岩石破坏等，压缩带来的伪影不太可能被用户感知为低质量。</li></ul><p><strong>备注</strong>: Vorbis编解码器在音频文件中需要暂停、恢复或循环播放时，需要使用 Seektables。</p><blockquote><p>Seek Table</p><p>关于Seek Table的具体配置，可查看<ahref="https://www.audiokinetic.com/zh/courses/wwise251/?source=wwise251&amp;id=Lesson3_Seek_Tables">Wwise251</a>课程。下面是一些关键点：</p><ol type="1"><li><strong>定义</strong>：Seek tables是音频文件中的一部分，包含关于文件不同部分的信息。这些信息使得音频播放器可以快速定位（或“跳转”）到音频流中的特定位置，而无需从头开始顺序播放。</li><li><strong>用途</strong>：Seek tables主要用于需要随机访问的情况，比如当用户希望跳转到音频文件的特定部分时。在游戏中，这种功能特别有用，因为它允许快速访问音轨的不同部分，例如循环播放背景音乐的特定段落，或在对话中跳到特定点。</li><li><strong>与有损压缩的关系</strong>：在某些有损压缩格式（如Vorbis）中，文件被分割成多个小的数据块进行压缩。没有Seektables，音频播放器需要从头开始顺序处理这些数据块，直到达到所需的位置。这在快速访问或循环播放时会变得效率低下。</li><li><strong>性能考虑</strong>：使用 Seek tables可以提高性能，特别是在处理较大的音频文件或在资源受限的设备上。通过减少必须处理的数据量，可以提高应用程序的响应速度和整体性能。</li><li><strong>在游戏音频中的重要性</strong>：游戏音频经常需要高度的交互性和动态响应。利用Seektables，可以实现更为精准和快速的音频内容访问，从而增强游戏的音频体验，比如快速响应游戏事件触发的音效变化。</li></ol></blockquote><h3 id="opus"><strong>Opus</strong></h3><p><strong>定义</strong>：Opus 是 Vorbis的一个替代品，是一种有损压缩编解码器。</p><p><strong>特点</strong>：使用更多CPU，但在类似的质量下允许更大的压缩；不需要 Seek tables来寻找或循环。</p><p><strong>游戏中的应用</strong>：</p><ul><li><strong>非循环的音频源</strong>：如对话或长的音频源，如环境声；适用于对文件大小要求特别严格的场景。</li></ul><h3 id="adpcm-adaptive-differential-pulse-code-modulation"><strong>ADPCM(Adaptive Differential Pulse-Code Modulation)</strong>:</h3><p><strong>定义</strong>：ADPCM 提供相对于 PCM更小的文件大小的音频格式。</p><p><strong>特点</strong>：提供与 PCM 相比 3:1 的压缩比；与 Vorbis相比几乎不使用 CPU。</p><p><strong>游戏中的应用</strong>：</p><ul><li><strong>环境声或其他音效</strong>：适用于想要比 PCM释放更多内存的场景。</li><li><strong>移动设备</strong>：作为节省 CPU 和运行时内存的 Vorbis替代品。</li></ul><h2 id="其他音频编码格式">其他音频编码格式</h2><ol type="1"><li><strong>MP3 (MPEG-1 Audio Layer III)</strong>：<ul><li><strong>描述</strong>：MP3是最著名的音频编码格式之一，用于有损压缩数字音频。它通过去除人耳难以察觉的音频信息来减小文件大小。</li><li><strong>优点</strong>：文件大小小，兼容性强，广泛应用于音乐播放器、流媒体服务等。</li><li><strong>缺点</strong>：音质在高压缩比下会有所下降。</li></ul></li><li><strong>AAC (Advanced Audio Coding)</strong>：<ul><li><strong>描述</strong>：AAC 是一种比 MP3更高效的有损压缩格式，提供更好的音质。</li><li><strong>优点</strong>：在相同比特率下比 MP3提供更好的音质；广泛用于流媒体服务。</li><li><strong>缺点</strong>：不像 MP3那样普遍支持，特别是在一些旧的或限制性的硬件设备上。</li></ul></li><li><strong>FLAC (Free Lossless Audio Codec)</strong>：<ul><li><strong>描述</strong>：FLAC是一种无损压缩音频编码格式，完美保留原始音频数据。</li><li><strong>优点</strong>：提供无损音质，文件大小小于WAV；支持元数据标签。</li><li><strong>缺点</strong>：文件大小仍然比有损格式大，不适合流媒体服务。</li></ul></li><li><strong>ALAC (Apple Lossless Audio Codec)</strong>：<ul><li><strong>描述</strong>：ALAC 是 Apple 开发的无损压缩格式，与 FLAC类似。</li><li><strong>优点</strong>：无损音质；与 Apple 生态系统（如 iTunes 和iPod）兼容性良好。</li><li><strong>缺点</strong>：文件大小较大，主要在 Apple设备和软件中使用。</li></ul></li><li><strong>WMA (Windows Media Audio)</strong>：<ul><li><strong>描述</strong>：WMA是由微软开发的一系列音频编码格式和其相应的音频编解码器。</li><li><strong>优点</strong>：提供了有损和无损格式；与 Windows平台兼容性良好。</li><li><strong>缺点</strong>：在非 Windows平台上的支持不如其他更普及的格式。</li></ul></li></ol><h2id="常见音频文件格式与对应的音频编码格式">常见音频文件格式与对应的音频编码格式</h2><ul><li>WAV - PCM （也可以ADPCM）</li><li>MP3 - MP3 （有损压缩）</li><li>AAC - AAC （有损压缩）</li><li>OGG - Vorbis / Opus （有损压缩，开源且无版税）</li><li>FLAC - FLAC （无损压缩）</li><li>ALAC - ALAC （无损压缩）</li><li>WMA - WMA （可以有损也可以无损）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 游戏音频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Digital Audio </tag>
            
            <tag> Game Audio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音频元数据Metadata</title>
      <link href="/2023/11/08/%E9%9F%B3%E9%A2%91%E5%85%83%E6%95%B0%E6%8D%AEMetadata/"/>
      <url>/2023/11/08/%E9%9F%B3%E9%A2%91%E5%85%83%E6%95%B0%E6%8D%AEMetadata/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是音频元数据metadata">什么是音频元数据（Metadata）</h2><p>音频元数据（Metadata）用于描述音频文件的信息，这些元数据通常嵌入在音频文件中或与音频文件一起存储，以帮助使用者识别、组织和管理音频内容。数据的种类主要取决于文件的格式。</p><h2 id="常见metadata类型">常见Metadata类型</h2><ol type="1"><li>标题和艺术家信息</li><li>专辑信息</li><li>时长</li><li>音频格式</li><li>比特率</li><li>采样率</li><li>通道数：例如单声道（Mono）、立体声道（Stereo）</li><li>风格和流派</li><li>歌词</li><li>评论和标签</li></ol><h2 id="音频元数据的标准格式">音频元数据的标准格式</h2><p>Metadata通常以一定的标准格式进行存储，例如ID3标签、APE标签或Vorbis注释等。并且不是所有的格式的音频文件都可以存储Metadata。</p><p>能储存metadata的音频文件格式有：</p><ul><li>.wav</li><li>.mp3</li><li>.ogg</li><li>.wma</li><li>.flac</li><li>.aac</li></ul><h2 id="如何修改音频文件中的metadata">如何修改音频文件中的Metadata</h2><h3 id="音频编辑器导出设置reaper">音频编辑器导出设置（Reaper）</h3><p>许多编辑器和DAW在导出音频文件是能对文件的Metadata进行设置，本文以Reaper为例。</p><ol type="1"><li><p>依次File-&gt;Render..打开reaper导出文件的界面，如图：</p><figure><img src="image-1.png" alt="image1" /><figcaption aria-hidden="true">image1</figcaption></figure></li><li><p>默认Metadata选项是关闭的，我们只需要打开即可对元数据进行编辑。</p><figure><img src="image-2.png" alt="image2" /><figcaption aria-hidden="true">image2</figcaption></figure></li></ol><h3 id="python-mutagen库">Python mutagen库</h3><h4 id="安装方式">安装方式</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> mutagen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="官方文档">官方文档</h4><p>https://mutagen.readthedocs.io/en/latest/</p><h4 id="使用方法">使用方法</h4><p>以修改mp3文件的标题和艺术家为例子:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入mutagen.File类</span><span class="token keyword">from</span> mutagen <span class="token keyword">import</span> File<span class="token comment"># 打开音频文件</span>audio <span class="token operator">=</span> File<span class="token punctuation">(</span><span class="token string">"example.mp3"</span><span class="token punctuation">)</span><span class="token comment"># 打印原始的元数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>audio<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 修改标题和艺术家标签</span>audio<span class="token punctuation">[</span><span class="token string">"TIT2"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"New Title"</span>audio<span class="token punctuation">[</span><span class="token string">"TPE1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"New Artist"</span><span class="token comment"># 保存修改后的文件</span>audio<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 打印修改后的元数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>audio<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pyhton-audio-metadata库">Pyhton audio-metadata库</h3><h4 id="安装方式-1">安装方式</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> audio-metadata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>链接：https://pypi.org/project/audio-metadata/</p><h4 id="开源地址">开源地址</h4><p>https://github.com/thebigmunch/audio-metadata</p><h4 id="api-reference">API Reference</h4><p>https://audio-metadata.readthedocs.io/en/latest/api.html</p><h4 id="使用方法-1">使用方法</h4><p>以修改mp3文件的标题和艺术家为例子（load和dump函数来读取和写入元数据）:</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import audio_metadata# 读取MP3文件的元数据metadata &#x3D; audio_metadata.load(&#39;sample.mp3&#39;)# 打印原始的标题和艺术家信息print(metadata.tags.title)print(metadata.tags.artist)# 修改标题和艺术家信息metadata.tags.title &#x3D; &#39;New Title&#39;metadata.tags.artist &#x3D; &#39;New Artist&#39;# 写入修改后的元数据到MP3文件audio_metadata.dump(metadata, &#39;sample.mp3&#39;)# 重新读取MP3文件的元数据，验证修改是否成功metadata &#x3D; audio_metadata.load(&#39;sample.mp3&#39;)# 打印修改后的标题和艺术家信息print(metadata.tags.title)print(metadata.tags.artist)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ffmpeg">FFmpeg</h3><h4 id="官方文档-1">官方文档</h4><p>https://ffmpeg.org/</p><h4 id="修改metadata">修改Metadata</h4><p>修改方式是使用<code>-metadata</code>指令，修改对应的键值。例如修改mp3文件的标题和艺术家：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-i</span> input.mp3 <span class="token parameter variable">-metadata</span> <span class="token assign-left variable">title</span><span class="token operator">=</span><span class="token string">"New Title"</span> <span class="token parameter variable">-metadata</span> <span class="token assign-left variable">artist</span><span class="token operator">=</span><span class="token string">"New Artist"</span> output.mp3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令会将<code>input.mp3</code>文件的标题和艺术家修改为<code>New Title</code>和<code>New Artist</code>，并输出一个新的文件<code>output.mp3</code>。请注意，这个命令会重新编码音频流，可能会导致音质损失。如果您想要保留原始的音频流，可以使用<code>-c:a copy</code>选项，告诉FFmpeg不要对音频流进行编码，只修改metadata。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-i</span> input.mp3 <span class="token parameter variable">-c:a</span> copy <span class="token parameter variable">-metadata</span> <span class="token assign-left variable">title</span><span class="token operator">=</span><span class="token string">"New Title"</span> <span class="token parameter variable">-metadata</span> <span class="token assign-left variable">artist</span><span class="token operator">=</span><span class="token string">"New Artist"</span> output.mp3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数字音频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Digital Audio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】对数字音频领域中 采样率 比特深度 动态范围 比特率 的理解</title>
      <link href="/2023/11/01/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E5%AF%B9%E6%95%B0%E5%AD%97%E9%9F%B3%E9%A2%91%E9%A2%86%E5%9F%9F%E4%B8%AD-%E9%87%87%E6%A0%B7%E7%8E%87-%E6%AF%94%E7%89%B9%E6%B7%B1%E5%BA%A6-%E5%8A%A8%E6%80%81%E8%8C%83%E5%9B%B4-%E6%AF%94%E7%89%B9%E7%8E%87-%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2023/11/01/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E5%AF%B9%E6%95%B0%E5%AD%97%E9%9F%B3%E9%A2%91%E9%A2%86%E5%9F%9F%E4%B8%AD-%E9%87%87%E6%A0%B7%E7%8E%87-%E6%AF%94%E7%89%B9%E6%B7%B1%E5%BA%A6-%E5%8A%A8%E6%80%81%E8%8C%83%E5%9B%B4-%E6%AF%94%E7%89%B9%E7%8E%87-%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>对数字音频领域中 采样率 比特深度 动态范围 比特率 的理解 -卡芙小轩的文章 - 知乎 https://zhuanlan.zhihu.com/p/40828783</p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Digital Audio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】空间音频科普</title>
      <link href="/2023/10/28/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E7%A9%BA%E9%97%B4%E9%9F%B3%E9%A2%91%E7%A7%91%E6%99%AE/"/>
      <url>/2023/10/28/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E7%A9%BA%E9%97%B4%E9%9F%B3%E9%A2%91%E7%A7%91%E6%99%AE/</url>
      
        <content type="html"><![CDATA[<p>空间音频科普篇【持续更新】 - 削腚恶的文章 - 知乎https://zhuanlan.zhihu.com/p/584461699</p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Digital Audio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的‘&amp;’</title>
      <link href="/2023/10/22/C-%E4%B8%AD%E7%9A%84/"/>
      <url>/2023/10/22/C-%E4%B8%AD%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>当涉及到 C++ 中的 <code>&amp;</code>符号时，我们可以将其归结为以下几个主要用途和含义：</p><ol type="1"><li><p><strong>引用符号</strong>：</p><ul><li><p><code>&amp;</code> 用于声明引用类型：你可以使用<code>&amp;</code>来创建引用，使变量成为另一个变量的别名。引用允许你对同一数据进行多个命名引用，而不是创建副本。例如：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">// ref 现在是 x 的别名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre> 修改 <code>ref</code> 也会影响<code>x</code>，因为它们引用同一个值。</p></li><li><p><code>const T&amp;</code>用于声明常量引用：常量引用允许你引用值，但不允许修改它。这在函数参数传递中很有用，可以防止不必要的拷贝。例如：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> cref <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">// x 的常量引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></li></ul></li><li><p><strong>取地址符号</strong>：</p><ul><li><code>&amp;</code> 用于获取变量的地址：通过使用 <code>&amp;</code>运算符，你可以获取变量的内存地址，通常与指针一起使用。例如：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span> <span class="token comment">// ptr 存储了 x 的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>按位与运算符</strong>：</p><ul><li><code>&amp;</code>可以用于执行按位与操作：这是一个位运算操作，用于执行两个整数的位级与操作。例如：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">// 00000101</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment">// 00000011</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span> <span class="token comment">// 结果为 00000001，即 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>函数指针和引用</strong>：</p><ul><li><code>&amp;</code>可用于获取函数的指针或引用：它用于指向函数或引用函数。这在函数指针或函数引用的上下文中使用。例如：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">someFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>funcPtr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>someFunction<span class="token punctuation">;</span> <span class="token comment">// funcPtr 存储了函数指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>左值引用</strong>：</p><ul><li>在函数参数列表中，<code>&amp;</code>用于表示左值引用：这允许函数修改传递给它的参数。当函数参数声明为引用时，它可以修改传递给它的值。例如：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">modifyValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 修改 x 的值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>类型标识符</strong>：</p><ul><li>在模板编程和元编程中，<code>&amp;</code>有时用作类型标识符，通常在模板特化或偏特化的上下文中使用，以区分特定的类型。</li></ul></li></ol><p>理解 <code>&amp;</code> 在特定上下文中的确切含义对于正确编写 C++代码非常重要，因为它可以表示不同的操作和语义。所以，根据上下文和需要，你可以理解<code>&amp;</code> 为引用、地址、按位与等不同的概念。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于音频流处理【未完成】</title>
      <link href="/2023/10/19/%E5%85%B3%E4%BA%8E%E9%9F%B3%E9%A2%91%E6%B5%81%E5%A4%84%E7%90%86/"/>
      <url>/2023/10/19/%E5%85%B3%E4%BA%8E%E9%9F%B3%E9%A2%91%E6%B5%81%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="音频流与应用场景">音频流与应用场景</h2><p>音频流（audiostreaming）是指将音频数据以流的方式，通过网络进行实时传输，而不是一次性下载整个音频文件。这在实时通信、音乐流媒体、在线广播和游戏中非常常见。通常有以下几种常见的应用：</p><ol type="1"><li>实时通信：音频流在语音通话、视频会议和在线游戏中发挥关键作用。它允许用户实时传输声音，以进行对话或协作。常见的音频编解码格式如Opus和WebRTC用于实时通信。</li><li>音乐流媒体：音乐流媒体服务（如Spotify、AppleMusic和Tidal）通过音频流的方式向用户提供音乐。用户可以即时播放音乐，而不需要下载整个歌曲。通常，这些服务使用高质量的音频编码格式（如AAC或FLAC）以提供出色的音质。</li><li>在线广播：许多广播电台和电台应用程序通过音频流的方式播放音乐、新闻、体育赛事和其他节目。这使得听众可以实时收听，而不必等待完整的广播文件下载。</li><li>游戏音频：音频流也用于游戏中，特别是在线多人游戏。游戏音频可以通过流媒体方式传输，以实现实时互动和更好的游戏体验。</li></ol><h2 id="buffer-size">Buffer Size</h2><p>音频中的缓冲区大小（BufferSize）对音频处理和播放的性能和稳定性有重要影响，特别是在实时音频应用中。大的缓冲区大小在音频处理和播放中具有一些明显的优点和缺点，这些取决于具体的应用和需求。以下是大的缓冲区大小可能具有的一些优点和缺点：</p><p>优点：</p><ol type="1"><li><p>高音频质量：大的缓冲区大小可以存储更多的音频数据，提供更多的处理时间，从而改善音频质量。这对于音乐制作、音频编辑和专业录音非常重要。</p></li><li><p>稳定性：较大的缓冲区可以减少音频丢失和断裂的可能性，从而提高系统的稳定性。这在要求可靠性的应用中非常重要，如广播、电视制作和音乐演出。</p></li><li><p>减少CPU负载：大的缓冲区可以降低CPU的负荷，因为处理音频数据的时间更长，而不需要频繁地填充和处理小的缓冲区。这有助于释放系统资源，使CPU可以用于其他任务。</p></li><li><p>抗抖动：较大的缓冲区可以减轻来自音频数据到达不均匀的网络或外部源的抖动，因为它可以容纳更多的音频数据，使系统更容易应对变化。</p></li></ol><p>缺点：</p><ol type="1"><li><p>延迟：大的缓冲区引入更长的延迟，这在实时音频应用中可能是不可接受的。高延迟可能影响实时通信、游戏和音视频同步。</p></li><li><p>大内存占用：大的缓冲区需要更多的内存来存储音频数据，这可能会增加系统资源的消耗。这对于资源受限的设备和应用来说可能是一个问题。</p></li><li><p>不适合实时应用：对于需要即时响应的应用，如实时通信和游戏，大的缓冲区可能导致不良用户体验，因为延迟增加，可能会导致用户感知到的滞后。</p></li></ol><p>综上所述，大的缓冲区大小通常适用于对音频质量和稳定性要求较高，且可以容忍一定延迟的应用。然而，在实时音频应用中，需要权衡音质、延迟和系统资源的使用，通常会选择较小的缓冲区以确保良好的用户体验。不同应用会根据其需求来选择适当的缓冲区大小。</p>]]></content>
      
      
      <categories>
          
          <category> 数字音频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Digital Audio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音频算法中常见的IIR滤波器</title>
      <link href="/2023/10/14/%E9%9F%B3%E9%A2%91%E7%AE%97%E6%B3%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84IIR%E6%BB%A4%E6%B3%A2%E5%99%A8/"/>
      <url>/2023/10/14/%E9%9F%B3%E9%A2%91%E7%AE%97%E6%B3%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84IIR%E6%BB%A4%E6%B3%A2%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="引言">引言</h2><h2 id="comb-filter">Comb Filter</h2><p>CombFilter是通过将信号的一部分与一个自身延迟版本相叠加进行实现的。结构如图：</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/13/Comb_filter_feedforward.svg/2880px-Comb_filter_feedforward.svg.png" alt="undefined" style="zoom: 15%;"></p><p>差分方程为： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="23.551ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10409.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(490,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(768,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1368,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1923.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2979.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3551.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(3829.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4429.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4929.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(5930,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mi" transform="translate(6570,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(7142,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(7420,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(8242.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(9242.4,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mo" transform="translate(10131.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span> 由于Comb Filter的形状特征，所以中文翻译为梳状滤波器。</p><p>以下是它的主要优缺点和应用场景：</p><p><strong>优点：</strong></p><ol type="1"><li><p><strong>简单而直观：</strong> CombFilter的原理非常直观和易于理解。它的工作方式类似于将原始信号与自身的延迟版本相加，因此在概念上相对简单。</p></li><li><p><strong>产生特殊音效：</strong> CombFilter常用于音频特效处理，如<strong>混响</strong>、共振和相位效果。它可以产生模拟混响的声音，为声音增添空间感和自然感。</p></li><li><p><strong>在音乐创作中有用：</strong>音乐制作人和声音设计师经常使用CombFilter来创造独特的声音效果，以增强音乐作品的创意性。</p></li><li><p><strong>相位干扰效果：</strong> CombFilter的频谱中的凹槽和峰值可以引发相位干扰效果，从而创造出独特的音频效果，如拖尾和位移。</p></li></ol><p><strong>缺点：</strong></p><ol type="1"><li><p><strong>有限的应用范围：</strong> CombFilter主要用于特定的音频特效和信号处理任务。它并不适合所有类型的滤波需求，因此在更广泛的音频处理任务中可能不常见。</p></li><li><p><strong>可能引入噪音：</strong> 当CombFilter的延迟量过大时，它可能引入明显的混响或噪音，这可能不适用于需要高保真度的应用。</p></li></ol><p><strong>应用场景：</strong></p><ol type="1"><li><p><strong>音频混响：</strong> CombFilter经常用于模拟混响效果。通过将原始信号与稍有延迟的版本相加，可以模拟声音在不同表面上反射的效果，从而创造出混响效果。</p></li><li><p><strong>相位效果：</strong> CombFilter可用于创建各种相位效果，如相位移动、拖尾和位移效果。这些效果在音乐制作和声音设计中常用于创造独特的声音。</p></li><li><p><strong>共振效果：</strong> CombFilter还可用于模拟共振效果，使信号在某些频率上增强，从而创造出共振或滤波效果。</p></li><li><p><strong>音频艺术和实验音乐：</strong> CombFilter在音频艺术和实验音乐中常用于创造非传统、抽象的声音效果，以拓展音乐和声音的表现方式。</p></li></ol><p>总的来说，CombFilter是一个独特的工具，适用于特殊的音频处理和音效设计任务。它的应用范围相对有限，主要用于模拟混响、共振和相位效果等领域。对于音乐制作人、声音设计师和音频艺术家来说，它可以为他们的创意提供广泛的可能性。</p><h2 id="biquad-filter">Biquad Filter</h2><p>它被称为"Biquad"，因为其频域传递函数通常包含二次方程。差分方程如下：<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="74.213ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 32802.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(490,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(768,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1368,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1923.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2979.6,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(3408.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(4130.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(4853,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(5425,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(5703,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6303,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(6803.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(7803.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(8232.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8954.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(9676.9,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(10248.9,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(10526.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(11349.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(12349.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(12849.3,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(13349.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(14349.8,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(14778.8,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(15501,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(16223.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(16795.2,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(17073.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(17895.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(18895.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(19395.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(19895.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(20896.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(21425.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(22147.3,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(22869.6,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(23359.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(23637.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(24459.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(25460,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(25960,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(26460.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(27460.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(27989.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(28711.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(29433.9,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(29923.9,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(30201.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(31024.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(32024.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(32524.3,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span> BiquadFilter（二阶滤波器）在信号处理和音频应用中具有许多优点，但也有一些局限性。以下是它们的主要优点和缺点：</p><p><strong>优点：</strong></p><ol type="1"><li><p><strong>灵活性：</strong> BiquadFilter非常灵活，因为它可以用于多种滤波任务，包括低通滤波、高通滤波、带通滤波和陷波滤波等。这使得它适用于各种应用，从音频均衡到音频效果处理。</p></li><li><p><strong>可调参数：</strong> 通过调整滤波器的系数（<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="1.958ex" height="1.945ex" role="img" focusable="false" viewBox="0 -694 865.6 859.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(462,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container></span>, <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="1.958ex" height="1.91ex" role="img" focusable="false" viewBox="0 -694 865.6 844"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(462,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container></span>,<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="1.958ex" height="1.91ex" role="img" focusable="false" viewBox="0 -694 865.6 844"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(462,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span>,<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.185ex" height="1.337ex" role="img" focusable="false" viewBox="0 -441 965.6 591"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container></span>, <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.185ex" height="1.337ex" role="img" focusable="false" viewBox="0 -441 965.6 591"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span>），可以定制滤波器的特性，如中心频率、Q因子（带宽）、增益等。这使得BiquadFilter非常适合满足特定的滤波需求。</p></li><li><p><strong>计算效率：</strong>二阶滤波器的计算效率较高，因为它只涉及有限数量的历史样本，适用于实时处理要求较高的应用。</p></li><li><p><strong>稳定性：</strong> 与其他滤波器设计相比，BiquadFilter通常更容易保持稳定。这是因为它是二阶滤波器，而不是更高阶的滤波器，因此在实现时更容易处理。</p></li><li><p><strong>常见应用：</strong> BiquadFilter在音频处理中非常常见，它用于音响均衡、滤波效果、音频音调控制等。因此，有很多现成的工具和库可以用来实现它。</p></li></ol><p><strong>缺点：</strong></p><ol type="1"><li><p><strong>有限阶数：</strong> BiquadFilter只是一个二阶滤波器，相对于某些要求更高的应用来说，其滤波特性有限。在一些需要更急剧滤波的情况下，可能需要更高阶的滤波器。</p></li><li><p><strong>有界带宽：</strong> BiquadFilter的频率响应通常受到带宽的限制，因此不适用于一些需要非常宽带的应用。</p></li><li><p><strong>相位变化：</strong> BiquadFilter的滤波操作会引入相位变化，这可能在某些应用中是不希望的。某些特定应用可能需要线性相位滤波器。</p></li></ol><p>总的来说，BiquadFilter是一种强大且灵活的滤波器，适用于许多音频和信号处理任务。然而，它并不是适用于所有应用的通用解决方案，因为它有一些限制，特别是在需要更高阶滤波器或更宽带的情况下。在选择滤波器时，应根据具体的应用需求和性能要求来评估其优缺点。</p><h2 id="linkwitz-filter">Linkwitz Filter</h2><p>Linkwitz Filter通常是低通滤波器，其工作原理如下：</p><p><strong>工作原理：</strong> LinkwitzFilter的工作原理基于以下关键思想：</p><ol type="1"><li><strong>扬声器分频：</strong>在多单元扬声器系统中，不同的驱动单元（如低音炮、中音单元和高音单元）负责不同频率范围的声音。为了实现平滑的频率过渡，这些单元需要被分配到适当的频带。</li><li><strong>滤波操作：</strong> LinkwitzFilter通常是低通滤波器，用于处理低音单元的信号。它通过滤除高频部分，只保留低频信号。这有助于确保低音单元不会播放超出其能力范围的高频声音。</li><li><strong>相位对齐：</strong>一个重要的目标是确保低音单元和高音单元之间的频率过渡是平滑的，避免声音不连贯。LinkwitzFilter的设计有助于实现相位对齐，以使不同单元的声音在频率过渡点上保持一致。</li><li><strong>陡峭滤波特性：</strong> LinkwitzFilter通常具有陡峭的滤波特性，以确保频率过渡是明确的，而不会导致重叠或混淆。</li></ol><p>Linkwitz Filter可以有不同的变种，如Linkwitz-RileyFilter，它采用特殊的滤波特性来实现更好的相位一致性。这些滤波器的主要目标是在多单元扬声器系统中实现<strong>平滑的频率过渡</strong>，以提供高质量的声音。</p><h2 id="butterworth-filter">Butterworth Filter</h2><p>Butterworth滤波器是数字音频处理中常用的一种滤波器类型，用于调整音频信号的频率响应。它以其平坦的频率响应特性而著名，但也有一些特定的优点和限制。下面是关于Butterworth滤波器的详细信息：</p><p><strong>工作原理：</strong>Butterworth滤波器是一种IIR（无限脉冲响应）滤波器，通常用于调整音频信号的频率特性。它的工作原理基于传递函数，其频率响应通常以模拟滤波器形式表示为：</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.852ex;" xmlns="http://www.w3.org/2000/svg" width="20.57ex" height="4.809ex" role="img" focusable="false" viewBox="0 -864.9 9092.2 2125.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1277,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1746,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2412.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3468.6,0)"><g data-mml-node="mn" transform="translate(2635,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-801.3) scale(0.707)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msup" transform="translate(1667,0)"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M180 96T180 250T205 541T266 770T353 944T444 1069T527 1150H555Q561 1144 561 1141Q561 1137 545 1120T504 1072T447 995T386 878T330 721T288 513T272 251Q272 133 280 56Q293 -87 326 -209T399 -405T475 -531T536 -609T561 -640Q561 -643 555 -649H527Q483 -612 443 -568T353 -443T266 -270T205 -41Z"></path></g><g data-mml-node="mfrac" transform="translate(597,0)"><g data-mml-node="mi" transform="translate(456.5,394) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="msub" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mi" transform="translate(655,-150)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><rect width="1004.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1841.7,0) translate(0 -0.5)"><path data-c="29" d="M35 1138Q35 1150 51 1150H56H69Q113 1113 153 1069T243 944T330 771T391 541T416 250T391 -40T330 -270T243 -443T152 -568T69 -649H56Q43 -649 39 -647T35 -637Q65 -607 110 -548Q283 -316 316 56Q324 133 324 251Q324 368 316 445Q278 877 48 1123Q36 1137 35 1138Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(2471.7,876.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g><g data-mml-node="msup" transform="translate(5170.2,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(1000,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></g><rect width="5383.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></p><p>其中： - <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.83ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2135 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1277,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1746,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>是滤波器的传递函数。 - <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.023ex" role="img" focusable="false" viewBox="0 -442 469 452"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container></span> 是复变量。- <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.288ex" height="1.359ex" role="img" focusable="false" viewBox="0 -443 1011.2 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mi" transform="translate(655,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></g></svg></mjx-container></span>是截止频率。 - <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container></span> 是滤波器的阶数。</p><p>Butterworth滤波器的特点是，在通带内，振幅响应是平坦的，即没有波纹和不平滑。然而，随着频率的增加，它的振幅响应在截止频率附近会迅速下降，以实现阻带的功能。但需要注意的是，Butterworth滤波器的过渡带相对平滑，不像某些其他滤波器类型那样陡峭。</p><p><strong>优点：</strong></p><ol type="1"><li><p><strong>平坦的频率响应：</strong>Butterworth滤波器的主要优点是其频率响应在通带内非常平坦，这意味着它不引入波纹和失真。这对于需要保持信号质量的应用非常重要，如音频均衡。</p></li><li><p><strong>光滑的相位响应：</strong>与某些其他滤波器类型相比，Butterworth滤波器具有光滑的相位响应。这对于保持信号的相位特性非常有用，尤其是在音频处理中。</p></li><li><p><strong>简单的设计：</strong>Butterworth滤波器的设计相对简单，滤波器系数可以通过标准方程来计算。这使得它易于实现。</p></li></ol><p><strong>缺点：</strong></p><ol type="1"><li><p><strong>不陡峭的频率过渡：</strong>Butterworth滤波器的主要缺点是其频率过渡特性相对不陡峭。这意味着在阻带和通带之间的过渡相对平滑，可能不适用于某些需要急剧滤波的应用。</p></li><li><p><strong>不适用于宽带滤波：</strong>Butterworth滤波器通常不适合实现宽带滤波，因为它的阻带宽度较宽。对于需要精确的频率选择性滤波的应用，可能需要其他类型的滤波器。</p></li></ol><p><strong>应用场景：</strong></p><p>Butterworth滤波器常用于音频处理、语音处理和通信系统中，特别是在需要保持信号质量的情况下。它们适用于低通滤波、高通滤波、带通滤波和带阻滤波等应用。但需要注意，它的截止特性相对平滑，不像某些其他滤波器那样陡峭，因此在某些需要急剧滤波的应用中可能需要其他类型的滤波器。选择滤波器类型通常取决于特定应用的需求和性能要求。</p>]]></content>
      
      
      <categories>
          
          <category> 数字音频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Digital Audio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FIR滤波器和IIR滤波器的比较</title>
      <link href="/2023/10/06/FIR%E6%BB%A4%E6%B3%A2%E5%99%A8%E5%92%8CIIR%E6%BB%A4%E6%B3%A2%E5%99%A8%E7%9A%84%E6%AF%94%E8%BE%83/"/>
      <url>/2023/10/06/FIR%E6%BB%A4%E6%B3%A2%E5%99%A8%E5%92%8CIIR%E6%BB%A4%E6%B3%A2%E5%99%A8%E7%9A%84%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><strong>引言</strong></h2><p>数字滤波在信号处理、音频处理和通信系统中扮演着至关重要的角色。两种常见的数字滤波器类型是FIR（有限脉冲响应）滤波器和IIR（无限脉冲响应）滤波器。它们在设计、特性和应用方面有着显著的区别。本文将深入探讨这两种滤波器的区别，以帮助读者更好地理解它们的工作原理和适用范围。</p><h2 id="fir滤波器和iir滤波器的基础"><strong>1.FIR滤波器和IIR滤波器的基础</strong></h2><p>在深入讨论它们的区别之前，让我们首先了解FIR和IIR滤波器的基础。</p><ul><li><p><strong>FIR滤波器</strong>（有限脉冲响应）：FIR滤波器的输出仅取决于其输入的有限历史样本。它通常以固定长度的冲激响应（滤波器系数）来实现。FIR滤波器的工作原理是将输入信号与这些系数进行卷积运算，以产生输出信号。</p></li><li><p><strong>IIR滤波器</strong>（无限脉冲响应）：与FIR不同，IIR滤波器的输出取决于其输入的历史样本和输出的历史样本。它通常以差分方程的形式来实现，这涉及递归运算，因此它具有反馈结构。</p></li></ul><h2 id="频率响应和相位特性"><strong>2. 频率响应和相位特性</strong></h2><p>一个主要区别在于它们的频率响应和相位特性。</p><ul><li><p><strong>FIR滤波器</strong>：FIR滤波器的频率响应通常是线性相位的，这意味着它不会引入信号中的相位变化。这使得它在需要线性相位特性的应用中很有用，如音频均衡。</p></li><li><p><strong>IIR滤波器</strong>：IIR滤波器的频率响应可以是非线性相位的。它通常在实现特定的频率选择性滤波（如低通、高通、带通和带阻）时非常有效。由于其反馈结构，IIR滤波器通常可以在较低阶数下实现与FIR相当的滤波特性。</p></li></ul><h2 id="稳定性"><strong>3. 稳定性</strong></h2><p>另一个重要区别涉及稳定性。</p><ul><li><p><strong>FIR滤波器</strong>：FIR滤波器是稳定的，因为它没有反馈路径，不会引入极点（poles），从而避免了不稳定性。</p></li><li><p><strong>IIR滤波器</strong>：IIR滤波器具有反馈路径，因此可能引入极点，这会使它们在某些情况下变得不稳定。确保IIR滤波器的稳定性需要谨慎的设计和分析。</p></li></ul><h2 id="实现方式"><strong>4. 实现方式</strong></h2><p>这两种滤波器的实现方式也不同。</p><ul><li><p><strong>FIR滤波器</strong>：FIR滤波器可以通过卷积运算来实现，通常需要一个固定长度的冲激响应（滤波器系数），这些系数可以通过窗函数、频域设计或优化算法来选择。</p></li><li><p><strong>IIR滤波器</strong>：IIR滤波器通常以差分方程的形式来实现，涉及递归运算，这需要更少的存储器和计算资源，但可能需要更多的注意来确保稳定性。</p></li></ul><h2 id="应用领域"><strong>5. 应用领域</strong></h2><p>最后，这两种滤波器在不同的应用和需求下有各自的优势和限制。</p><ul><li><p><strong>FIR滤波器</strong>通常用于需要线性相位的应用，如音频均衡、陷波滤波和滤波效果。它们还常用于数字信号处理中的滤波任务，因为它们的设计和分析较为直观。</p></li><li><p><strong>IIR滤波器</strong>常用于实现特定的频率响应，如声音滤波、语音处理、通信系统中的滤波、控制系统中的滤波等。它们可以用较低阶数实现复杂的滤波特性，从而降低计算和存储成本。</p></li></ul><h2 id="结论"><strong>结论</strong></h2><p>FIR和IIR滤波器是数字信号处理中两种重要的滤波器类型，它们在频率响应、相位特性、稳定性和实现方式等方面有着显著的区别。选择适当的滤波器类型取决于具体的应用需求，理解它们之间的区别有助于更好地应用它们来满足特定任务的要求。无论是音频处理、</p><p>通信系统还是控制系统，这两种滤波器都发挥着关键作用，为信号处理提供了强大的工具。</p>]]></content>
      
      
      <categories>
          
          <category> 数字音频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Digital Audio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十种排序算法(C++)</title>
      <link href="/2023/09/26/%E5%8D%81%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97-C/"/>
      <url>/2023/09/26/%E5%8D%81%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97-C/</url>
      
        <content type="html"><![CDATA[<h1 id="c-十种排序算法">C++ 十种排序算法</h1><h2 id="前言">前言</h2><p>先写一个输入输出的模版，中间调用对应的函数进行排序</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要排序的数字，使用逗号隔开，然后按回车结束输入："</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">// 读取输入并解析为向量</span>    std<span class="token double-colon punctuation">::</span>string input<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">getline</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> numbers<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>stringstream <span class="token function">ss</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">char</span> comma<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ss <span class="token operator">>></span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        numbers<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        ss <span class="token operator">>></span> comma<span class="token punctuation">;</span> <span class="token comment">// 读取逗号</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 调用排序函数</span>    <span class="token function">bubbleSort</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//冒泡为例</span>    <span class="token comment">// 输出排序后的结果</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"排序后的结果："</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol type="1"><li>时间复杂度<span class="math inline">\(O(n^2)\)</span><ol type="1"><li>冒泡排序</li><li>选择排序</li><li>插入排序</li></ol></li><li>时间复杂度<span class="math inline">\(O(nlog_n)\)</span><ol type="1"><li>归并排序</li><li>快速排序</li><li>堆排序</li><li>希尔排序</li></ol></li><li>时间复杂度<span class="math inline">\(O(n)\)</span><ol type="1"><li>基数排序</li><li>桶排序</li><li>计数排序</li></ol></li></ol><h2 id="冒泡排序">1. 冒泡排序</h2><p>冒泡排序是一种简单的排序算法。它重复地遍历待排序的元素列表，比较相邻的两个元素，并在需要时交换它们的位置，直到整个列表都排序完成。</p><h3 id="算法描述">算法描述</h3><ol type="1"><li>初始状态：假设我们有一个未排序的数组或列表。</li><li>从列表的第一个元素开始，依次比较相邻的两个元素。</li><li>如果当前元素大于后面的元素，交换这两个元素的位置，使较大的元素“浮”到列表的末尾。</li><li>继续依次比较相邻元素，重复步骤3，直到达到列表的倒数第二个元素。</li><li>一轮比较完成后，最大的元素已经位于列表的末尾，可以将其视为“已排序部分”。</li><li>重复步骤2-5，但不包括已经排好序的末尾元素。每一轮比较都会将当前未排序部分的最大元素浮到末尾。</li><li>重复执行步骤 2-6，直到所有元素都被排好序。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 交换元素</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点">特点</h3><p>每一轮比较都会将当前未排序部分的最大元素“冒泡”到末尾。它通过不断交换相邻元素来达到排序的目的。</p><h3 id="复杂度">复杂度</h3><p>冒泡排序的时间复杂度为 O(<spanclass="math inline">\(n^2\)</span>)，在大部分情况下不如其他高效的排序算法。它通常适用于排序元素个数较少的情况，</p><h2 id="选择排序">2. 选择排序</h2><p>选择排序每次从待排序的元素中选择最小（或最大）的元素，然后将其放到已排序部分的末尾。</p><h3 id="算法描述-1">算法描述</h3><ol type="1"><li>初始状态：假设我们有一个未排序的数组或列表。</li><li>找到当前未排序部分中的最小（或最大）元素。</li><li>将找到的最小（或最大）元素与未排序部分的第一个元素交换位置。</li><li>此时，第一个元素是已排序部分的最后一个元素。</li><li>将已排序部分的长度加一，未排序部分的长度减一。</li><li>重复步骤 2-5，直到未排序部分为空，所有元素都被排好序</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minIndex <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点-1">特点</h3><p>每次从未排序部分选择一个最小（或最大）的元素，放置在已排序部分的末尾。</p><h3 id="复杂度-1">复杂度</h3><p>选择排序在时间复杂度上也是 O(<spanclass="math inline">\(n^2\)</span>)，但是由于其每一轮只需要一次交换操作，因此在某些情况下，它可能相对冒泡排序更快一些。不过，它依然不如快速排序、归并排序等更高效的排序算法。</p><h2 id="插入排序">3. 插入排序</h2><h3 id="算法描述-2">算法描述</h3><ol type="1"><li>初始状态：假设我们有一个未排序的数组或列表。</li><li>从第二个元素开始，将当前元素视为“待插入元素”。</li><li>将待插入元素与已排序的部分进行比较，找到其在已排序部分中的正确位置。</li><li>依次将已排序部分中比待插入元素大的元素往后移动一个位置，为待插入元素腾出位置。</li><li>将待插入元素放入正确的位置，使得已排序部分仍然保持有序。</li><li>重复步骤 2-5，直到所有元素都被插入到已排序部分。</li></ol><blockquote><p>类似于手动整理一副牌</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> key <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//暂存</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//逐步向后移</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点-2">特点</h3><p>随着每个元素的插入，已排序部分会不断扩大，直到整个列表都排好序</p><h3 id="算法复杂度">算法复杂度</h3><p>虽然插入排序的时间复杂度在最坏情况下为 O(<spanclass="math inline">\(n^2\)</span>)，但在部分有序的情况下，插入排序的性能会较好。它适用于数据量较小或已基本有序的情况。</p><h2 id="归并排序">4. 归并排序</h2><h3 id="算法描述-3">算法描述</h3><ol type="1"><li><strong>分治策略</strong>：归并排序采用分治策略，将一个大问题分成两个或更多的小问题，然后递归地解决这些小问题。在排序中，它将一个未排序的数组分成两个相等大小的子数组。</li><li><strong>递归排序</strong>：对每个子数组递归应用归并排序，直到子数组的长度为1，即已排序。</li><li><strong>合并</strong>：将已排序的子数组合并成一个大的有序数组。合并过程中，从两个子数组中选择较小的元素，依次放入结果数组，直到两个子数组都合并完毕。</li><li><strong>递归回溯</strong>：不断回溯到更高层次的递归调用，合并更大的子数组，直到整个数组都排序完毕。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 合并两个有序子数组</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n1 <span class="token operator">=</span> mid <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n2 <span class="token operator">=</span> right <span class="token operator">-</span> mid<span class="token punctuation">;</span>    <span class="token comment">// 创建临时数组来存放两个子数组</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">leftArr</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">rightArr</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将数据复制到临时数组 leftArr[] 和 rightArr[]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        leftArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>left <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        rightArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 归并两个子数组到原数组 arr[]</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n1 <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> rightArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> leftArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> rightArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 处理剩余的元素</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> leftArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> rightArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 归并排序函数</span><span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment">// 递归排序左半部分和右半部分</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 合并两个子数组</span>        <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点-3">特点</h3><p>归并排序是一种稳定的排序算法，其时间复杂度稳定在O(<spanclass="math inline">\(nlog_n\)</span>)，适用于各种不同大小的数据集。它的主要优点之一是能够处理大规模数据集，但缺点是需要额外的内存来存储临时数组。</p><p>（搜索深度是O(logn)，合并操作是O(n)）</p><h3 id="算法复杂度-1">算法复杂度</h3><h2 id="快速排序">5. 快速排序 ✨</h2><h3 id="算法描述-4">算法描述</h3><ol type="1"><li><strong>选择基准元素</strong>：从待排序的元素中选择一个基准元素。通常选择第一个元素，但也可以选择任何其他元素。</li><li><strong>分区</strong>：将元素分成两个子序列，小于基准元素的子序列和大于基准元素的子序列。这个过程称为分区。</li><li><strong>递归排序</strong>：对小于基准元素和大于基准元素的两个子序列分别递归应用快速排序。</li><li><strong>合并</strong>：将排序好的子序列合并在一起，整个序列就变成了有序的。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 选择基准元素</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 从右向左找小于基准的元素</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">//跳出此循环，代表right找到了比temp小的数字，所以此时arr[left]=arr[right]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 从左向右找大于基准的元素</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span> <span class="token comment">// 将基准元素放入正确的位置</span>        <span class="token comment">// 递归排序基准左右两部分</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点-4">特点</h3><ol type="1"><li><strong>分治策略</strong>：快速排序是一种分治策略，即把大的问题分成小的，然后递归地解决这些小问题。</li><li><strong>原地排序</strong>：快速排序是一种原地排序算法，对于<strong>大规模数据</strong>的性能通常很好，它不需要额外的空间来存储临时数据，因为它通过交换元素在原数组上进行排序。</li><li><strong>不稳定性</strong>：快速排序在分区过程中不保持相同元素的相对顺序，所以是不稳定的排序算法。这意味着如果原始数组中存在相同值的元素，它们在排序后可能会改变相对位置。</li></ol><h3 id="算法复杂度-2">算法复杂度</h3><p>快速排序的平均时间复杂度为O(<span class="math inline">\(nlog_n\)</span>)，其中n是待排序的元素个数。这使得它在大多数情况下比冒泡排序和插入排序更快。不过，最坏情况下的时间复杂度是O(<spanclass="math inline">\(n^2\)</span>)，但通过合理选择基准元素可以避免最坏情况的发生。</p><h2 id="堆排序">6. 堆排序</h2><h3 id="算法描述-5">算法描述</h3><ol type="1"><li><strong>建立堆</strong>：首先，将待排序的数组视为一个二叉堆。二叉堆通常采用数组来表示，其中父节点的值总是不小于（或不大于，具体取决于是最大堆还是最小堆）其子节点的值。</li><li><strong>建堆</strong>：通过对数组进行一次“堆化”操作，将数组构建为一个合法的堆结构。堆化操作会从最后一个非叶子节点开始，逐个将子树调整为符合堆性质的状态。</li><li><strong>排序</strong>：一旦堆构建完毕，堆的根节点就是最大（或最小）值。将根节点与最后一个叶子节点交换，然后将剩余部分重新堆化。这会将最大（或最小）的元素移动到正确的位置。重复这个过程，每次将最大（或最小）的元素放置到已排序部分的末尾。</li><li><strong>重复排序</strong>：重复步骤3，逐渐缩小堆的规模，直到整个数组都排序完成。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token comment">// 调整堆，确保以i为根节点的子树满足堆的性质</span><span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> largest <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token comment">// 初始化根节点</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 左子节点</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 右子节点</span>    <span class="token comment">// 如果左子节点大于根节点，标记左子节点为最大</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        largest <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果右子节点大于根节点，标记右子节点为最大</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        largest <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果最大值不是根节点，交换根节点和最大值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>largest <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 递归调整子树</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> largest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 堆排序函数</span><span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 建立最大堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 一个接一个地提取最大值并缩小堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将最大元素移到最后</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对剩下的部分重新堆化</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点-5">特点</h3><p>堆排序是一种原地排序算法，它具有稳定的O(<spanclass="math inline">\(nlog_n\)</span>)时间复杂度，适用于大规模数据集。但需要注意，堆排序对于小规模数据集来说，相对于其他排序算法，性能可能不如其他简单的算法。</p><h2 id="希尔排序">7. 希尔排序</h2><h3 id="算法描述-6">算法描述</h3><ol type="1"><li><strong>选择间隔序列</strong>：希尔排序的核心是选择一个或多个间隔（增量）序列。这些增量是一系列递减的整数，用于控制排序过程的分组。不同的增量序列可以影响排序的性能。</li><li><strong>分组排序</strong>：根据所选增量序列，将数组分成多个子数组，每个子数组包含间隔为增量的元素。然后对每个子数组应用插入排序或其他排序算法。</li><li><strong>逐渐缩小增量</strong>：重复步骤2，逐渐减小增量，最终减小到1。</li><li><strong>最终排序</strong>：当增量减小到1时，整个数组被分成一个大组，进行最终的排序。通常，此时的数组已经在前几轮排序中变得部分有序，因此最终排序的工作量相对较小。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token comment">// 希尔排序函数</span><span class="token keyword">void</span> <span class="token function">shellSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 选择增量序列，这里使用经典的希尔增量序列</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 对每个子数组应用插入排序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">>=</span> gap <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点-6">特点</h3><p>希尔排序是一种改进的插入排序算法，通过选择不同的增量序列可以在性能和排序效率之间取得平衡。希尔排序的平均时间复杂度通常介于O(<spanclass="math inline">\(nlog_n\)</span>)和O(<spanclass="math inline">\(n^2\)</span>)之间，取决于增量序列的选择。希尔排序在某些情况下，特别是对于中等大小的数据集，性能优于常规的插入排序。希尔排序的优势在于其原地排序性质。</p><h3 id="算法复杂度-3">算法复杂度</h3><h2 id="基数排序">8. 基数排序</h2><h3 id="算法描述-特点-算法复杂度">算法描述 特点 算法复杂度</h3><h2 id="桶排序">9. 桶排序</h2><h3 id="算法描述-特点-算法复杂度-1">算法描述 特点 算法复杂度</h3><h2 id="计数排序">10. 计数排序</h2><h3 id="算法描述-特点-算法复杂度-2">算法描述 特点 算法复杂度</h3>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习步骤</title>
      <link href="/2023/09/20/Git%E5%AD%A6%E4%B9%A0%E6%AD%A5%E9%AA%A4/"/>
      <url>/2023/09/20/Git%E5%AD%A6%E4%B9%A0%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="git版本管理学习">Git版本管理学习</h2><p><strong>1. 安装Git：</strong></p><p>首先，你需要在计算机上安装Git。你可以从<ahref="https://git-scm.com/">Git官方网站</a>下载适用于你的操作系统的Git安装程序，并按照安装指南进行安装。</p><p><strong>2. Git基础概念：</strong></p><p>在开始使用Git之前，了解一些基本概念非常重要。以下是一些重要的概念：</p><pre><code>a. 版本控制：理解版本控制的概念，包括分布式版本控制系统和中央化版本控制系统的区别。b. 仓库（Repository）：Git存储项目的仓库，学习如何创建和管理仓库。c. 提交（Commit）：提交是对代码库的更改的快照，了解如何创建、查看和回滚提交。d. 分支（Branch）：学习如何创建和管理分支，以支持并行开发和特性分支。e. 合并（Merge）：了解如何将一个分支的更改合并到另一个分支中。f. 冲突（Conflict）：学习如何解决合并冲突，这是当两个分支具有冲突更改时发生的情况。</code></pre><p><strong>3. Git基本命令：</strong></p><pre><code>a. `git init`：初始化一个新的Git仓库。b. `git clone`：从远程仓库克隆一个本地副本。c. `git add`：将更改添加到暂存区。d. `git commit`：提交更改并创建一个新的快照。e. `git status`：检查工作目录的状态，查看已更改的文件。f. `git log`：查看提交历史记录。g. `git branch`：列出所有分支。h. `git checkout`：切换分支或恢复文件。i. `git merge`：合并分支。j. `git pull`：从远程仓库拉取更改。k. `git push`：将本地更改推送到远程仓库。</code></pre><p><strong>4. 学习资源：</strong></p><p>以下是一些学习Git的资源：</p><ul><li>官方Git文档：Git官方网站上有详细的文档和教程https://git-scm.com/doc</li><li>GitHubSkill：GitHub提供了一个在线学习平台Skill，专门用于学习Git和GitHubhttps://skills.github.com/</li><li>书籍：《Pro Git》是一本免费的Git教程书籍，可以在线阅读https://git-scm.com/book/en/v2</li><li>练习网站：一些网站提供了练习Git命令的机会，如Git Exerciseshttps://gitexercises.fracz.com</li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wwise 插件开发步骤</title>
      <link href="/2023/08/09/Wwise-%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4/"/>
      <url>/2023/08/09/Wwise-%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在开始建立Wwise插件之前可以通过下面两个视频对插件开发有个认识：</p><ol type="1"><li>Distortion失真效果器开发: <ahref="https://www.youtube.com/watch?v=abMtq9nGj8Y">Wwise Up On Air -Hands On | Creating a Plug-In for Wwise Part 1: Environment Setup &amp;First Plug-In - YouTube</a>)</li><li>Metering创建和GUI设计: <ahref="https://www.youtube.com/watch?v=dYy7r8vljz0">Wwise Up On Air HandsOn | Creating a Plug-In for Wwise Part 2: UI and Monitoring Data -YouTube</a>)</li></ol><p>于此同时，需要预先知道一些相关关键词：</p><ul><li>Wwise Authoring Tool：是指声音设计师和配乐师使用的实际应用程序</li><li>WAAPI：音频程序员使用的Wwise开发API</li></ul><p>另外，还有一些其他有用的资源链接：</p><ul><li><ahref="https://www.audiokinetic.com/zh/library/edge/?source=SDK&amp;id=effectplugin_tools_packaging.html">将插件打包以便用在Audiokinetic Launcher 中</a></li><li><ahref="https://blog.audiokinetic.com/fr/a-simplified-pipeline-for-creating-wwise-audio-plug-ins/">用于创建Wwise 音频插件的简化管线</a></li></ul><h2 id="前置安装">前置安装</h2><ol type="1"><li>Python 3</li><li>Wwise SDK</li></ol><p>全文以Visual Studio 2019为例，安装时选择SDK</p><figure><img src="image-20230820132358624.png"alt="image-20230820132358624.png" /><figcaption aria-hidden="true">image-20230820132358624.png</figcaption></figure><h2 id="创建工程">创建工程</h2><p>该步骤也可以看Wwise官方-&gt; <ahref="https://www.audiokinetic.com/zh/library/edge/?source=SDK&amp;id=effectplugin_tools_newplugin.html">创建音频插件</a></p><ol type="1"><li><p>首先通过python命令运行创建工程的命令。默认安装目录为“C:Files(x86).9.7847”</p><blockquote><p>这里通常建议将SDK放在C盘，因为文件需要与VisualStudio相关的部件进行匹配</p></blockquote><pre class="line-numbers language-none"><code class="language-none">py &quot;C:\Program Files (x86)\Audiokinetic\Wwise 2021.1.9.7847\Scripts\Build\Plugins\wp.py&quot; new<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>输入需要创建的插件类型：</p><p>可选类型：source, sink, object_processor, mixer, effect</p><p>我们以创建一个源插件为例子。</p><pre class="line-numbers language-none"><code class="language-none">source<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>为插件名并进入文件。</p><p>此时命令行会让你依次输入如下信息</p><pre class="line-numbers language-none"><code class="language-none">project name: MyNewSourcedisplay name: newauthor: miasoldescription: A new source plug-in<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建完毕，为们使用cd命令，进入文件夹</p><pre class="line-numbers language-none"><code class="language-none">cd MyNewSource<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>对插件进行Premake。我们使用的是Visual Studio2019，所以对应的是VC160</p><pre class="line-numbers language-none"><code class="language-none">python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; premake Windows_vc160python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; premake Authoring<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在文件管理器打开刚刚创建的文件夹。打开红框工程就能进行插件编写了。</p><p><img src="image-20230820134911895.png" alt="image-20230820134911895" style="zoom:50%;" /></p></li><li><p>Build工程</p><p>我们现在先build一下工程在Wwise中进行测试。</p><pre class="line-numbers language-none"><code class="language-none">python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; build -c Release -x x64 -t vc160 Authoring<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>有几点需要注意：</p><ol type="1"><li>插件一定要在Windows系统上进行Build</li><li>编写插件的时候，可能需要在Wwise中运行时进行Debug，此时需要VisualStudio中的“附加到运行程序”功能，详细步骤可以参考：<ahref="https://www.audiokinetic.com/qa/7840/wwise-sdk-how-step-through-code-using-visual-studio-debugger">WwiseSDK, How to step through code using Visual Studio Debugger?</a></li></ol></blockquote></li><li><p>在Wwise中加载</p><p>Default Work Unit -&gt; Actor-Mixer Hierarchy -&gt; New Child -&gt;MyNewSource</p></li></ol><h2 id="插件打包">插件打包</h2><p>打包插件的作用是可以将插件进行分享和发布，并能在Wwise中通过install按钮对其进行安装。</p><h4 id="windows">Windows</h4><ol type="1"><li><p>依次执行以下命令，为Authoring Tool和Sound Engine进行打包</p><blockquote><p>注意version后面的版本号需要与你本地安装的Wwise版本一致，比如我安装的是2021.1.13</p></blockquote><pre class="line-numbers language-none"><code class="language-none">python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; package Authoring --version 2021.1.1.1python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; package Windows_vc160 --version 2021.1.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时我们可以在项目工程中看到两个tax文件（截图截的Mac但是打包操作是在Windows进行的）</p><figure><img src="image-20230822184832254-2726516.png"alt="image-20230822184832254" /><figcaption aria-hidden="true">image-20230822184832254</figcaption></figure><p>同时注意到文件夹里面有一个叫<code>bundle_template.json</code>的文件，打开可以看到一些插件信息。</p><p><img src="image-20230822185106950.png" alt="image-20230822185106950" style="zoom:50%;" /></p><ol start="2" type="1"><li><p>生成bundle</p><pre class="line-numbers language-none"><code class="language-none">python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; generate-bundle --version 2021.1.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在文件夹中出现了<code>bundle.json</code> 文件</p></li><li><p>最终打包</p><ul><li>此时新建一个文件夹，例如我的新建文件夹叫“FootstepsSynth_v2021.1.1”，可以按照“ProjectName_vxxxx.x.x”的格式命名。</li><li>把1.中的三个tax和<code>bundle.json</code>移动到“ProjectName_vxxxx.x.x”</li></ul></li><li><p>在Wwise中测试是否能加载</p><p>打开Wwis，选择plug-in -&gt; Add fromdirectory，然后定位到“ProjectName_vxxxx.x.x”</p><p><img src="image-20230822185813899-2727098.png" alt="image-20230822185813899" style="zoom: 33%;" /></p></li><li><p>加载完成后可以得到如下界面，然后正常安装Wwise插件即可</p><p><img src="image-20230822190032766.png" alt="image-20230822190032766" style="zoom: 33%;" /></p></li><li><p>如果要进行分享，可以将“ProjectName_vxxxx.x.x”文件夹进行压缩。拿到压缩包以后，在步骤4中的pulg-in处需要选择Add from archive</p><p><img src="image-20230822190309883.png" alt="image-20230822190309883" style="zoom:50%;" /></p></li></ol></li></ol><h4 id="mac">Mac</h4><p>Mac的步骤要复杂一些，首先我们需要在Windows系统上完成new、premake、build，然后将文件复制到Mac系统。然后按照下面的步骤进行操作。</p><ol type="1"><li><p>cd命令进入文件夹，输入如下命令</p><blockquote><p>注意！中间的目录是你自己的WwiseSDK安装目录，建议在文件夹里找到“wp.py”文件，然后在命令行输入python再将文件拖拽入命令行后输入premakeMac</p></blockquote><pre class="line-numbers language-none"><code class="language-none">python &#x2F;Applications&#x2F;Audiokinetic&#x2F;Wwise\ 2021.1.10.7883&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py premake Mac<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>用Xcode打开，文件下面的“.xcworkspace”工程，然后在下图找到“developmentteam”，点击选择“other”再删除，让其变成空的</p><figure><img src="image-20230822192321611.png" alt="image-20230822192321611" /><figcaption aria-hidden="true">image-20230822192321611</figcaption></figure></li><li><p>在xcode里面直接进行build 使用命令行</p><pre class="line-numbers language-none"><code class="language-none">python &#x2F;Applications&#x2F;Audiokinetic&#x2F;Wwise\ 2021.1.10.7883&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py build Mac -c Release -x arm64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这里我还是比较推荐直接在xcodebuild，因为能更直观看到报错的原因。比如我build的时候，发现使用了windows相关的包导致build失败。</p></blockquote></li><li><p>将文件转移回到Windws系统，依次输入</p><pre class="line-numbers language-none"><code class="language-none">python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; package Authoring --version 2021.1.1.1python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; package Windows_vc160 --version 2021.1.1.1python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; package Common -v2021.1.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>回到Mac系统进行打包，文件位置注意事项跟步骤1一样</p><pre class="line-numbers language-none"><code class="language-none">python &#x2F;Applications&#x2F;Audiokinetic&#x2F;Wwise\ 2021.1.10.7883&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py package Mac -v2021.1.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>最后回到Windows进行bundle</p><blockquote><p>注意windows上的Wwise一定要安装Apple开发的SDK否则这里会打包失败</p></blockquote><pre class="line-numbers language-none"><code class="language-none">python &quot;%WWISEROOT%&#x2F;Scripts&#x2F;Build&#x2F;Plugins&#x2F;wp.py&quot; generate-bundle --version 2021.1.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>之后的其他安装步骤就跟windows一样了</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 游戏音频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wwise </tag>
            
            <tag> Game Audio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>map和unordered_map区别</title>
      <link href="/2023/07/15/map%E5%92%8Cunordered-map%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/07/15/map%E5%92%8Cunordered-map%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 9%" /><col style="width: 70%" /><col style="width: 20%" /></colgroup><thead><tr class="header"><th></th><th>Map</th><th>unordered_map</th></tr></thead><tbody><tr class="odd"><td>有序</td><td>根据key升序排列</td><td>无序</td></tr><tr class="even"><td>实现接口</td><td>内部实现机制是红黑树，所以查找、添加、删除的效率由红黑树决定</td><td>hash_table</td></tr><tr class="odd"><td>查找时间</td><td>log(n)</td><td>最好O(1) 最差O(n)</td></tr><tr class="even"><td>插入时间</td><td></td><td>与查找相同</td></tr><tr class="odd"><td>删除时间</td><td></td><td>与查找相同</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《程序员面试金典》记录</title>
      <link href="/2023/06/27/%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B8%E3%80%8B%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/06/27/%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B8%E3%80%8B%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h4 id="面试题-01.01.-判定字符是否唯一"><ahref="https://leetcode.cn/problems/is-unique-lcci/">面试题 01.01.判定字符是否唯一</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isUnique</span><span class="token punctuation">(</span>string astr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> astr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>astr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>astr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题非常简单，但是并没有一次通过。主要错误点在于，没有注意到第二次循环需要从i+1开始，错误的写成了i</p><h4 id="面试题-01.02.-判定是否互为字符重排"><ahref="https://leetcode.cn/problems/check-permutation-lcci/">面试题01.02. 判定是否互为字符重排</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">CheckPermutation</span><span class="token punctuation">(</span>string s1<span class="token punctuation">,</span> string s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>s2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> map<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>s1<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            map<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>s2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            map<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span> map<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>second<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题思路在与使用map先记录s1后通过计数匹配s2。unordered_map速度比map快。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer记录</title>
      <link href="/2023/06/04/%E5%89%91%E6%8C%87offer%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/06/04/%E5%89%91%E6%8C%87offer%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="刷题思路">刷题思路</h2><p>第一遍:</p><ol type="1"><li>使用c++独立解。<ul><li>20分钟以上无思路再看他人题解，且标记。</li></ul></li><li>解题完毕，记录自己的题解。</li><li>看他人题解的其他办法</li></ol><h2 id="字符串">字符串</h2><h3 id="剑指-offer-05.-替换空格-简单"><ahref="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05.替换空格</a> 简单</h3><p>我的题解</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">replaceSpace</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string r<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token char">' '</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                r<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token char">'%'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                r<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token char">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                r<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                r<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-offer-58---ii.-左旋转字符串-简单"><ahref="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">剑指Offer 58 - II. 左旋转字符串</a> 简单</h3><p>我的题解</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//切片法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//切片法过于暴力</span><span class="token comment">//遍历法取余</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string r <span class="token operator">=</span> s<span class="token punctuation">;</span>         <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            r<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span>len<span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token operator">%</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-offer-67.-把字符串转换成整数-中等"><ahref="https://leetcode.cn/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/">剑指Offer 67. 把字符串转换成整数</a> 中等</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">strToInt</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//字符串长度为o</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果</span>        <span class="token keyword">int</span> sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//符号，默认为无符号正数</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//序号</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">' '</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//索引到第一个无空格的字符</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'-'</span><span class="token punctuation">)</span> sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//负号</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'-'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'+'</span><span class="token punctuation">)</span> <span class="token operator">++</span>i<span class="token punctuation">;</span> <span class="token comment">// 有符号则向后移一位</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token char">'0'</span><span class="token operator">||</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token char">'9'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">></span> INT_MAX <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">||</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> INT_MAX <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span> <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//溢出判定</span>                <span class="token keyword">return</span> sign <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> INT_MAX <span class="token operator">:</span> INT_MIN<span class="token punctuation">;</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sign <span class="token operator">*</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链表">链表</h2><h3 id="剑指-offer-06.-从尾到头打印链表-简单"><ahref="https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">剑指Offer 06. 从尾到头打印链表</a> 简单</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//回溯</span><span class="token comment">//依次存入temp，再反向存入输出数组</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> temp<span class="token punctuation">,</span> res<span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>顺便复习STL中的<ahref="https://miasol.top/2023/03/18/C-STL%E8%AE%B0%E5%BD%95/">vector</a></p><h3 id="剑指-offer-24.-反转链表"><ahref="https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/">剑指 Offer24. 反转链表</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//头插法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode<span class="token operator">*</span> res<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>cur<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            ListNode<span class="token operator">*</span> temp <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> res<span class="token punctuation">;</span>            res <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双指针">双指针</h2><h3 id="剑指-offer-18.-删除链表的节点"><ahref="https://leetcode.cn/problems/shan-chu-lian-biao-de-jie-dian-lcof/">剑指Offer 18. 删除链表的节点</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token comment">//判断空</span>        ListNode <span class="token operator">*</span>pre<span class="token operator">=</span>head<span class="token punctuation">,</span><span class="token operator">*</span>cur<span class="token operator">=</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">-></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token keyword">return</span> cur<span class="token punctuation">;</span> <span class="token comment">// 判断第一个节点</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">//判断后面的阶段</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                pre<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            pre <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-offer-22.-链表中倒数第k个节点"><ahref="https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">剑指Offer 22. 链表中倒数第k个节点</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//统计法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">getKthFromEnd</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token operator">=</span>head<span class="token punctuation">;</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token operator">=</span>head<span class="token punctuation">;</span>cnt<span class="token operator">></span>k<span class="token punctuation">;</span><span class="token operator">--</span>cnt<span class="token punctuation">)</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//双指针</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">getKthFromEnd</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode<span class="token operator">*</span> p<span class="token operator">=</span>head<span class="token punctuation">,</span> <span class="token operator">*</span>q <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> n<span class="token operator">&lt;</span>k<span class="token punctuation">;</span> <span class="token operator">++</span>n<span class="token punctuation">)</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> q<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-offer-25.-合并两个排序的链表"><ahref="https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/">剑指Offer 25. 合并两个排序的链表</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//迭代</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode<span class="token operator">*</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> res <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">&amp;&amp;</span> l2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">-></span>val <span class="token operator">&lt;</span> l2<span class="token operator">-></span>val<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                res<span class="token operator">-></span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>                l1 <span class="token operator">=</span> l1<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                res<span class="token operator">-></span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>                l2 <span class="token operator">=</span> l2<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            res <span class="token operator">=</span> res<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>            res<span class="token operator">-></span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span>             res<span class="token operator">-></span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//递归</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l1<span class="token punctuation">)</span> <span class="token keyword">return</span> l2<span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l2<span class="token punctuation">)</span> <span class="token keyword">return</span> l1<span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">-></span>val <span class="token operator">&lt;</span> l2<span class="token operator">-></span>val<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           l1<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token operator">-></span>next<span class="token punctuation">,</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> l1<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">else</span>       <span class="token punctuation">&#123;</span>            l2<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-offer-52.-两个链表的第一个公共节点"><ahref="https://leetcode.cn/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/">剑指Offer 52. 两个链表的第一个公共节点</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//双指针遍历相遇</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>headA<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>a <span class="token operator">=</span> headA<span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>b <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            a <span class="token operator">=</span> a <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">?</span> a<span class="token operator">-></span>next <span class="token operator">:</span> headB<span class="token punctuation">;</span>            b <span class="token operator">=</span> b <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">?</span> b<span class="token operator">-></span>next <span class="token operator">:</span> headA<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-offer-21.-调整数组顺序使奇数位于偶数前面"><ahref="https://leetcode.cn/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/">剑指Offer 21. 调整数组顺序使奇数位于偶数前面</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">exchange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//偶数</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//从后往前直到找到第一个奇数</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> right<span class="token operator">&lt;=</span>left<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//right不能在left左边且不能小于0</span>                    right<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                 <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他思路，可以使用双向队列deque进行实现，但是要求结果是vector，实现deque之后需要再依次赋值给新的vector，效率很低，所以在题目要求的情况下，不建议使用deque</p><h3 id="剑指-offer-57.-和为s的两个数字"><ahref="https://leetcode.cn/problems/he-wei-sde-liang-ge-shu-zi-lcof/">剑指Offer 57. 和为s的两个数字</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> res<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-offer-58---i.-翻转单词顺序"><ahref="https://leetcode.cn/problems/fan-zhuan-dan-ci-shun-xu-lcof/">剑指Offer 58 - I. 翻转单词顺序</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reverseWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//首尾空格</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>                left<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//正常</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">' '</span><span class="token operator">||</span>left <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> right<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">' '</span><span class="token punctuation">)</span> right <span class="token operator">=</span> left<span class="token punctuation">;</span><span class="token comment">//第0个字符问题</span>                <span class="token keyword">else</span> right <span class="token operator">=</span> left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">&lt;=</span>temp<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    res <span class="token operator">+=</span>s<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                res <span class="token operator">+=</span> <span class="token char">' '</span><span class="token punctuation">;</span>                right <span class="token operator">=</span> left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            left<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        res<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="栈和队列">栈和队列</h2><h3 id="剑指-offer-09.-用两个栈实现队列"><ahref="https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">剑指Offer 09. 用两个栈实现队列</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CQueue</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s1<span class="token punctuation">,</span>s2<span class="token punctuation">;</span>    <span class="token function">CQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">appendTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> len <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            s2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除栈顶</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            s1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-offer-30.-包含min函数的栈"><ahref="https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/">剑指Offer 30. 包含min函数的栈</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">/** initialize your data structure here. */</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">,</span>s_min<span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m <span class="token operator">=</span> x<span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            s_min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span>m<span class="token punctuation">)</span>                m<span class="token operator">=</span>x<span class="token punctuation">;</span>            s_min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s_min<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//剔除已经删除的元素，这里是易错易忽略点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s_min<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> m <span class="token operator">=</span> s_min<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> s_min<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-offer-59---ii.-队列的最大值"><ahref="https://leetcode.cn/problems/dui-lie-de-zui-da-zhi-lcof/">剑指Offer 59 - II. 队列的最大值</a></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MaxQueue</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dq<span class="token punctuation">;</span>    <span class="token keyword">int</span> max<span class="token punctuation">;</span>    <span class="token function">MaxQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">max_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> dq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> dq<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>dq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>dq<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>value<span class="token punctuation">)</span>            dq<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dq<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">==</span> dq<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            dq<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用一个双端队列保存最大数的序列，尾部放入数之前，先推出所有比该数小的数，然后放入该数。</p><h2 id="模拟">模拟</h2><h4 id="剑指-offer-29.-顺时针打印矩阵"><ahref="https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/">剑指Offer 29. 顺时针打印矩阵</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//空的情况</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bottom <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//从左到右</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>top <span class="token operator">></span> bottom<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 每次从左到右，都要下移一行</span>            <span class="token comment">//从上到下</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>top<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>bottom<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>right <span class="token operator">&lt;</span> left<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 每次从上到下都要，左移一列</span>            <span class="token comment">//从右到左</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>right<span class="token punctuation">;</span> i<span class="token operator">>=</span>left<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>bottom <span class="token operator">&lt;</span> top<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">// 每次从右到左，都要上移一行</span>            <span class="token comment">//从下到上</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>bottom<span class="token punctuation">;</span> i<span class="token operator">>=</span>top<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span> left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//每次从下到上，都要右移一列</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="剑指-offer-31.-栈的压入弹出序列-中等"><ahref="https://leetcode.cn/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/">剑指Offer 31. 栈的压入、弹出序列</a> ✨中等</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">validateStackSequences</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> pushed<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> popped<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stack<span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> pushed<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>cnt<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pushed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>popped<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找算法">查找算法</h3><h4 id="剑指-offer-03.-数组中重复的数字"><ahref="https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指Offer 03. 数组中重复的数字</a></h4><p>使用hash set的唯一性进行遍历，一旦遇到存在的hash set则返回该数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span> map<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> num<span class="token punctuation">;</span>            map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="剑指-offer-53---i.-在排序数组中查找数字-i"><ahref="https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/">剑指Offer 53 - I. 在排序数组中查找数字 I</a></h4><p>使用哈希查找，遍历数组，key为数字，value为出现次数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> map<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> map<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> map<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="剑指-offer-53---ii.-0n-1中缺失的数字"><ahref="https://leetcode.cn/problems/que-shi-de-shu-zi-lcof/">剑指 Offer53 - II. 0～n-1中缺失的数字</a></h4><p>常规使用顺序遍历，这里使用二分法。当nums[mid] =mid时，说明前一半数字（左边）并没有缺少，所以继续查找右边即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>mid<span class="token punctuation">)</span> left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="剑指-offer-04.-二维数组中的查找中等"><ahref="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">剑指Offer 04. 二维数组中的查找</a>✨中等</h4><p>把二维举行想象成菱形(树的思想演变)https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/solutions/95306/mian-shi-ti-04-er-wei-shu-zu-zhong-de-cha-zhao-zuo/?envType=study-plan-v2&amp;envId=coding-interviews</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max_col <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span> max_col<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">&lt;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> i<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">></span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费的宝藏音频音乐工具</title>
      <link href="/2023/04/28/%E2%80%9C%E5%85%8D%E8%B4%B9%E7%9A%84%E5%AE%9D%E8%97%8F%E9%9F%B3%E9%A2%91%E9%9F%B3%E4%B9%90%E5%B7%A5%E5%85%B7%E2%80%9D/"/>
      <url>/2023/04/28/%E2%80%9C%E5%85%8D%E8%B4%B9%E7%9A%84%E5%AE%9D%E8%97%8F%E9%9F%B3%E9%A2%91%E9%9F%B3%E4%B9%90%E5%B7%A5%E5%85%B7%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<p>放几个私藏的免费宝藏音频工具网站/APP，希望对大家有帮助</p><h3id="伴奏音频源分离别再花钱去提取伴奏了">伴奏/音频源分离（别再花钱去提取伴奏了）：</h3><p>Vocal Remover:我最常用的网站之一，不仅可以分离人声和伴奏，还能分离贝斯、鼓、吉他。另外还有音高和BPM检测等功能，强推https://vocalremover.org/</p><p>Ultimate Vocal Remover:桌面应用，集成了许多分离算法，可以自行下载尝试。（支持windows和macOS）https://github.com/Anjok07/ultimatevocalremovergui</p><p>BandLab:类似库乐队一样的音乐制作软件，但里面集成了音频分离算法，且与上面两款不同，它是可以在手机使用的，所以给大家推荐。ios:https://apps.apple.com/us/app/bandlab-music-making-studio/id968585775安卓(谷歌商店)：https://play.google.com/store/apps/details?id=com.bandlab.bandlab&amp;hl=en&amp;gl=US桌面版(支持windows和macOS):https://www.bandlab.com/products/desktop/assistant</p><h3 id="转录">转录</h3><p>（这里涉及到什么是MIDI音符，详细见下图）</p><p>Basic Pitch:音频转MIDI，简单讲就是把你唱出来的旋律转成MIDI文件。例如，在库乐队里加载一个钢琴轨道，把这个MIDI文件拽进去，你就可以听到钢琴演奏对应的音高。非常适合哼唱作曲但没专业音乐训练的小伙伴https://basicpitch.spotify.com/</p><p>音频转MIDI谱：主要用于钢琴，如果有其他乐器在的话效果不是很好，但如果只有钢琴那效果绝佳，是字节国内团队研发的，支持一下。使用方法是拽入音频再点submit，右方就会出现视频演示。官方给出的网站只能下载视频，下载生成midi乐谱需要命令行操作。https://replicate.com/bytedance/piano-transcription</p><figure><img src="image-20230428103412399.png" alt="image-20230428103412399" /><figcaption aria-hidden="true">image-20230428103412399</figcaption></figure><h3 id="其他">其他</h3><p>Drum Bot:实时节奏生成。例如，你连接上MIDI键盘或者直接把电脑放在钢琴边，网站就可以根据你弹琴的速度实时生成一个鼓节奏型为你伴奏演示：https://magenta.tensorflow.org/drumbot网站：https://drumbot.glitch.me/</p><p>NCM转mp3：wyy的NCM格式转mp3[嘘] https://ncm.worthsee.com/</p><p>spotify音乐下载：https://spotifydown.com/</p><p>MiConv格式转换：我一般用来转音频格式，但是网站包含了常见的所有文件格式转换。https://miconv.com/</p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音频中时常提到的鲁棒性是什么意思？</title>
      <link href="/2023/04/12/%E9%9F%B3%E9%A2%91%E4%B8%AD%E6%97%B6%E5%B8%B8%E6%8F%90%E5%88%B0%E7%9A%84%E9%B2%81%E6%A3%92%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2023/04/12/%E9%9F%B3%E9%A2%91%E4%B8%AD%E6%97%B6%E5%B8%B8%E6%8F%90%E5%88%B0%E7%9A%84%E9%B2%81%E6%A3%92%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>做数字音频领域的相关内容的时候，经常看到“鲁棒性”这个名词，一直不是很清晰其定义，每次看到都要搜一下，所以今天想着写篇博客解释一下。</p><h2 id="正文">正文</h2><p>音频领域的鲁棒性是指音频处理算法在面对各种不同类型的音频输入时能够保持良好性能的能力。简言之，鲁棒性是指算法对于噪声、失真、变形、干扰等不完美音频条件的适应性和稳健性。</p><p>在音频处理领域，鲁棒性是一个重要的性能指标，因为实际应用场景中音频输入可能会受到多种因素的干扰，例如背景噪声、录音设备差异、声音品质差异等。鲁棒性的好坏直接影响到音频处理算法在实际应用中的性能和可靠性。</p><p>以下是一些音频领域中鲁棒性的具体解释：</p><ol type="1"><li>噪声鲁棒性：音频处理算法应该能够在噪声环境下保持良好的性能。噪声可能来自于环境中的各种声音，例如交通噪声、人声噪声、风噪声等，这些噪声可能对音频信号的质量和清晰度造成干扰。鲁棒性较好的音频处理算法应该能够减小噪声对于音频信号处理的影响，保持较高的处理准确性。</li><li>失真鲁棒性：音频信号在采集、传输、存储等过程中可能会受到失真的影响，例如量化失真、编码失真、传输丢包等。鲁棒性较好的音频处理算法应该能够对失真进行较好的处理，降低失真对音频处理结果的影响。</li><li>变形鲁棒性：音频信号在传输和处理过程中可能会经历变形，例如音频信号的频率、幅度或相位发生变化。鲁棒性较好的音频处理算法应该能够对这些变形进行适应性处理，保持较好的处理性能。</li><li>干扰鲁棒性：音频处理算法应该能够对来自于其他信号源的干扰进行抑制，例如语音信号处理中的混响、回声、干扰音等。鲁棒性较好的音频处理算法应该能够有效处理这些干扰，保持较高的性能。</li></ol><p>综上所述，音频领域的鲁棒性是指音频处理算法在面对不完美音频输入时能够保持良好性能的能力，包括对噪声、失真、变形和</p>]]></content>
      
      
      <categories>
          
          <category> 数字音频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Digital Audio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fingerprints</title>
      <link href="/2023/04/09/Fingerprints/"/>
      <url>/2023/04/09/Fingerprints/</url>
      
        <content type="html"><![CDATA[<h2 id="from-chatgpt">From ChatGPT</h2><p>Audio fingerprints, also known as audio fingerprints or audiohashing, are compact and unique representations of audio signals thatcan be used for various purposes, such as audio identification, contentrecognition, and audio retrieval. Audio fingerprints are typicallygenerated from the audio content of a given audio file or stream, andthey are designed to be robust to common audio transformations such asnoise, compression, and format conversions.</p><p>Audio fingerprints are usually generated by extracting specificfeatures from an audio signal, such as the amplitude, frequency, orspectral characteristics of the audio, and then converting thesefeatures into a compact representation, often in the form of afixed-length hash or a numerical code. This fingerprint can then be usedto compare against a database of pre-existing fingerprints to identifyor recognize audio content.</p><p>One common application of audio fingerprints is in audioidentification, where audio fingerprints of a reference set of audiofiles are generated and stored in a database, and incoming audio can becompared against these fingerprints to identify the content. Audiofingerprints are also used in audio retrieval systems, where users cansearch for audio content based on a query fingerprint, and in contentrecognition systems, where audio fingerprints are used to detectcopyrighted or unauthorized audio content.</p><p>Audio fingerprints have become an important technology in variousindustries, including music streaming, broadcast monitoring, copyrightenforcement, and audio surveillance, among others. They are also used invarious audio-based applications, such as music recommendation, audiosearch, and audio synchronization.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Digital Audio </tag>
            
            <tag> Music Informatics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ STL记录</title>
      <link href="/2023/03/18/C-STL%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/03/18/C-STL%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="stl-standard-template-library组件">STL (Standard TemplateLibrary)组件</h2><ol type="1"><li>容器 Containers<ol type="1"><li>Vector</li><li>List</li><li>Queue</li><li>Dequeue</li><li>Priority Queue</li><li>Stack</li><li>Set</li><li>Multiset</li><li>Map &amp; unordered map</li><li>Multimap</li></ol></li><li>算法 Algorithms</li><li>迭代器 Iterators</li><li>函数对象 Function Objects</li><li>适配器 Adapters</li></ol><h2 id="算法">算法</h2><ol type="1"><li>排序</li><li>搜索</li><li>常用数组算法</li></ol><h2 id="vector">Vector</h2><blockquote><p>原文 https://www.geeksforgeeks.org/vector-in-cpp-stl/</p></blockquote><h4 id="迭代器iterators">迭代器Iterators</h4><ol type="1"><li><ahref="https://www.geeksforgeeks.org/vectorbegin-vectorend-c-stl/">begin()</a>– 返回迭代器指向的第一个元素</li><li><ahref="https://www.geeksforgeeks.org/vectorbegin-vectorend-c-stl/">end()</a>– 返回迭代器指向的最后一个元素</li><li><ahref="https://www.geeksforgeeks.org/vector-rbegin-and-rend-function-in-c-stl/">rbegin()</a>– 返回迭代器倒序指向的元素，指针从最后一个向第一个移动</li><li><ahref="https://www.geeksforgeeks.org/vector-rbegin-and-rend-function-in-c-stl/">rend()</a>–返回指向vector中第一个元素之前的理论元素的反向迭代器（被视为反向结束）</li><li><ahref="https://www.geeksforgeeks.org/vector-cbegin-vector-cend-c-stl/">cbegin()</a>– 返回指向vector中第一个元素的常量迭代器</li><li><ahref="https://www.geeksforgeeks.org/vector-cbegin-vector-cend-c-stl/">cend()</a>– 返回指向vector中最后一个元素之后的理论元素的常量迭代器。</li><li><ahref="https://www.geeksforgeeks.org/vectorcrend-vectorcrbegin-examples/">crbegin()</a>–返回指向vector中最后一个元素（反向开始）的常量反向迭代器。从最后一个元素移动到第一个元素</li><li><ahref="https://www.geeksforgeeks.org/vectorcrend-vectorcrbegin-examples/">crend()</a>–返回一个常量反向迭代器，指向vector中第一个元素之前的理论元素（被视为反向结束）</li></ol><p>记住是begin和end，其他的看前缀，r: reverse反向，c: constant常量，cr:constant+reverse</p><h4 id="容器capacity">容器Capacity</h4><ol type="1"><li><ahref="https://www.geeksforgeeks.org/vectorempty-vectorsize-c-stl/">size()</a>– 返回元素数量</li><li><ahref="https://www.geeksforgeeks.org/vector-max_size-function-in-c-stl/">max_size()</a>– 返回vector可以存放的最大元素数</li><li><ahref="https://www.geeksforgeeks.org/vector-capacity-function-in-c-stl/">capacity()</a>– 返回当前分配给vector的存储空间的大小，以元素数表示。</li><li><ahref="https://www.geeksforgeeks.org/vector-resize-c-stl/">resize(n)</a>– 调整容器的大小，使其装下n个元素。</li><li><ahref="https://www.geeksforgeeks.org/vectorempty-vectorsize-c-stl/">empty()</a>– 返回容器是否为空</li><li><ahref="https://www.geeksforgeeks.org/vector-shrink_to_fit-function-in-c-stl/">shrink_to_fit()</a>–减少vector的容量以适应其大小并销毁超出容量的所有元素。理解为减去没有存储的空容量</li><li><ahref="https://www.geeksforgeeks.org/using-stdvectorreserve-whenever-possible/">reserve()</a>–要求vector容量至少足以包含 n 个元素。</li></ol><h4 id="元素访问-element-access">元素访问 Element access</h4><ol type="1"><li>reference operator [g] – 返回g索引位置的元素</li><li><ahref="https://www.geeksforgeeks.org/vectorat-vectorswap-c-stl/">at(g)</a>– 返回g索引位置的元素</li><li><ahref="https://www.geeksforgeeks.org/vectorfront-vectorback-c-stl/">front()</a>– 返回vector的第一个元素</li><li><ahref="https://www.geeksforgeeks.org/vectorfront-vectorback-c-stl/">back()</a>– 返回vector的最后一个元素</li><li><ahref="https://www.geeksforgeeks.org/vector-data-function-in-c-stl/">data()</a>–返回指向vector内部使用的内存数组的直接指针，用于存储其拥有的元素。</li></ol><h4 id="modifiers">Modifiers</h4><ol type="1"><li><ahref="https://www.geeksforgeeks.org/vector-assign-in-c-stl/">assign()</a>–通过替换旧元素来为vector元素分配新值</li><li><ahref="https://www.geeksforgeeks.org/vectorpush_back-vectorpop_back-c-stl/">push_back()</a>– 从vector的末尾将元素推入vector中</li><li><ahref="https://www.geeksforgeeks.org/vectorpush_back-vectorpop_back-c-stl/">pop_back()</a>– 从vector的末尾弹出或删除元素。</li><li><ahref="https://www.geeksforgeeks.org/vector-insert-function-in-c-stl/">insert()</a>– 在指定位置的元素之前插入新元素</li><li><ahref="https://www.geeksforgeeks.org/vectorclear-vectorerase-c-stl/">erase()</a>–从vector的指定位置或范围删除元素。</li><li><ahref="https://www.geeksforgeeks.org/vectorat-vectorswap-c-stl/">swap()</a>– 将一个向量的内容与另一个相同类型的向量交换。大小可以不同。</li><li><ahref="https://www.geeksforgeeks.org/vectorclear-vectorerase-c-stl/">clear()</a>– 删除vector的所有元素</li><li><ahref="https://www.geeksforgeeks.org/vector-emplace-function-in-c-stl/">emplace()</a>– 通过在指定位置插入新元素来扩展容器。</li><li><ahref="https://www.geeksforgeeks.org/vectoremplace_back-c-stl/">emplace_back()</a>– 将新元素插入到向量容器中，新元素添加到向量的末尾</li></ol><h2 id="map">Map</h2><p>返回指向末尾的迭代器：end(); 用迭代器访问元素的键值 it-&gt;first用迭代器访问元素的键值对应的元素值 it-&gt;second</p><p>C++中的<code>std::map</code>是一个关联容器，它将键和值以键-值对的形式存储在容器中，并按键的顺序进行排序。以下是<code>std::map</code>提供的一些主要函数及其简介：</p><ol type="1"><li><code>begin()</code>:<ul><li>返回指向容器中第一个键-值对的迭代器。</li></ul></li><li><code>end()</code>:<ul><li>返回指向容器中最后一个键-值对之后位置的迭代器。</li></ul></li><li><code>rbegin()</code>:<ul><li>返回指向容器中最后一个键-值对的逆序迭代器。</li></ul></li><li><code>rend()</code>:<ul><li>返回指向容器中第一个键-值对之前位置的逆序迭代器。</li></ul></li><li><code>clear()</code>:<ul><li>清空容器，移除所有键-值对。</li></ul></li><li><code>count(const KeyType&amp; key)</code>:<ul><li>返回具有给定键的键-值对的数量（通常为0或1，因为<code>map</code>不允许重复键）。</li></ul></li><li><code>empty()</code>:<ul><li>如果容器为空，则返回<code>true</code>；否则返回<code>false</code>。</li></ul></li><li><code>erase(iterator position)</code>:<ul><li>移除指定迭代器位置的键-值对。</li></ul></li><li><code>erase(const KeyType&amp; key)</code>:<ul><li>移除具有给定键的键-值对。</li></ul></li><li><code>find(const KeyType&amp; key)</code>:<ul><li>返回一个指向具有给定键的键-值对的迭代器，如果键不存在，则返回<code>end()</code>。</li></ul></li><li><code>insert(const std::pair&lt;KeyType, ValueType&gt;&amp; kv)</code>:<ul><li>在容器中插入一个键-值对。如果该键已存在，则更新对应的值。</li></ul></li><li><code>size()</code>:<ul><li>返回容器中键-值对的数量。</li></ul></li><li><code>lower_bound(const KeyType&amp; key)</code>:<ul><li>返回指向第一个不小于给定键的键-值对的迭代器。</li></ul></li><li><code>upper_bound(const KeyType&amp; key)</code>:<ul><li>返回指向第一个大于给定键的键-值对的迭代器。</li></ul></li><li><code>equal_range(const KeyType&amp; key)</code>:<ul><li>返回一对迭代器，分别指向容器中所有具有给定键的键-值对的范围。</li></ul></li><li><code>swap(std::map&amp; other)</code>:<ul><li>交换两个<code>map</code>容器的内容。</li></ul></li></ol><p>这些是<code>std::map</code>提供的一些常用函数。<code>map</code>是一个有序容器，用于存储键值对，它会根据键的值来排序，并且不允许重复的键。这使得它非常适用于需要将数据按键进行有序存储和检索的情况。</p><h3 id="map遍历的几种方法">Map遍历的几种方法</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>    mp<span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    mp<span class="token punctuation">[</span><span class="token string">"李四"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    mp<span class="token punctuation">[</span><span class="token string">"王五"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token comment">// 方式一、迭代器</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"方式一、迭代器"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> mp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> mp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> it <span class="token operator">-></span> first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> it <span class="token operator">-></span> second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 方式二、range for C++ 11版本及以上</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n方法二、 range for"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">:</span> mp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 方法三、 C++ 17版本及以上</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n方法三"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token operator">:</span> mp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> key  <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="stack">Stack</h2><p>在默认情况下，<code>std::stack</code>使用<code>std::deque</code>作为其底层数据结构，因为<code>std::deque</code>允许在两端进行高效的插入和删除操作，这对于栈这种数据结构来说非常合适。而deque<code>（双端队列，即"double-ended queue"的缩写）</code>的底层数据结构通常是由一个动态数组（或一系列固定大小的数组块）组成的，而不是像<code>vector</code>一样使用单个连续的内存块。这使得<code>deque</code>在两端（前端和后端）进行高效的插入和删除操作成为可能。</p><p><ahref="https://www.geeksforgeeks.org/stack-empty-and-stack-size-in-c-stl/">empty()</a>– 返回栈是否为空 <ahref="https://www.geeksforgeeks.org/stack-empty-and-stack-size-in-c-stl/">size()</a>– 返回栈的大小 <ahref="https://www.geeksforgeeks.org/stack-top-c-stl/">top()</a> –返回对堆栈最顶部元素的引用 <ahref="https://www.geeksforgeeks.org/stack-push-and-pop-in-c-stl/">push(g)</a>– 将元素“g”添加到堆栈顶部 <ahref="https://www.geeksforgeeks.org/stack-push-and-pop-in-c-stl/">pop()</a>– 删除堆栈中最近输入的元素</p><h2 id="set">Set</h2><p>集合是一种关联容器，其中每个元素都必须是唯一的。其底层实现是红黑树，默认是升序（从小到大）</p><p>当在C++代码中使用<code>std::set</code>时，通常会使用命名空间<code>std</code>，所以你可以不必每次都使用完整的<code>std::set::</code>前缀。以下是相同的函数列表，简化为使用命名空间的写法：</p><ol type="1"><li><code>begin()</code>:<ul><li>返回指向容器中第一个元素的迭代器。</li></ul></li><li><code>end()</code>:<ul><li>返回指向容器中最后一个元素之后位置的迭代器。</li></ul></li><li><code>rbegin()</code>:<ul><li>返回指向容器中最后一个元素的逆序迭代器。</li></ul></li><li><code>rend()</code>:<ul><li>返回指向容器中第一个元素之前位置的逆序迭代器。</li></ul></li><li><code>clear()</code>:<ul><li>清空容器，移除所有元素。</li></ul></li><li><code>count(const KeyType&amp; key)</code>:<ul><li>返回具有给定键值的元素的数量（通常为0或1，因为<code>set</code>不允许重复键）。</li></ul></li><li><code>empty()</code>:<ul><li>如果容器为空，则返回<code>true</code>；否则返回<code>false</code>。</li></ul></li><li><code>erase(iterator position)</code>:<ul><li>移除指定迭代器位置的元素。</li></ul></li><li><code>erase(const KeyType&amp; key)</code>:<ul><li>移除具有给定键值的元素。</li></ul></li><li><code>find(const KeyType&amp; key)</code>:<ul><li>返回一个指向具有给定键值的元素的迭代器，如果元素不存在，则返回<code>end()</code>。</li></ul></li><li><code>insert(const ValueType&amp; value)</code>:<ul><li>在容器中插入一个值。如果该值已存在，则不会插入。</li></ul></li><li><code>size()</code>:<ul><li>返回容器中元素的数量。</li></ul></li><li><code>lower_bound(const KeyType&amp; key)</code>:<ul><li>返回指向第一个不小于给定键值的元素的迭代器。</li></ul></li><li><code>upper_bound(const KeyType&amp; key)</code>:<ul><li>返回指向第一个大于给定键值的元素的迭代器.</li></ul></li><li><code>equal_range(const KeyType&amp; key)</code>:<ul><li>返回一对迭代器，分别指向容器中所有具有给定键值的元素的范围。</li></ul></li><li><code>swap(std::set&amp; other)</code>:<ul><li>交换两个<code>set</code>容器的内容。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora使用技巧记录</title>
      <link href="/2023/03/06/Typora%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/03/06/Typora%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>Markdown内嵌HTML语法所以很多想要的效果直接属于HTML语法就行。这里记录一些比较常用的方法，方便查阅。</p><h2 id="如何引用文献">如何引用文献</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--写在需要索引的地方--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ref1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--写在Reference处--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>ref1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>应用：</p><figure><img src="image-20230306043528282-8077330.png"alt="image-20230306043528282" /><figcaption aria-hidden="true">image-20230306043528282</figcaption></figure><figure><img src="image-20230306043612313-8077373.png"alt="image-20230306043612313" /><figcaption aria-hidden="true">image-20230306043612313</figcaption></figure><p>结果：</p><figure><img src="image-20230306043720889.png" alt="image-20230306043720889" /><figcaption aria-hidden="true">image-20230306043720889</figcaption></figure><h2 id="图片并排">图片并排</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">frame</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>void</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--使用table标签，且frame=void消除外边框--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--&lt;tr>一行的内容&lt;\tr>，&lt;td>一个格子的内容&lt;\td>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片地址1<span class="token punctuation">"</span></span>                     <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>第一张图片显示不出时显示的文字<span class="token punctuation">"</span></span>                     <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>填数字作为高度<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--&lt;center>标签将图片居中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片地址2<span class="token punctuation">"</span></span>                     <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>第二张图片显示不出时显示的文字<span class="token punctuation">"</span></span>                     <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>高度一致会好看<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文字居中">文字居中</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>xxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI+音频音乐相关</title>
      <link href="/2023/03/05/resources/"/>
      <url>/2023/03/05/resources/</url>
      
        <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>在这里放一些自己感兴趣的方向的论文以及AI音频音乐领域的相关产出。</p><h2 id="应用">应用</h2><ol type="1"><li><a href="https://vocalremover.org/">Vocal Remover</a> audio sourceseparation</li><li><ahref="https://github.com/Anjok07/ultimatevocalremovergui">UVR5</a> audiosource separation</li><li><a href="https://magenta.tensorflow.org/drumbot">DrumBot: yourreal-time ML drummer</a></li><li><a href="https://github.com/microsoft/muzic">Muzic</a> musicunderstanding and generation</li><li><a href="https://basicpitch.spotify.com/">Basic Pitch</a>transcription</li><li><ahref="https://github.com/facebookresearch/audiocraft">Audiocraft</a>provides the code and models for MusicGen</li></ol><h2 id="视频">视频</h2><ol type="1"><li><ahref="https://www.youtube.com/@musicaireadinggroup945/featured">Music +AI Reading Group</a></li></ol><h2 id="api数据集工具">API/数据集/工具</h2><ol type="1"><li><a href="https://magenta.tensorflow.org/">Magenta</a></li><li><a href="https://paperswithcode.com/dataset/egfxset">EGFxSet(Electric Guitar Effects Dataset)</a></li><li><ahref="https://github.com/joshreiss/Working-with-the-Web-Audio-API">WebAudio API</a> 基于Javascript的Web API</li><li><a href="https://github.com/Natooz/MidiTok">MidiTok</a> convert MIDIfiles into tokens</li></ol><h2 id="论文研究">论文/研究</h2><h3 id="音频分离-audio-separation">音频分离 Audio Separation</h3><ol type="1"><li><a href="https://arxiv.org/abs/2202.01664">Distortion Audio Effects:Learning How to Recover the Clean Signal</a></li><li><a href="https://arxiv.org/abs/1806.03185">Wave-U-Net: A Multi-ScaleNeural Network for End-to-End Audio Source Separation</a></li></ol><h3 id="自动混音-automatic-mixing">自动混音 Automatic Mixing</h3><ol type="1"><li><ahref="https://www.researchgate.net/publication/320196585_Ten_Years_of_Automatic_Mixing">TenYears of Automatic Mixing(2017)</a></li><li><ahref="https://pearl.plymouth.ac.uk/bitstream/handle/10026.1/16380/A_Deep_Learning_Approach_to_Intelligent_Drum_Mixing_with_the_Wave_U_Net%20%282%29.pdf?sequence=1&amp;isAllowed=n#:~:text=In%20this%20work%2C%20we%20propose,stereo%20mix%20is%20the%20output.">ADeep Learning Approach to Intelligent Drum Mixing with theWave-U-Net</a></li><li><a href="https://github.com/adobe-research/DeepAFx-ST">StyleTransfer of Audio Effects with Differentiable Signal Processing</a></li><li><a href="https://www.mdpi.com/2076-3417/10/2/638">Deep Learning forBlack-Box Modeling of Audio Effects</a></li><li><ahref="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=9053093">ModelingPlate and Spring Reverberation Using A Dsp-Informed Deep NeuralNetwork</a></li></ol><h3 id="音乐分类-music-classification">音乐分类 MusicClassification</h3><ol type="1"><li><ahref="https://towardsdatascience.com/genre-classification-of-electronic-dance-music-using-spotifys-audio-analysis-7350cac7daf0">GenreClassification of Electronic Dance Music Using Spotify’s AudioAnalysis</a>这个是用简单的机器学习分类方法进行实践，有源码和讲解，特别适合入门。</li></ol><h3 id="识别">识别</h3><ol type="1"><li><a href="https://cassebook.github.io/">Computational Analysis ofSound Scenes and Events</a></li><li><a href="https://hyakuchiki.github.io/DiffSynthISMIR/">AccompanyingWebsite for Synthesizer Sound Matching with Differentiable DSP</a></li></ol><h3 id="转录transcription">转录Transcription</h3><ol type="1"><li><a href="https://ieeexplore.ieee.org/document/8588423">AutomaticMusic Transcription: An Overview</a></li><li><a href="https://github.com/magenta/mt3">MT3: Multi-Task MultitrackMusic Transcription</a></li><li><ahref="https://keunwoochoi.wordpress.com/2019/06/11/drummernet-deep-unsupervised-drum-transcription/">DrummerNet– Deep Unsupervised Drum Transcription</a></li></ol><h3 id="音乐生成-music-generation">音乐生成 Music Generation</h3><ol type="1"><li><a href="https://github.com/AI-Guru/music-generation-research">MusicModeling and Music Generation with Deep Learning</a></li><li><a href="https://github.com/gudgud96/ChordAL">ChordAL - Achord-based approach for AI music generation</a></li><li><a href="https://arxiv.org/pdf/2301.01361.pdf">MODELING THE RHYTHMFROM LYRICS FOR MELODY GENERATION OF POP SONG</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Digital Audio </tag>
            
            <tag> Deep Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏音效分类与Keyword</title>
      <link href="/2023/02/28/%E6%B8%B8%E6%88%8F%E9%9F%B3%E6%95%88%E5%88%86%E7%B1%BB/"/>
      <url>/2023/02/28/%E6%B8%B8%E6%88%8F%E9%9F%B3%E6%95%88%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>本文涉及到的游戏音效分类方式，都来源于作者本人的游戏经历、学习内容、游戏声音设计经验等，不是唯一但是方便的。</p><h2 id="分类">分类</h2><p>（直接上思维导图）下面是较为常见的分类方法，在每一次进行音效设计之前最好都写一个文档把涉及到的音效进行整理。</p><figure><img src="基本常见分类.png" alt="基本常见分类" /><figcaption aria-hidden="true">基本常见分类</figcaption></figure><h2 id="keyword">Keyword</h2><h3 id="写在前面">写在前面</h3><p>下面列表的单词都是在音效库中寻找素材的常见keyword，作为音效设计师“贴片”是最基本的技能。寻找好的素材除了丰富的第三方音效库，还需要学会如何用英文对声音进行描述。例如，当画面出现后，你要如何描述出脑中所产生的声音细节？越准确的描述越能帮助你找到精准的音效。平时多听多看专业音效库的命名是提高描述能力的方法之一</p><h3 id="ui">UI</h3><ul><li>interface</li><li>click</li><li>button</li><li>press</li><li>open</li><li>close</li><li>next</li><li>back</li><li>error</li><li>slide</li><li>eject</li><li>positive</li><li>negative</li><li>neutral</li></ul><h3 id="技能">技能</h3><table><colgroup><col style="width: 6%" /><col style="width: 93%" /></colgroup><thead><tr class="header"><th>属性</th><th>Keyword</th></tr></thead><tbody><tr class="odd"><td>风</td><td>whoosh<br/>dust<br/>wind<br/>moving<br/>creak<br/>crispy<br/>reverse<br/>magic</td></tr><tr class="even"><td>火</td><td>fire<br/>fire throw<br/>fireball<br/>cast<br/>burst<br/>launch<br/>lance<br/>reverse<br/>magic</td></tr><tr class="odd"><td>雷电</td><td>whoosh<br/>zap<br/>electric<br/>thunder<br/>reverse<br/>magic</td></tr><tr class="even"><td>水</td><td>whoosh<br />water<br />bubble<br />burst<br />lance<br />Waterimpact<br />splash<br />reverse<br />magic</td></tr><tr class="odd"><td>地</td><td>whoosh<br />rock<br />Impact rocklarge<br />stone<br />reverse<br />magic</td></tr><tr class="even"><td>召唤</td><td>whoosh<br />summon<br />sphere<br />synth<br />large<br />whooshlong<br />evil<br />deliver<br />transfer<br />effect<br />fx<br />scifi<br />reverse<br />magic</td></tr></tbody></table><h3 id="环境音效">环境音效</h3><h4 id="如何思考">如何思考</h4><ol type="1"><li><p>自然环境</p><p>以自然动植物声音为基础</p></li><li><p>人文环境</p><p>以自然动植物以及任务活动声音为基础</p></li><li><p>超现实环境</p><ul><li>物象细节</li><li>意象氛围烘托</li></ul></li></ol><h4 id="自然和人文">自然和人文</h4><ol type="1"><li>时段<ul><li>morning</li><li>afternoon</li><li>night</li></ul></li><li>地点<ul><li>desert</li><li>park</li><li>lakeside</li><li>market</li><li>country</li><li>forest</li><li>street</li></ul></li><li>天气</li><li>物象<ul><li>具体动物</li><li>具体植物</li><li>人物</li></ul></li></ol><h4 id="超现实">超现实</h4><p>合成声</p><ul><li>atmosphere</li><li>synth</li><li>ambient</li><li>rumble （低音）</li><li>Sci fi</li><li>dark long</li></ul>]]></content>
      
      
      <categories>
          
          <category> 游戏音频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Audio Effects </tag>
            
            <tag> Game Audio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整理的一些数据结构基础算法</title>
      <link href="/2023/02/22/%E6%95%B4%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
      <url>/2023/02/22/%E6%95%B4%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>这份文档是在2021年左右整理的一些数据结构重点，同时也是必背的基础算法。最近需要再复习一遍，在看的同时会进行Leetcode同步实践，如果有错误会随时更新。</p><h2 id="链表">链表</h2><h3id="将两个递增有序的单链表设计算法成一个非递减有序的链表链表归并"><strong>将两个递增有序的单链表设计算法成一个非递减有序的链表（链表归并）</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">merge</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span>A<span class="token punctuation">,</span>LNode <span class="token operator">*</span>B<span class="token punctuation">,</span>LNode <span class="token operator">*</span><span class="token operator">&amp;</span>C<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p<span class="token operator">=</span>A<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>q<span class="token operator">=</span>B<span class="token operator">-></span>next<span class="token punctuation">;</span>    C <span class="token operator">=</span> A<span class="token punctuation">;</span>    C<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> C<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> q<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">&lt;=</span> q<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            r<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            r <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>            q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>            r <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> r<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3id="查找链表中是否存在一个值为x的结点若存在则删除结点并返回1否则返回0"><strong>查找链表中是否存在一个值为x的结点，若存在，则删除结点并返回1，否则返回0</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span>LNode<span class="token operator">*</span> <span class="token operator">&amp;</span>L<span class="token punctuation">,</span>ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token operator">-></span>data <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3id="在带头结点的单链表l中删除所有值为x的结点并释放空间"><strong>在带头结点的单链表L中，删除所有值为x的结点，并释放空间</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>pre <span class="token operator">=</span> L<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>del<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            del <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            pre<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            pre <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3id="试编写在头节点的单链表l中删除最小值的高效算法已知最小值"><strong>试编写在头节点的单链表L中删除最小值的高效算法(已知最小值)</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>LNode<span class="token operator">*</span> <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>pre <span class="token operator">=</span> L<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>minpre <span class="token operator">=</span> L<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>min <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">&lt;</span> min<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            min <span class="token operator">=</span> p<span class="token punctuation">;</span>            minpre <span class="token operator">=</span> pre<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         pre <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    minpre<span class="token operator">-></span>next <span class="token operator">=</span> min<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3id="ab两个单链表递增有序从ab中找出公共元素产生单链表c要求不破坏ab结点"><strong>A,B两个单链表递增有序，从A,B中找出公共元素产生单链表C，要求不破坏A，B结点</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span>A<span class="token punctuation">,</span> LNode <span class="token operator">*</span>B<span class="token punctuation">,</span> LNode <span class="token operator">*</span>C<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> A<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>q <span class="token operator">=</span> B<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>r<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">;</span>    r <span class="token operator">=</span> C<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">&lt;</span> q<span class="token operator">-></span>data<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">-></span>data <span class="token operator">&lt;</span> q<span class="token operator">-></span>data<span class="token punctuation">)</span> q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            s <span class="token operator">=</span> <span class="token punctuation">(</span>LNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>            r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>            r <span class="token operator">=</span> s<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3id="查找单链表中倒数第k个结点若成功则输出该节点的data并返回1否则返回0"><strong>查找单链表中倒数第K个结点，若成功，则输出该节点的data，并返回1，否则返回0</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>res <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>k<span class="token punctuation">)</span> res <span class="token operator">=</span> res<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>res<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3id="编写一个算法将一个非负的十进制数转化为二进制数"><strong>编写一个算法将一个非负的十进制数转化为二进制数</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">binary</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> stack<span class="token punctuation">[</span>maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> top<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>result<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n！<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>n<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>top<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i<span class="token operator">=</span>stack<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>result <span class="token operator">=</span> result<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>i<span class="token punctuation">;</span> <span class="token comment">// 注意：特殊算法，记住就行</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3id="设计算法判断带头结点的单链表的全部n个字符是否中心对称例如xyx回文"><strong>设计算法判断带头结点的单链表的全部n个字符是否中心对称，例如xyx（回文）</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">char</span> s<span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        p<span class="token operator">-></span>data <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    i<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树">树</h2><h3id="计算二叉树的所有结点个数"><strong>计算二叉树的所有结点个数</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n1<span class="token punctuation">,</span>n2<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        n1 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        n2 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n1<span class="token operator">+</span>n2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3id="计算二叉树中所有叶子结点的个数"><strong>计算二叉树中所有叶子结点的个数</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n1<span class="token punctuation">,</span>n2<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>p<span class="token operator">-></span>rchild<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        n1 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        n2 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n1<span class="token operator">+</span>n2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计算二叉树的深度"><strong>计算二叉树的深度</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ld<span class="token punctuation">,</span>rd<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        ld <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        rd <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>ld<span class="token operator">></span>rd<span class="token operator">?</span> ld <span class="token operator">:</span> rd<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3id="求二叉树中值为x的层号"><strong>求二叉树中，值为x的层号</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//DFS</span><span class="token keyword">int</span> L <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p！<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">==</span> x<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>L<span class="token punctuation">;</span>        <span class="token function">fun</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fun</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">--</span>L<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="先序非递归遍历二叉树"><strong>先序非递归遍历二叉树</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PreOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">IniteStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>     BiTree p<span class="token operator">=</span>T<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">||</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">vistit</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>p<span class="token punctuation">.</span>lchild<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中序非递归遍历二叉树"><strong>中序非递归遍历二叉树</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InOrder2</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">IniteStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>     BiTree p<span class="token operator">=</span>T<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">||</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>p<span class="token punctuation">.</span>lchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">vistit</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后序非递归遍历二叉树"><strong>后序非递归遍历二叉树</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PostOrder2</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">IniteStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>     BiTree p<span class="token punctuation">,</span>r<span class="token punctuation">;</span>    p<span class="token operator">=</span>T<span class="token punctuation">;</span>    r <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">||</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-></span>p<span class="token punctuation">.</span>lchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">GetTop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token operator">&amp;&amp;</span>p<span class="token operator">-></span>rchild<span class="token operator">!=</span>r<span class="token punctuation">)</span>                 p<span class="token operator">=</span>p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                r<span class="token operator">=</span>p<span class="token punctuation">;</span>                p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3id="heavy_exclamation_mark判断二叉树是否为完全二叉树"><strong>:heavy_exclamation_mark:判断二叉树是否为完全二叉树</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//判断是否为完全二叉树</span>bool <span class="token function">judge</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ture<span class="token punctuation">;</span>SqQueue Q<span class="token punctuation">;</span><span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化队列</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根结点入队</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//读到空指针则停止循环</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左孩子入队</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右孩子入队</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//检查此时队列中是否还有未访问到的结点</span><span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3id="heavy_exclamation_mark判断二叉树是否是二叉排序树">:heavy_exclamation_mark:判断二叉树是否是二叉排序树</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//中序遍历思想，非递归</span><span class="token keyword">void</span> <span class="token function">judge</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">IniteStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>     BiTree p<span class="token operator">=</span>T<span class="token punctuation">;</span>     <span class="token keyword">int</span> pre <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">||</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>p<span class="token punctuation">.</span>lchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token operator">&lt;</span>pre<span class="token punctuation">)</span><span class="token comment">//若父节点小于左子树</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3id="heavy_exclamation_mark利用二叉树遍历的思想判断一个二叉树是否为平衡二叉树">:heavy_exclamation_mark:利用二叉树遍历的思想判断一个二叉树是否为平衡二叉树</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ld<span class="token punctuation">,</span>rd<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        ld <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        rd <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>ld<span class="token operator">></span>rd<span class="token operator">?</span> ld <span class="token operator">:</span> rd<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">judge</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">int</span> ld<span class="token punctuation">,</span>rd<span class="token punctuation">,</span>gap<span class="token punctuation">;</span>    ld <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    rd <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    gap <span class="token operator">=</span> rd <span class="token operator">-</span> ld<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>gap <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> gap <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//递归判断</span>    <span class="token keyword">return</span> <span class="token function">judge</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">judge</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3id="二叉查找树的插入结点k"><strong>二叉查找树的插入结点K</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">BST_Insert</span><span class="token punctuation">(</span>BiTree <span class="token operator">&amp;</span>T<span class="token punctuation">,</span>KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span>Null<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        T <span class="token operator">=</span> <span class="token punctuation">(</span>BiTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BSTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        T<span class="token operator">-></span>key <span class="token operator">=</span> k<span class="token punctuation">;</span>        T<span class="token operator">-></span>lchild <span class="token operator">=</span> T<span class="token operator">-></span>rchild <span class="token operator">=</span> Null<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>T<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//二叉树不允许值相同</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span>T<span class="token operator">-></span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">BST_Insert</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">></span>T<span class="token operator">-></span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">BST_Insert</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3id="二叉查找树中删除结点k"><strong>二叉查找树中删除结点K</strong></h3><p>删除情况：</p><p>​ (以删除结点z为例)</p><ol type="1"><li><p>若z是叶子结点，则直接删除</p></li><li><p>若z只有一颗左/右子树，则让z的子树成为z的父结点的子树(替代z的位置)</p></li><li><p>若z既有左又有右子树</p><p>（1）直接后继：z的右子树最左下角结点x(右子树最小的值)，替代z的位置，然后删除原来的x。</p><p>（2）直接前驱：z的左子树最右下角结点y(左子树最大的值)，替代z的位置，然后删除原来的y。</p></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">BiTree <span class="token function">BST_Delete</span><span class="token punctuation">(</span>BiTree <span class="token operator">&amp;</span>T<span class="token punctuation">,</span>keyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BSTNode tmp<span class="token punctuation">;</span>    <span class="token comment">//未找到删除结点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找到删除元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//找需要删除的结点</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> T<span class="token operator">-></span>data<span class="token punctuation">)</span>        T<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">BST_Delete</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">></span> T<span class="token operator">-></span>data<span class="token punctuation">)</span>        T<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">BST_Delete</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//找到结点</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild <span class="token operator">&amp;&amp;</span> T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//类型3,直接后继</span>            tmp <span class="token operator">=</span> <span class="token function">FindMin</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>            T<span class="token operator">-></span>data <span class="token operator">=</span> tmp<span class="token operator">-></span>data<span class="token punctuation">;</span>            T<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token function">BST_Delete</span><span class="token punctuation">(</span>T<span class="token operator">-></span>data<span class="token punctuation">,</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//类型1和2</span>            tmp <span class="token operator">=</span> T<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span> <span class="token comment">//判断左孩子不存在，即只有右孩子或无子节点</span>                T <span class="token operator">=</span> T<span class="token operator">-></span>rchild<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token comment">//只有左孩子或无子节点</span>                T<span class="token operator">=</span> T<span class="token operator">-></span>lchild<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>；        <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆">堆</h2><h3 id="优先队列">优先队列</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;默认最大优先级队列priority_queue&lt;int,vector&lt;int&gt;&gt;;&#x2F;&#x2F;最小优先级队列,从小到大排priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt;;&#x2F;&#x2F;最大优先级，从大到小排priority_queue&lt;int,vector&lt;int&gt;,less&lt;int&gt;&gt;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="排序">排序</h2><h3id="heavy_exclamation_mark插入排序">:heavy_exclamation_mark:插入排序</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;带哨兵，A[0]空出来作为哨兵void InsertSort(ElemType A[], int n)&#123;    int i,j;    for(i&#x3D;2;i&lt;&#x3D;n;i++)&#123;        if(A[i]&lt;A[i-1])&#123;            A[0] &#x3D; A[i];             for(j &#x3D; i-1; A[0] &lt; A[j]; --j)                A[j+1] &#x3D; A[j];A[j+1] &#x3D; A[0];        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//无哨兵</span><span class="token keyword">void</span>  <span class="token function">InsertSort</span><span class="token punctuation">(</span>ElemType A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>temp<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>A<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      temp <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>temp<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span>        A<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      A<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3id="heavy_exclamation_mark折半插入">:heavy_exclamation_mark:折半插入</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;空出A[0]void InsertSort(ElemType A[], int n)&#123;    int i,j,low,high,mid;    for(i&#x3D;2;i&lt;&#x3D;n;i++)&#123;        A[0] &#x3D; A[1];        low &#x3D; 1;        high &#x3D; i-1;        while(low &lt;&#x3D; high)&#123;          &#x2F;&#x2F;计算mid位置            mid &#x3D; (low + high)&#x2F;2;          &#x2F;&#x2F;比较            if(A[mid] &gt; A[0])                high &#x3D; mid - 1;            else                low &#x3D; mid + 1;          &#x2F;&#x2F;依次后移            for(j &#x3D; i-1; j &gt;&#x3D; low; --j)                A[j+1] &#x3D; A[j];A[low] &#x3D; A[0];        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="希尔排序">希尔排序</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void ShellSort(int A[], int n)&#123;    int temp;    for(int d&#x3D;n&#x2F;2; d&gt;0; d&#x3D;d&#x2F;2)&#123;        for(int i&#x3D;d; i&lt;n; ++i)&#123;            temp &#x3D; A[i];            int j&#x3D;i;            while(j&gt;&#x3D;d &amp;&amp; A[j-d]&gt;temp)&#123;                A[j]&#x3D;A[j-d];                j-&#x3D;d;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="冒泡排序">冒泡排序</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void BubbleSort(ElemType A[], int n)&#123;    int i,j,flag;    for(i&#x3D;0; i&lt;n-1; ++i)&#123;        flag&#x3D;0;        for(j&#x3D;0; j&lt;n-1-i; ++j)&#123;            if(A[j]&gt;A[j+1])&#123;&#x2F;&#x2F;升序                swap(A[j],A[j+1]);&#x2F;&#x2F;交换            flag &#x3D; 1;            &#125;        &#125;        if(flag&#x3D;0) return;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速排序">快速排序</h3><h4 id="c语言版本-递归">c语言版本 递归</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void QuickSort(int A[], int low, int high)&#123;    if(low &lt; high)&#123;&#x2F;&#x2F;跳出条件        int pivotpos &#x3D; Partition(A, low, high);        QuickSort(A, low, pivotpos-1);        QuickSort(A, pivotpos+1, high);    &#125;&#125;int Partition(int A[], int low, int high)&#123;    int pivot &#x3D; A[low];    while(low &lt; high)&#123;        while(low&lt;high &amp;&amp; A[high]&gt;&#x3D;pivot) --high;        A[low] &#x3D; A[high];        while(low&lt;high &amp;&amp; A[low]&lt;&#x3D;pivot)++low;        A[high] &#x3D; A[low];    &#125;    A[low] &#x3D; pivot;    returnlow;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="c版本改">c++版本(改)</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void quicksort(int x[], int first, int last)&#123;    int pos;    if(first &lt; last)&#123;        pos &#x3D; split(x, first, last);        quicksort(x, first, pos-1);        quicksort(x, pos-1, last);    &#125;&#125;int splite(int x[],int first, int last)&#123;    int pivot &#x3D; x[first]; &#x2F;&#x2F;假定选取first位置为基准    int left &#x3D; first;    int Right &#x3D; last;    while(left &lt; right)&#123;        while(pivot &lt; x[right])             --right;        while(left &lt; right &amp;&amp; x[left] &lt;&#x3D; pivot)             ++left;        if(left&lt;right)             swap(x[left],x[right]);    &#125;    int pos &#x3D; right;    x[first] &#x3D; x[pos];    x[pos] &#x3D; pivot;    return pos;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="归并排序">归并排序</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>B <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>low<span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>high<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        B<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>low<span class="token punctuation">,</span>j<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token operator">=</span>i<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>mid <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span>high<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            A<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            A<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//for</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>A<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>B<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span>A<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>B<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">MergSort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">MergSort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Merge</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每次递归到二路归并</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="堆排序">堆排序</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;建立大根堆void BuildMaxHeap(ElemType A[], int len)&#123;    for(int i&#x3D;len&#x2F;2; i&gt;0; i--)&#123;        HeadAdjust(A,i,len);    &#125;&#125;void HeadAdjust(ElemType A[], int len)&#123;    A[0] &#x3D; A[k];    for(i&#x3D;2*k; i&lt;len; i*&#x3D;2)&#123;        if(i&lt;len &amp;&amp; A[i]&lt;A[i+1]) i++;        if(A[0]&gt;&#x3D;A[i]) break;        else&#123;            A[k]&#x3D;A[i];            k&#x3D;i;        &#125;    &#125;    A[k]&#x3D;A[0];&#125;&#x2F;&#x2F;排序void HeapSort(ElemType A[], int len)&#123;    BuildMaxHeap(A,len);    for(i&#x3D;len; i&gt;1; i--)&#123;        Swap(A[i],A[1]);        HeadAdjust(A,i,i-1)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建：Hexo + GitHub + 域名绑定</title>
      <link href="/2023/02/21/blog/"/>
      <url>/2023/02/21/blog/</url>
      
        <content type="html"><![CDATA[<h2 id="准备">准备</h2><ol type="1"><li><p>安装<ahref="https://nodejs.org/en/download/">Node.js</a></p></li><li><p>安装<a href="https://git-scm.com/downloads">Git</a></p></li></ol><h2 id="安装hexo">安装Hexo</h2><ol type="1"><li><p>安装<a href="https://hexo.io/zh-cn/docs/">Hexo</a></p></li><li><p>打开Hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init mywebsite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果Mac出现<code>zsh: command not found: hexo</code> 问题请点击 <ahref="#pro">Mac出现command not found: hexo问题如何解决</a></p></blockquote></li><li><p>进入<code>mywebsite</code> 并且安装<code>npm</code>about</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> mywebsite<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="选择博客主题">选择博客主题</h2><ol type="1"><li><p><a href="https://hexo.io/themes/">Hexo主题官网</a></p></li><li><p>选择想要的主题，并且在终端进入<code>mywebsite</code>下的<code>themes</code>文件夹中输入<code>git clone</code>进行下载</p></li><li><p>在<code>_config.yml</code> 中修改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">theme: 主题文件夹名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如我选择的是white主题，但是clone下来的文件夹名为<code>hexo-theme-white</code>所以在<code>_config.yml</code> 中的设置应该为<code>theme: hexo-theme-white</code></p></li><li><p>现在已经建好了原始的主页，如果想要看网站，那么输入<code>hexo s</code>(等同于<code>hexo server</code>)然后在浏览器中进入<code>http://localhost:4000</code>就能看到了。<strong>在发布前，也可以用该方法进行本地调试。</strong></p></li></ol><h2 id="发布在github上">发布在Github上</h2><ol type="1"><li><p>在终端登录github</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name GitHub用户名<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email GitHub邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>生成SSH</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> GitHub邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时 <code>id_rsa.pub</code> 文件中就添加了你的GitHub账号</p></li><li><p>进入GitHub<code>Settings -&gt; SSH and GPG keys</code>点击<code>New SSH key</code> ，把 <code>id_rsa.pub</code>里的内容复制粘贴在这里</p><figure><img src="image-20230221192413577.png" alt="image-20230221192413577" /><figcaption aria-hidden="true">image-20230221192413577</figcaption></figure></li><li><p>在github上建一个仓库 “用户名.github.io”</p></li><li><p>打开 <code>_config.yml</code> 并且修改以下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repo: 仓库地址  branch: main  message: <span class="token string">"提交信息"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装hexo-deployer-git自动部署发布工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>发布</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>发布的时候可能需要输入用户名和密码，但是现在github已经不能用登录密码发布了，所以需要<ahref="https://github.com/settings/tokens">生成token</a>用token替代密码</strong></p></blockquote></li><li><p>打开“用户名.github.io”就能看到你的网站了</p></li></ol><h2 id="绑定域名">绑定域名</h2><ol type="1"><li><p>首先你需要购买自己的域名，阿里云、腾讯云等等都可以</p></li><li><p>在Github项目主页<code>Add file</code>-&gt;<code>Create new file</code>，创建一个名为<code>CNAME</code>的文件，并且填入不含<code>https://</code>和<code>www</code> 的域名名字，例如：</p><figure><img src="image-20230221213328392.png" alt="image-20230221213328392" /><figcaption aria-hidden="true">image-20230221213328392</figcaption></figure><blockquote><p>这样创建好CNAME文件后，每次更新网站都需要重新创建CNAME，所以要将该文件保存到本地。具体位置为当前使用主题的source文件夹下。例如，我使用的butterfly主题，所以保存位置为：<code>/mywebsite/themes/butterfly/source</code></p></blockquote></li><li><p>进入仓库中的<code>Settings</code>-&gt;<code>Pages</code>-&gt;<code>Custom domain</code>确保填入的是自己的域名</p><figure><img src="image-20230221213545435.png" alt="image-20230221213545435" /><figcaption aria-hidden="true">image-20230221213545435</figcaption></figure><blockquote><p>注意！！在更新提交后，如果打开域名遇到404的情况，可能是<ahref="#syco">DNS解析未完成</a></p></blockquote></li><li><p>在终端ping自己的域名并获取ip地址</p><figure><img src="image-20230221213812925.png" alt="image-20230221213812925" /><figcaption aria-hidden="true">image-20230221213812925</figcaption></figure></li><li><p>以<ahref="https://cn.aliyun.com/">阿里云</a>为例，在控制台进行域名解析，添加两个<strong>A记录</strong>，<strong>主机记录</strong>分别为<code>www</code>和<code>@</code>，<strong>记录值</strong>为ping所得的IP地址，稍等一下就可以通过你的域名访问了</p></li></ol><h2 id="mac可能出现的问题">Mac可能出现的问题</h2><h3 id="zsh-command-not-found-hexo"><a id="pro"></a>zsh: command notfound: hexo</h3><ol type="1"><li><p>终端输入<code>cd .npm-global/bin</code></p></li><li><p>输入 <code>pwd</code>查看路径</p><p>一般这里的路径是：<code>/Users/xxx/.npm-global/bin</code></p></li><li><p>输入 <code>vi ~/.zshrc</code></p></li><li><p>编辑<code>.zshrc</code>文件，输入<code>export PATH=$PATH:/Users/xxx/.npm-global/bin</code></p></li><li><p>此时输入<code>hexo -v</code>如果还报错，则输入<code>source ~/.zshrc</code>，再输入Hexo就没问题了</p></li></ol><h2 id="hexo常用命令">Hexo常用命令</h2><p>https://hexo.io/zh-cn/docs/commands.html</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#新建页面</span>hexo new page <span class="token string">"About Me"</span><span class="token comment"># 等同于hexo clean,清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><span class="token comment"># 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</span>hexo cl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更新注意事项">更新注意事项</h2><h3id="dns解析未完成导致同步问题"><a id="syco"></a>DNS解析未完成导致同步问题</h3><p>一般在提交后，Github的Custom domain输入框下会出现“DNS Check inProgress”，此时需要等到其变为“DNS valid forprimary”时再通过域名打开网页否则会404错误。</p>]]></content>
      
      
      <categories>
          
          <category> 博客建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站的碎碎念</title>
      <link href="/2023/02/21/%E5%BB%BA%E7%AB%99%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
      <url>/2023/02/21/%E5%BB%BA%E7%AB%99%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>学习计算机这几年其实前前后后做过两三次博客/个站了，后来都因为各种原因下架或者是不再更新。不过这次是确实有好好计划之后再建站的，应该不会那么短命了。目前第一天上传，只有博客功能，后面我会不断完善个人介绍、作品集、音乐推荐等，有空也会把以前写的东西搬上来。另外，因为现在是中英文两套计算机体系都在学，有些内容可能写英文会比较好表达，所以整个博客是一个中英杂状态。</p>]]></content>
      
      
      <categories>
          
          <category> Talk </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
