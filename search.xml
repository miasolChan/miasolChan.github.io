<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>游戏音效分类与Keyword</title>
      <link href="/2023/02/28/%E6%B8%B8%E6%88%8F%E9%9F%B3%E6%95%88%E5%88%86%E7%B1%BB/"/>
      <url>/2023/02/28/%E6%B8%B8%E6%88%8F%E9%9F%B3%E6%95%88%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言"></a>引言</h2><p>本文涉及到的游戏音效分类方式，都来源于作者本人的游戏经历、学习内容、游戏声音设计经验等，不是唯一但是方便的。</p><h2 id="分类"><a class="header-anchor" href="#分类"></a>分类</h2><p>（直接上思维导图）下面是较为常见的分类方法，在每一次进行音效设计之前最好都写一个文档把涉及到的音效进行整理。</p><p><img src="%E5%9F%BA%E6%9C%AC%E5%B8%B8%E8%A7%81%E5%88%86%E7%B1%BB.png" alt="基本常见分类"></p><h2 id="Keyword"><a class="header-anchor" href="#Keyword"></a>Keyword</h2><h3 id="写在前面"><a class="header-anchor" href="#写在前面"></a>写在前面</h3><p>下面列表的单词都是在音效库中寻找素材的常见keyword，作为音效设计师“贴片”是最基本的技能。寻找好的素材除了丰富的第三方音效库，还需要学会如何用英文对声音进行描述。例如，当画面出现后，你要如何描述出脑中所产生的声音细节？越准确的描述越能帮助你找到精准的音效。平时多听多看专业音效库的命名是提高描述能力的方法之一</p><h3 id="UI"><a class="header-anchor" href="#UI"></a>UI</h3><ul><li>interface</li><li>click</li><li>button</li><li>press</li><li>open</li><li>close</li><li>next</li><li>back</li><li>error</li><li>slide</li><li>eject</li><li>positive</li><li>negative</li><li>neutral</li></ul><h3 id="技能"><a class="header-anchor" href="#技能"></a>技能</h3><table><thead><tr><th>属性</th><th>Keyword</th></tr></thead><tbody><tr><td>风</td><td>whoosh<br/>dust<br/>wind<br/>moving<br/>creak<br/>crispy<br/>reverse<br/>magic</td></tr><tr><td>火</td><td>fire<br/>fire throw<br/>fire ball<br/>cast<br/>burst<br/>launch<br/>lance<br/>reverse<br/>magic</td></tr><tr><td>雷电</td><td>whoosh<br/>zap<br/>electric<br/>thunder<br/>reverse<br/>magic</td></tr><tr><td>水</td><td>whoosh<br />water<br />bubble<br />burst<br />lance<br />Water impact<br />splash<br />reverse<br />magic</td></tr><tr><td>地</td><td>whoosh<br />rock<br />Impact rock large<br />stone<br />reverse<br />magic</td></tr><tr><td>召唤</td><td>whoosh<br />summon<br />sphere<br />synth<br />large<br />whoosh long<br />evil<br />deliver<br />transfer<br />effect<br />fx<br />scifi<br />reverse<br />magic</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 游戏音频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏音效分析之蛋仔派对</title>
      <link href="/2023/02/28/%E6%B8%B8%E6%88%8F%E9%9F%B3%E6%95%88%E5%88%86%E6%9E%90%E4%B9%8B%E8%9B%8B%E4%BB%94%E6%B4%BE%E5%AF%B9/"/>
      <url>/2023/02/28/%E6%B8%B8%E6%88%8F%E9%9F%B3%E6%95%88%E5%88%86%E6%9E%90%E4%B9%8B%E8%9B%8B%E4%BB%94%E6%B4%BE%E5%AF%B9/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 游戏音频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FIR与IIR滤波器</title>
      <link href="/2023/02/23/FIR%E4%B8%8EIIR%E6%BB%A4%E6%B3%A2%E5%99%A8/"/>
      <url>/2023/02/23/FIR%E4%B8%8EIIR%E6%BB%A4%E6%B3%A2%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="FIR"><a class="header-anchor" href="#FIR"></a>FIR</h2>]]></content>
      
      
      <categories>
          
          <category> DSP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Filter </tag>
            
            <tag> 数字音频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整理的一些数据结构基础算法</title>
      <link href="/2023/02/22/%E6%95%B4%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
      <url>/2023/02/22/%E6%95%B4%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言"></a>引言</h2><p>这份文档是在2021年左右整理的一些数据结构重点，同时也是必背的基础算法。最近需要再复习一遍，在看的同时会进行Leetcode同步实践，如果有错误会随时更新。</p><h2 id="链表"><a class="header-anchor" href="#链表"></a>链表</h2><h3 id="将两个递增有序的单链表设计算法成一个非递减有序的链表（链表归并）"><a class="header-anchor" href="#将两个递增有序的单链表设计算法成一个非递减有序的链表（链表归并）"></a><strong>将两个递增有序的单链表设计算法成一个非递减有序的链表（链表归并）</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">merge</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span>A<span class="token punctuation">,</span>LNode <span class="token operator">*</span>B<span class="token punctuation">,</span>LNode <span class="token operator">*</span><span class="token operator">&amp;</span>C<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p<span class="token operator">=</span>A<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>q<span class="token operator">=</span>B<span class="token operator">-></span>next<span class="token punctuation">;</span>    C <span class="token operator">=</span> A<span class="token punctuation">;</span>    C<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> C<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> q<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">&lt;=</span> q<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            r<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            r <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>            q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>            r <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> r<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找链表中是否存在一个值为x的结点，若存在，则删除结点并返回1，否则返回0"><a class="header-anchor" href="#查找链表中是否存在一个值为x的结点，若存在，则删除结点并返回1，否则返回0"></a><strong>查找链表中是否存在一个值为x的结点，若存在，则删除结点并返回1，否则返回0</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span>LNode<span class="token operator">*</span> <span class="token operator">&amp;</span>L<span class="token punctuation">,</span>ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token operator">-></span>data <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在带头结点的单链表L中，删除所有值为x的结点，并释放空间"><a class="header-anchor" href="#在带头结点的单链表L中，删除所有值为x的结点，并释放空间"></a><strong>在带头结点的单链表L中，删除所有值为x的结点，并释放空间</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>pre <span class="token operator">=</span> L<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>del<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            del <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            pre<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            pre <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="试编写在头节点的单链表L中删除最小值的高效算法-已知最小值"><a class="header-anchor" href="#试编写在头节点的单链表L中删除最小值的高效算法-已知最小值"></a><strong>试编写在头节点的单链表L中删除最小值的高效算法(已知最小值)</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>LNode<span class="token operator">*</span> <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>pre <span class="token operator">=</span> L<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>minpre <span class="token operator">=</span> L<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>min <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">&lt;</span> min<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            min <span class="token operator">=</span> p<span class="token punctuation">;</span>            minpre <span class="token operator">=</span> pre<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         pre <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    minpre<span class="token operator">-></span>next <span class="token operator">=</span> min<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="A-B两个单链表递增有序，从A-B中找出公共元素产生单链表C，要求不破坏A，B结点"><a class="header-anchor" href="#A-B两个单链表递增有序，从A-B中找出公共元素产生单链表C，要求不破坏A，B结点"></a><strong>A,B两个单链表递增有序，从A,B中找出公共元素产生单链表C，要求不破坏A，B结点</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span>A<span class="token punctuation">,</span> LNode <span class="token operator">*</span>B<span class="token punctuation">,</span> LNode <span class="token operator">*</span>C<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> A<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>q <span class="token operator">=</span> B<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>r<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">;</span>    r <span class="token operator">=</span> C<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">&lt;</span> q<span class="token operator">-></span>data<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">-></span>data <span class="token operator">&lt;</span> q<span class="token operator">-></span>data<span class="token punctuation">)</span> q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            s <span class="token operator">=</span> <span class="token punctuation">(</span>LNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>            r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>            r <span class="token operator">=</span> s<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找单链表中倒数第K个结点，若成功，则输出该节点的data，并返回1，否则返回0"><a class="header-anchor" href="#查找单链表中倒数第K个结点，若成功，则输出该节点的data，并返回1，否则返回0"></a><strong>查找单链表中倒数第K个结点，若成功，则输出该节点的data，并返回1，否则返回0</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    LNode <span class="token operator">*</span>res <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>k<span class="token punctuation">)</span> res <span class="token operator">=</span> res<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>res<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写一个算法将一个非负的十进制数转化为二进制数"><a class="header-anchor" href="#编写一个算法将一个非负的十进制数转化为二进制数"></a><strong>编写一个算法将一个非负的十进制数转化为二进制数</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">binary</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> stack<span class="token punctuation">[</span>maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> top<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>result<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n！<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>n<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>top<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i<span class="token operator">=</span>stack<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>result <span class="token operator">=</span> result<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>i<span class="token punctuation">;</span> <span class="token comment">// 注意：特殊算法，记住就行</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设计算法判断带头结点的单链表的全部n个字符是否中心对称，例如xyx（回文）"><a class="header-anchor" href="#设计算法判断带头结点的单链表的全部n个字符是否中心对称，例如xyx（回文）"></a><strong>设计算法判断带头结点的单链表的全部n个字符是否中心对称，例如xyx（回文）</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">char</span> s<span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        p<span class="token operator">-></span>data <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    i<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树"><a class="header-anchor" href="#树"></a>树</h2><h3 id="计算二叉树的所有结点个数"><a class="header-anchor" href="#计算二叉树的所有结点个数"></a><strong>计算二叉树的所有结点个数</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n1<span class="token punctuation">,</span>n2<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        n1 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        n2 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n1<span class="token operator">+</span>n2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计算二叉树中所有叶子结点的个数"><a class="header-anchor" href="#计算二叉树中所有叶子结点的个数"></a><strong>计算二叉树中所有叶子结点的个数</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n1<span class="token punctuation">,</span>n2<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>p<span class="token operator">-></span>rchild<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        n1 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        n2 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n1<span class="token operator">+</span>n2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计算二叉树的深度"><a class="header-anchor" href="#计算二叉树的深度"></a><strong>计算二叉树的深度</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ld<span class="token punctuation">,</span>rd<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        ld <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        rd <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>ld<span class="token operator">></span>rd<span class="token operator">?</span> ld <span class="token operator">:</span> rd<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="求二叉树中，值为x的层号"><a class="header-anchor" href="#求二叉树中，值为x的层号"></a><strong>求二叉树中，值为x的层号</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> L <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p！<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">==</span> x<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>L<span class="token punctuation">;</span>        <span class="token function">fun</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fun</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">--</span>L<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="先序非递归遍历二叉树"><a class="header-anchor" href="#先序非递归遍历二叉树"></a><strong>先序非递归遍历二叉树</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PreOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">IniteStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>     BiTree p<span class="token operator">=</span>T<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">||</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">vistit</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>p<span class="token punctuation">.</span>lchild<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中序非递归遍历二叉树"><a class="header-anchor" href="#中序非递归遍历二叉树"></a><strong>中序非递归遍历二叉树</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InOrder2</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">IniteStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>     BiTree p<span class="token operator">=</span>T<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">||</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>p<span class="token punctuation">.</span>lchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">vistit</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后序非递归遍历二叉树"><a class="header-anchor" href="#后序非递归遍历二叉树"></a><strong>后序非递归遍历二叉树</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PostOrder2</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">IniteStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>     BiTree p<span class="token punctuation">,</span>r<span class="token punctuation">;</span>    p<span class="token operator">=</span>T<span class="token punctuation">;</span>    r <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">||</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-></span>p<span class="token punctuation">.</span>lchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">GetTop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token operator">&amp;&amp;</span>p<span class="token operator">-></span>rchild<span class="token operator">!=</span>r<span class="token punctuation">)</span>                 p<span class="token operator">=</span>p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                r<span class="token operator">=</span>p<span class="token punctuation">;</span>                p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="❗判断二叉树是否为完全二叉树"><a class="header-anchor" href="#❗判断二叉树是否为完全二叉树"></a><strong>❗判断二叉树是否为完全二叉树</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//判断是否为完全二叉树</span>bool <span class="token function">judge</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ture<span class="token punctuation">;</span>SqQueue Q<span class="token punctuation">;</span><span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化队列</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根结点入队</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//读到空指针则停止循环</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左孩子入队</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右孩子入队</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//检查此时队列中是否还有未访问到的结点</span><span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="❗判断二叉树是否是二叉排序树"><a class="header-anchor" href="#❗判断二叉树是否是二叉排序树"></a>❗判断二叉树是否是二叉排序树</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//中序遍历思想，非递归</span><span class="token keyword">void</span> <span class="token function">judge</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">IniteStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>     BiTree p<span class="token operator">=</span>T<span class="token punctuation">;</span>     <span class="token keyword">int</span> pre <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">||</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>p<span class="token punctuation">.</span>lchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token operator">&lt;</span>pre<span class="token punctuation">)</span><span class="token comment">//若父节点小于左子树</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="❗利用二叉树遍历的思想判断一个二叉树是否为平衡二叉树"><a class="header-anchor" href="#❗利用二叉树遍历的思想判断一个二叉树是否为平衡二叉树"></a>❗利用二叉树遍历的思想判断一个二叉树是否为平衡二叉树</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ld<span class="token punctuation">,</span>rd<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        ld <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        rd <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>ld<span class="token operator">></span>rd<span class="token operator">?</span> ld <span class="token operator">:</span> rd<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">judge</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">int</span> ld<span class="token punctuation">,</span>rd<span class="token punctuation">,</span>gap<span class="token punctuation">;</span>    ld <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    rd <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    gap <span class="token operator">=</span> rd <span class="token operator">-</span> ld<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>gap <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> gap <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//递归判断</span>    <span class="token keyword">return</span> <span class="token function">judge</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">judge</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉查找树的插入结点K"><a class="header-anchor" href="#二叉查找树的插入结点K"></a><strong>二叉查找树的插入结点K</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">BST_Insert</span><span class="token punctuation">(</span>BiTree <span class="token operator">&amp;</span>T<span class="token punctuation">,</span>KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span>Null<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        T <span class="token operator">=</span> <span class="token punctuation">(</span>BiTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BSTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        T<span class="token operator">-></span>key <span class="token operator">=</span> k<span class="token punctuation">;</span>        T<span class="token operator">-></span>lchild <span class="token operator">=</span> T<span class="token operator">-></span>rchild <span class="token operator">=</span> Null<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>T<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//二叉树不允许值相同</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span>T<span class="token operator">-></span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">BST_Insert</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">></span>T<span class="token operator">-></span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">BST_Insert</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉查找树中删除结点K"><a class="header-anchor" href="#二叉查找树中删除结点K"></a><strong>二叉查找树中删除结点K</strong></h3><p>删除情况：</p><p>​(以删除结点z为例)</p><ol><li><p>若z是叶子结点，则直接删除</p></li><li><p>若z只有一颗左/右子树，则让z的子树成为z的父结点的子树(替代z的位置)</p></li><li><p>若z既有左又有右子树</p><p>（1）直接后继：z的右子树最左下角结点x(右子树最小的值)，替代z的位置，然后删除原来的x。</p><p>（2）直接前驱：z的左子树最右下角结点y(左子树最大的值)，替代z的位置，然后删除原来的y。</p></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">BiTree <span class="token function">BST_Delete</span><span class="token punctuation">(</span>BiTree <span class="token operator">&amp;</span>T<span class="token punctuation">,</span>keyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BSTNode tmp<span class="token punctuation">;</span>    <span class="token comment">//未找到删除结点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找到删除元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//找需要删除的结点</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> T<span class="token operator">-></span>data<span class="token punctuation">)</span>        T<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">BST_Delete</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">></span> T<span class="token operator">-></span>data<span class="token punctuation">)</span>        T<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">BST_Delete</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//找到结点</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild <span class="token operator">&amp;&amp;</span> T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//类型3,直接后继</span>            tmp <span class="token operator">=</span> <span class="token function">FindMin</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>            T<span class="token operator">-></span>data <span class="token operator">=</span> tmp<span class="token operator">-></span>data<span class="token punctuation">;</span>            T<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token function">BST_Delete</span><span class="token punctuation">(</span>T<span class="token operator">-></span>data<span class="token punctuation">,</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//类型1和2</span>            tmp <span class="token operator">=</span> T<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span> <span class="token comment">//判断左孩子不存在，即只有右孩子或无子节点</span>                T <span class="token operator">=</span> T<span class="token operator">-></span>rchild<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token comment">//只有左孩子或无子节点</span>                T<span class="token operator">=</span> T<span class="token operator">-></span>lchild<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>；        <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆"><a class="header-anchor" href="#堆"></a>堆</h2><h3 id="优先队列"><a class="header-anchor" href="#优先队列"></a>优先队列</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;默认最大优先级队列priority_queue&lt;int,vector&lt;int&gt;&gt;;&#x2F;&#x2F;最小优先级队列,从小到大排priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt;;&#x2F;&#x2F;最大优先级，从大到小排priority_queue&lt;int,vector&lt;int&gt;,less&lt;int&gt;&gt;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="排序"><a class="header-anchor" href="#排序"></a>排序</h2><h3 id="❗插入排序"><a class="header-anchor" href="#❗插入排序"></a>❗插入排序</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;带哨兵void InsertSort(ElemType A[], int n)&#123;    int i,j;    for(i&#x3D;2;i&lt;&#x3D;n;i++)&#123;        if(A[i]&lt;A[i-1])&#123;            A[0] &#x3D; A[i];             for(j &#x3D; i-1; A[0] &lt; A[j]; --j)                A[j+1] &#x3D; A[j];A[j+1] &#x3D; A[0];        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="❗折半插入"><a class="header-anchor" href="#❗折半插入"></a>❗折半插入</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void InsertSort(ElemType A[], int n)&#123;    int i,j,low,high,mid;    for(i&#x3D;2;i&lt;&#x3D;n;i++)&#123;        A[0] &#x3D; A[1];        low &#x3D; 1;        high &#x3D; i-1;        while(low &lt;&#x3D; high)&#123;            mid &#x3D; (low + high)&#x2F;2;            if(A[mid] &gt; A[0])                high &#x3D; mid - 1;            else                low &#x3D; mid + 1;            for(j &#x3D; i-1; j &gt;&#x3D; low; --j)                A[j+1] &#x3D; A[j];A[low] &#x3D; A[0];        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="希尔排序"><a class="header-anchor" href="#希尔排序"></a>希尔排序</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void ShellSort(int A[], int n)&#123;    int temp;    for(int d&#x3D;n&#x2F;2; d&gt;0; d&#x3D;d&#x2F;2)&#123;        for(int i&#x3D;d; i&lt;n; ++i)&#123;            temp &#x3D; A[i];            int j&#x3D;i;            while(j&gt;&#x3D;d &amp;&amp; A[j-d]&gt;temp)&#123;                A[j]&#x3D;A[j-d];                j-&#x3D;d;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="冒泡排序"><a class="header-anchor" href="#冒泡排序"></a>冒泡排序</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void BubbleSort(ElemType A[], int n)&#123;    int i,j,flag;    for(i&#x3D;0; i&lt;n-1; ++i)&#123;        flag&#x3D;0;        for(j&#x3D;0; j&lt;n-1-i; ++j)&#123;            if(A[j]&gt;A[j+1])&#123;&#x2F;&#x2F;升序                swap(A[j],A[j+1]);&#x2F;&#x2F;交换            flag &#x3D; 1;            &#125;        &#125;        if(flag&#x3D;0) return;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速排序"><a class="header-anchor" href="#快速排序"></a>快速排序</h3><h4 id="c语言版本-递归"><a class="header-anchor" href="#c语言版本-递归"></a>c语言版本 递归</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void QuickSort(int A[], int low, int high)&#123;    if(low &lt; high)&#123;&#x2F;&#x2F;跳出条件        int pivotpos &#x3D; Partition(A, low, high);        QuickSort(A, low, pivotpos-1);        QuickSort(A, pivotpos+1, high);    &#125;&#125;int Partition(int A[], int low, int high)&#123;    int pivot &#x3D; A[low];    while(low &lt; high)&#123;        while(low&lt;high &amp;&amp; A[high]&gt;&#x3D;pivot) --high;        A[low] &#x3D; A[high];        while(low&lt;high &amp;&amp; A[low]&lt;&#x3D;pivot)++low;        A[high] &#x3D; A[low];    &#125;    A[low] &#x3D; pivot;    returnlow;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="c-版本-改"><a class="header-anchor" href="#c-版本-改"></a>c++版本(改)</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void quicksort(int x[], int first, int last)&#123;    int pos;    if(first &lt; last)&#123;        pos &#x3D; split(x, first, last);        quicksort(x, first, pos-1);        quicksort(x, pos-1, last);    &#125;&#125;int splite(int x[],int first, int last)&#123;    int pivot &#x3D; x[first]; &#x2F;&#x2F;假定选取first位置为基准    int left &#x3D; first;    int Right &#x3D; last;    while(left &lt; right)&#123;        while(pivot &lt; x[right])             --right;        while(left &lt; right &amp;&amp; x[left] &lt;&#x3D; pivot)             ++left;        if(left&lt;right)             swap(x[left],x[right]);    &#125;    int pos &#x3D; right;    x[first] &#x3D; x[pos];    x[pos] &#x3D; pivot;    return pos;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="归并排序"><a class="header-anchor" href="#归并排序"></a>归并排序</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>B <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>low<span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>high<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        B<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>low<span class="token punctuation">,</span>j<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token operator">=</span>i<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>mid <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span>high<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            A<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            A<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//for</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>A<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>B<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span>A<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>B<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">MergSort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">MergSort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Merge</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每次递归到二路归并</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="堆排序"><a class="header-anchor" href="#堆排序"></a>堆排序</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;建立大根堆void BuildMaxHeap(ElemType A[], int len)&#123;    for(int i&#x3D;len&#x2F;2; i&gt;0; i--)&#123;        HeadAdjust(A,i,len);    &#125;&#125;void HeadAdjust(ElemType A[], int len)&#123;    A[0] &#x3D; A[k];    for(i&#x3D;2*k; i&lt;len; i*&#x3D;2)&#123;        if(i&lt;len &amp;&amp; A[i]&lt;A[i+1]) i++;        if(A[0]&gt;&#x3D;A[i]) break;        else&#123;            A[k]&#x3D;A[i];            k&#x3D;i;        &#125;    &#125;    A[k]&#x3D;A[0];&#125;&#x2F;&#x2F;排序void HeapSort(ElemType A[], int len)&#123;    BuildMaxHeap(A,len);    for(i&#x3D;len; i&gt;1; i--)&#123;        Swap(A[i],A[1]);        HeadAdjust(A,i,i-1)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNN</title>
      <link href="/2023/02/22/CNN/"/>
      <url>/2023/02/22/CNN/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言"></a>引言</h2><h2 id="卷积"><a class="header-anchor" href="#卷积"></a>卷积</h2>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建：Hexo + GitHub + 域名绑定</title>
      <link href="/2023/02/21/blog/"/>
      <url>/2023/02/21/blog/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a class="header-anchor" href="#准备"></a>准备</h2><ol><li><p>安装<a href="https://nodejs.org/en/download/">Node.js</a></p></li><li><p>安装<a href="https://git-scm.com/downloads">Git</a></p></li></ol><h2 id="安装Hexo"><a class="header-anchor" href="#安装Hexo"></a>安装Hexo</h2><ol><li><p>安装<a href="https://hexo.io/zh-cn/docs/">Hexo</a></p></li><li><p>打开Hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init mywebsite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果Mac出现<code>zsh: command not found: hexo</code> 问题请点击  <a href="#pro">Mac出现command not found: hexo问题如何解决</a></p></blockquote></li><li><p>进入<code>mywebsite</code> 并且安装<code>npm</code>about</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> mywebsite<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="选择博客主题"><a class="header-anchor" href="#选择博客主题"></a>选择博客主题</h2><ol><li><p><a href="https://hexo.io/themes/">Hexo主题官网</a></p></li><li><p>选择想要的主题，并且在终端进入<code>mywebsite</code>下的<code>themes</code>文件夹中输入<code>git clone</code>进行下载</p></li><li><p>在<code>_config.yml</code> 中修改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">theme: 主题文件夹名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如我选择的是white主题，但是clone下来的文件夹名为<code>hexo-theme-white</code> 所以在<code>_config.yml</code> 中的设置应该为<code>theme: hexo-theme-white</code></p></li><li><p>现在已经建好了原始的主页，如果想要看网站，那么输入<code>hexo s</code>(等同于<code>hexo server</code>) 然后在浏览器中进入<code>http://localhost:4000</code> 就能看到了。<strong>在发布前，也可以用该方法进行本地调试。</strong></p></li></ol><h2 id="发布在Github上"><a class="header-anchor" href="#发布在Github上"></a>发布在Github上</h2><ol><li><p>在终端登录github</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name GitHub用户名<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email GitHub邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>生成SSH</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> GitHub邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时 <code>id_rsa.pub</code> 文件中就添加了你的GitHub账号</p></li><li><p>进入GitHub<code>Settings -&gt; SSH and GPG keys</code>点击  <code>New SSH key</code> ，把 <code>id_rsa.pub</code> 里的内容复制粘贴在这里</p><p><img src="image-20230221192413577.png" alt="image-20230221192413577"></p></li><li><p>在github上建一个仓库 “<a href="http://xn--eqr924avxo.github.io">用户名.github.io</a>”</p></li><li><p>打开 <code>_config.yml</code> 并且修改以下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repo: 仓库地址  branch: main  message: <span class="token string">"提交信息"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装hexo-deployer-git自动部署发布工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>发布</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>发布的时候可能需要输入用户名和密码，但是现在github已经不能用登录密码发布了，所以需要<a href="https://github.com/settings/tokens">生成token</a>用token替代密码</strong></p></blockquote></li><li><p>打开“<a href="http://xn--eqr924avxo.github.io">用户名.github.io</a>”就能看到你的网站了</p></li></ol><h2 id="绑定域名"><a class="header-anchor" href="#绑定域名"></a>绑定域名</h2><ol><li><p>首先你需要购买自己的域名，阿里云、腾讯云等等都可以</p></li><li><p>在Github项目主页<code>Add file </code> -&gt;<code>Create new file</code>，创建一个名为<code>CNAME</code>的文件，并且填入不含<code>https://</code> 和<code>www</code> 的域名名字，例如：</p><p><img src="image-20230221213328392.png" alt="image-20230221213328392"></p><blockquote><p>这样创建好CNAME文件后，每次更新网站都需要重新创建CNAME，所以要将该文件保存到本地。具体位置为当前使用主题的source文件夹下。例如，我使用的butterfly主题，所以保存位置为：<code>/mywebsite/themes/butterfly/source</code></p></blockquote></li><li><p>进入仓库中的<code>Settings</code>-&gt;<code>Pages</code>-&gt;<code>Custom domain</code> 确保填入的是自己的域名</p><p><img src="image-20230221213545435.png" alt="image-20230221213545435"></p><blockquote><p>注意！！在更新提交后，如果打开域名遇到404的情况，可能是<a href="#syco">DNS解析未完成</a></p></blockquote></li><li><p>在终端ping自己的域名并获取ip地址</p><p><img src="image-20230221213812925.png" alt="image-20230221213812925"></p></li><li><p>以<a href="https://cn.aliyun.com/">阿里云</a>为例，在控制台进行域名解析，添加两个<strong>A记录</strong>，<strong>主机记录</strong>分别为<code>www</code>和<code>@</code>，<strong>记录值</strong>为ping所得的IP地址，稍等一下就可以通过你的域名访问了</p></li></ol><h2 id="Mac可能出现的问题"><a class="header-anchor" href="#Mac可能出现的问题"></a>Mac可能出现的问题</h2><h3 id="a-id-pro-a-zsh-command-not-found-hexo"><a class="header-anchor" href="#a-id-pro-a-zsh-command-not-found-hexo"></a><a id="pro"></a>zsh: command not found: hexo</h3><ol><li><p>终端输入<code>cd .npm-global/bin</code></p></li><li><p>输入 <code>pwd</code>查看路径</p><p>一般这里的路径是：<code>/Users/xxx/.npm-global/bin</code></p></li><li><p>输入 <code>vi ~/.zshrc</code></p></li><li><p>编辑<code> .zshrc</code>文件，输入<code>export PATH=$PATH:/Users/xxx/.npm-global/bin</code></p></li><li><p>此时输入<code>hexo -v</code>如果还报错，则输入<code>source ~/.zshrc</code>，再输入Hexo就没问题了</p></li></ol><h2 id="Hexo常用命令"><a class="header-anchor" href="#Hexo常用命令"></a>Hexo常用命令</h2><p><a href="https://hexo.io/zh-cn/docs/commands.html">https://hexo.io/zh-cn/docs/commands.html</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#新建页面</span>hexo new page <span class="token string">"About Me"</span><span class="token comment"># 等同于hexo clean,清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><span class="token comment"># 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</span>hexo cl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更新注意事项"><a class="header-anchor" href="#更新注意事项"></a>更新注意事项</h2><h3 id="a-id-syco-a-DNS解析未完成导致同步问题"><a class="header-anchor" href="#a-id-syco-a-DNS解析未完成导致同步问题"></a><a id="syco"></a>DNS解析未完成导致同步问题</h3><p>一般在提交后，Github的Custom domain输入框下会出现“DNS Check in Progress”，此时需要等到其变为“DNS valid for primary”时再通过域名打开网页否则会404错误。</p>]]></content>
      
      
      <categories>
          
          <category> Blog Build </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站的碎碎念</title>
      <link href="/2023/02/21/%E5%BB%BA%E7%AB%99%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
      <url>/2023/02/21/%E5%BB%BA%E7%AB%99%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>学习计算机这几年其实前前后后做过两三次博客/个站了，后来都因为各种原因下架或者是不再更新。不过这次是确实有好好计划之后再建站的，应该不会那么短命了。目前第一天上传，只有博客功能，后面我会不断完善个人介绍、作品集、音乐推荐等，有空也会把以前写的东西搬上来。另外，因为现在是中英文两套计算机体系都在学，有些内容可能写英文会比较好表达，所以整个博客是一个中英杂状态。</p>]]></content>
      
      
      <categories>
          
          <category> Talk </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
